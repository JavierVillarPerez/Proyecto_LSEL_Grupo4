
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a8c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c40  08007c40  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c48  08007c48  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000100  08007d50  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08007d50  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d4b  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b6  00000000  00000000  00039e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  0003d838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f84  00000000  00000000  0003fa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d4c  00000000  00000000  00059984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dd49  00000000  00000000  0006b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9419  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  000f9494  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000fdf40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000fdf64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c0c 	.word	0x08007c0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08007c0c 	.word	0x08007c0c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <fsm_new>:

#include "fsm.h"
#include <stdlib.h>

fsm_t* fsm_new (fsm_trans_t* tt)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004e0:	2008      	movs	r0, #8
 80004e2:	f007 fa35 	bl	8007950 <malloc>
 80004e6:	4603      	mov	r3, r0
 80004e8:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	f000 f805 	bl	80004fc <fsm_init>
  return this;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <fsm_init>:

void fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	605a      	str	r2, [r3, #4]
  this->current_state = tt->orig_state;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <fsm_fire>:

void fsm_fire (fsm_t* this)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e01c      	b.n	800056a <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d113      	bne.n	8000564 <fsm_fire+0x44>
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	4798      	blx	r3
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00c      	beq.n	8000564 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00c      	beq.n	8000574 <fsm_fire+0x54>
        t->out(this);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	4798      	blx	r3
      break;
 8000562:	e007      	b.n	8000574 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3310      	adds	r3, #16
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	dade      	bge.n	8000530 <fsm_fire+0x10>
    }
  }
}
 8000572:	e000      	b.n	8000576 <fsm_fire+0x56>
      break;
 8000574:	bf00      	nop
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <fsm_sensor_init>:

#include "fsm_sensor.h"
#include "fsm.h"

void fsm_sensor_init(fsm_trans_t* sensor_fsm, sensor_t* sensor, t_bool active, t_bool supply, int data, int period, int setup, t_bool alarma, int threshold_H, int threshold_L, int average)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	4611      	mov	r1, r2
 800058a:	461a      	mov	r2, r3
 800058c:	460b      	mov	r3, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
	sensor->fsm = fsm_new(sensor_fsm);
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f7ff ff9f 	bl	80004d8 <fsm_new>
 800059a:	4602      	mov	r2, r0
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	601a      	str	r2, [r3, #0]
	sensor->active = active;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	79fa      	ldrb	r2, [r7, #7]
 80005a4:	711a      	strb	r2, [r3, #4]
	sensor->supply = supply;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	715a      	strb	r2, [r3, #5]
	sensor->data = data;
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	69ba      	ldr	r2, [r7, #24]
 80005b0:	609a      	str	r2, [r3, #8]
	sensor->period = period;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	69fa      	ldr	r2, [r7, #28]
 80005b6:	60da      	str	r2, [r3, #12]
	sensor->setup = setup;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	6a3a      	ldr	r2, [r7, #32]
 80005bc:	611a      	str	r2, [r3, #16]
	sensor->alarma = alarma;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80005c4:	751a      	strb	r2, [r3, #20]
	sensor->threshold_H = threshold_H;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ca:	619a      	str	r2, [r3, #24]
	sensor->threshold_L = threshold_L;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d0:	61da      	str	r2, [r3, #28]
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <range>:
static int cont = 0;
static int alarma = 0;
static int time_warning ;   	// Tiempo de aviso
static int time_measure ;		// Tiempo de medida
static int time_sleep   ;		// Tiempo de sleep
static int range (fsm_t* this) { if (Data > range_ph_basico || Data < range_ph_acido ) return 1; else return 0; }
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <range+0x2c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	dc03      	bgt.n	80005f4 <range+0x18>
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <range+0x2c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	dc01      	bgt.n	80005f8 <range+0x1c>
 80005f4:	2301      	movs	r3, #1
 80005f6:	e000      	b.n	80005fa <range+0x1e>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000011c 	.word	0x2000011c

0800060c <no_range>:
static int no_range (fsm_t* this) { if (Data <= range_ph_basico && Data >= range_ph_acido ) return 1; else return 0; }
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <no_range+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b05      	cmp	r3, #5
 800061a:	dc05      	bgt.n	8000628 <no_range+0x1c>
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <no_range+0x2c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	dd01      	ble.n	8000628 <no_range+0x1c>
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <no_range+0x1e>
 8000628:	2300      	movs	r3, #0
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000011c 	.word	0x2000011c

0800063c <timer_sleep>:
static int timer_sleep (fsm_t* this) { return (HAL_GetTick()>time_sleep);}
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	f000 fe22 	bl	800128c <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <timer_sleep+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	bf8c      	ite	hi
 8000652:	2301      	movhi	r3, #1
 8000654:	2300      	movls	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000130 	.word	0x20000130

08000664 <timer_warning>:
static int timer_warning (fsm_t* this) { return (HAL_GetTick()>time_warning);}
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	f000 fe0e 	bl	800128c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <timer_warning+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	bf8c      	ite	hi
 800067a:	2301      	movhi	r3, #1
 800067c:	2300      	movls	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000128 	.word	0x20000128

0800068c <timer_measure>:
static int timer_measure (fsm_t* this) { return (HAL_GetTick()>time_measure);}
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	f000 fdfa 	bl	800128c <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <timer_measure+0x24>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	bf8c      	ite	hi
 80006a2:	2301      	movhi	r3, #1
 80006a4:	2300      	movls	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000012c 	.word	0x2000012c

080006b4 <contador>:
static int contador (fsm_t* this) { if(cont==(v_measure)) return 1; else return 0;}
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <contador+0x24>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d101      	bne.n	80006c8 <contador+0x14>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <contador+0x16>
 80006c8:	2300      	movs	r3, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000120 	.word	0x20000120

080006dc <measuring>:

static void measuring (fsm_t* this) { // led blue
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	time_t t;
	int new_data = rand() % 5;
 80006e4:	f007 fa18 	bl	8007b18 <rand>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <measuring+0x98>)
 80006ec:	fb83 1302 	smull	r1, r3, r3, r2
 80006f0:	1059      	asrs	r1, r3, #1
 80006f2:	17d3      	asrs	r3, r2, #31
 80006f4:	1ac9      	subs	r1, r1, r3
 80006f6:	460b      	mov	r3, r1
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	srand((unsigned) time(&t));
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f007 fa4b 	bl	8007ba0 <time>
 800070a:	4603      	mov	r3, r0
 800070c:	460c      	mov	r4, r1
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f9de 	bl	8007ad0 <srand>
	Data = Data + new_data;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <measuring+0x9c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	4413      	add	r3, r2
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <measuring+0x9c>)
 800071e:	6013      	str	r3, [r2, #0]
	cont = cont+1;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <measuring+0xa0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <measuring+0xa0>)
 8000728:	6013      	str	r3, [r2, #0]
	time_measure = HAL_GetTick()+ t_measure;
 800072a:	f000 fdaf 	bl	800128c <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000734:	461a      	mov	r2, r3
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <measuring+0xa4>)
 8000738:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);  // Simula la alimentacion del sensor y estado de measure
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <measuring+0xa8>)
 8000742:	f001 f865 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // prueba
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <measuring+0xa8>)
 800074e:	f001 f85f 	bl	8001810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0); // prueba
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <measuring+0xa8>)
 800075a:	f001 f859 	bl	8001810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0); // prueba
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <measuring+0xa8>)
 8000766:	f001 f853 	bl	8001810 <HAL_GPIO_WritePin>
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	bf00      	nop
 8000774:	66666667 	.word	0x66666667
 8000778:	2000011c 	.word	0x2000011c
 800077c:	20000120 	.word	0x20000120
 8000780:	2000012c 	.word	0x2000012c
 8000784:	40020c00 	.word	0x40020c00

08000788 <process_data>:

static void process_data (fsm_t* this) { // led green
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Simula el estado de process
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <process_data+0x58>)
 8000798:	f001 f83a 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0); // Simula el estado de sleep
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <process_data+0x58>)
 80007a4:	f001 f834 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD6_Pin, 0); // prueba
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <process_data+0x58>)
 80007b0:	f001 f82e 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD6_Pin, 1); // prueba
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <process_data+0x58>)
 80007bc:	f001 f828 	bl	8001810 <HAL_GPIO_WritePin>
	cont = 0;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <process_data+0x5c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
	Data = Data/v_measure;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <process_data+0x60>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da00      	bge.n	80007d0 <process_data+0x48>
 80007ce:	3303      	adds	r3, #3
 80007d0:	109b      	asrs	r3, r3, #2
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <process_data+0x60>)
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	20000120 	.word	0x20000120
 80007e8:	2000011c 	.word	0x2000011c

080007ec <alert>:
static void alert (fsm_t* this) { // led red
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	alarma = 1;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <alert+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1); // Simula el aviso
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <alert+0x5c>)
 8000802:	f001 f805 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // prueba
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <alert+0x5c>)
 800080e:	f000 ffff 	bl	8001810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0); // prueba
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <alert+0x5c>)
 800081a:	f000 fff9 	bl	8001810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0); // prueba
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <alert+0x5c>)
 8000826:	f000 fff3 	bl	8001810 <HAL_GPIO_WritePin>
	time_warning = HAL_GetTick()+t_warning;
 800082a:	f000 fd2f 	bl	800128c <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000834:	461a      	mov	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <alert+0x60>)
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000124 	.word	0x20000124
 8000848:	40020c00 	.word	0x40020c00
 800084c:	20000128 	.word	0x20000128

08000850 <sleep>:
static void sleep (fsm_t* this) { // led orange
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	alarma = 0;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <sleep+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1); // Simula el estado de sleep
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <sleep+0x5c>)
 8000866:	f000 ffd3 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0); // prueba
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <sleep+0x5c>)
 8000872:	f000 ffcd 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0); // Apaga el led de aviso
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <sleep+0x5c>)
 800087e:	f000 ffc7 	bl	8001810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0); // Apaga la alimentacion
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <sleep+0x5c>)
 800088a:	f000 ffc1 	bl	8001810 <HAL_GPIO_WritePin>
	time_sleep = HAL_GetTick()+t_sleep;
 800088e:	f000 fcfd 	bl	800128c <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000898:	3310      	adds	r3, #16
 800089a:	461a      	mov	r2, r3
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <sleep+0x60>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000124 	.word	0x20000124
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	20000130 	.word	0x20000130

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a4      	sub	sp, #144	; 0x90
 80008b8:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fc81 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f82d 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f971 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008c6:	f000 f8ad 	bl	8000a24 <MX_I2C1_Init>
  MX_I2S2_Init();
 80008ca:	f000 f8d9 	bl	8000a80 <MX_I2S2_Init>
  MX_I2S3_Init();
 80008ce:	f000 f905 	bl	8000adc <MX_I2S3_Init>
  MX_SPI1_Init();
 80008d2:	f000 f933 	bl	8000b3c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008d6:	f006 fd09 	bl	80072ec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  fsm_sensor_init(sensor, &fsm_sensor1,  TRUE, FALSE, 0, 20000, 5000, FALSE, 5, 2, 10);
 80008da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80008de:	230a      	movs	r3, #10
 80008e0:	9306      	str	r3, [sp, #24]
 80008e2:	2302      	movs	r3, #2
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	2305      	movs	r3, #5
 80008e8:	9304      	str	r3, [sp, #16]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9303      	str	r3, [sp, #12]
 80008ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2300      	movs	r3, #0
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2201      	movs	r2, #1
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <main+0x64>)
 8000904:	f7ff fe3b 	bl	800057e <fsm_sensor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000908:	f006 fd16 	bl	8007338 <MX_USB_HOST_Process>
    fsm_fire (fsm_sensor1.fsm);
 800090c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe06 	bl	8000520 <fsm_fire>
    MX_USB_HOST_Process();
 8000914:	e7f8      	b.n	8000908 <main+0x54>
 8000916:	bf00      	nop
 8000918:	20000000 	.word	0x20000000

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09a      	sub	sp, #104	; 0x68
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f007 f820 	bl	8007970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <SystemClock_Config+0x100>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <SystemClock_Config+0x100>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <SystemClock_Config+0x100>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <SystemClock_Config+0x104>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a2a      	ldr	r2, [pc, #168]	; (8000a20 <SystemClock_Config+0x104>)
 8000978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <SystemClock_Config+0x104>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800098e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009aa:	2308      	movs	r3, #8
 80009ac:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 f984 	bl	8003cc0 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009be:	f000 f9cd 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	2103      	movs	r1, #3
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fbde 	bl	80041a0 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ea:	f000 f9b7 	bl	8000d5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80009f2:	23c8      	movs	r3, #200	; 0xc8
 80009f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80009f6:	2305      	movs	r3, #5
 80009f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fdaa 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a0e:	f000 f9a5 	bl	8000d5c <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3768      	adds	r7, #104	; 0x68
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f002 fb55 	bl	8003110 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 f976 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000148 	.word	0x20000148
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2S2_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a90:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000aa6:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <MX_I2S2_Init+0x58>)
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2S2_Init+0x50>)
 8000abe:	f002 fc5f 	bl	8003380 <HAL_I2S_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 f948 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001f4 	.word	0x200001f4
 8000ad4:	40003800 	.word	0x40003800
 8000ad8:	00017700 	.word	0x00017700

08000adc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <MX_I2S3_Init+0x58>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b00:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <MX_I2S3_Init+0x5c>)
 8000b06:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_I2S3_Init+0x54>)
 8000b1c:	f002 fc30 	bl	8003380 <HAL_I2S_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b26:	f000 f919 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000023c 	.word	0x2000023c
 8000b34:	40003c00 	.word	0x40003c00
 8000b38:	00017700 	.word	0x00017700

08000b3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <MX_SPI1_Init+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b88:	220a      	movs	r2, #10
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_SPI1_Init+0x64>)
 8000b8e:	f003 fe33 	bl	80047f8 <HAL_SPI_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b98:	f000 f8e0 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000019c 	.word	0x2000019c
 8000ba4:	40013000 	.word	0x40013000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a5f      	ldr	r2, [pc, #380]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a58      	ldr	r2, [pc, #352]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b48      	ldr	r3, [pc, #288]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <MX_GPIO_Init+0x19c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4837      	ldr	r0, [pc, #220]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c6c:	f000 fdd0 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2101      	movs	r1, #1
 8000c74:	4835      	ldr	r0, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x1a4>)
 8000c76:	f000 fdcb 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c80:	4833      	ldr	r0, [pc, #204]	; (8000d50 <MX_GPIO_Init+0x1a8>)
 8000c82:	f000 fdc5 	bl	8001810 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c86:	2304      	movs	r3, #4
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	482b      	ldr	r0, [pc, #172]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c9a:	f000 fc37 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000cb6:	f000 fc29 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000cba:	2332      	movs	r3, #50	; 0x32
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000cce:	f000 fc1d 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_GPIO_Init+0x1a4>)
 8000cea:	f000 fc0f 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000d02:	f000 fc03 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d06:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d0a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_GPIO_Init+0x1a8>)
 8000d20:	f000 fbf4 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d24:	2320      	movs	r3, #32
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_GPIO_Init+0x1a8>)
 8000d38:	f000 fbe8 	bl	800150c <HAL_GPIO_Init>

}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	; 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	10120000 	.word	0x10120000
 8000d58:	40020000 	.word	0x40020000

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 fb6c 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_I2C_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <HAL_I2C_MspInit+0x8c>)
 8000e18:	f000 fb78 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_I2C_MspInit+0x88>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40005400 	.word	0x40005400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020400 	.word	0x40020400

08000e4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a59      	ldr	r2, [pc, #356]	; (8000fd0 <HAL_I2S_MspInit+0x184>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d15b      	bne.n	8000f26 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	483e      	ldr	r0, [pc, #248]	; (8000fd8 <HAL_I2S_MspInit+0x18c>)
 8000ede:	f000 fb15 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4836      	ldr	r0, [pc, #216]	; (8000fd8 <HAL_I2S_MspInit+0x18c>)
 8000efe:	f000 fb05 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f14:	2305      	movs	r3, #5
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482f      	ldr	r0, [pc, #188]	; (8000fdc <HAL_I2S_MspInit+0x190>)
 8000f20:	f000 faf4 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f24:	e04f      	b.n	8000fc6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a2d      	ldr	r2, [pc, #180]	; (8000fe0 <HAL_I2S_MspInit+0x194>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d14a      	bne.n	8000fc6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_I2S_MspInit+0x188>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f84:	2310      	movs	r3, #16
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f94:	2306      	movs	r3, #6
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <HAL_I2S_MspInit+0x198>)
 8000fa0:	f000 fab4 	bl	800150c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fa4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_I2S_MspInit+0x18c>)
 8000fc2:	f000 faa3 	bl	800150c <HAL_GPIO_Init>
}
 8000fc6:	bf00      	nop
 8000fc8:	3738      	adds	r7, #56	; 0x38
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40003800 	.word	0x40003800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40003c00 	.word	0x40003c00
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_SPI_MspInit+0x88>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001042:	23e0      	movs	r3, #224	; 0xe0
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001052:	2305      	movs	r3, #5
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 800105e:	f000 fa55 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40013000 	.word	0x40013000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f8ca 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <OTG_FS_IRQHandler+0x10>)
 80010da:	f000 fe37 	bl	8001d4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000654 	.word	0x20000654

080010e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x50>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x16>
		heap_end = &end;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <_sbrk+0x50>)
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <_sbrk+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <_sbrk+0x50>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <_sbrk+0x50>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	466a      	mov	r2, sp
 800110e:	4293      	cmp	r3, r2
 8001110:	d907      	bls.n	8001122 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001112:	f006 fbf3 	bl	80078fc <__errno>
 8001116:	4602      	mov	r2, r0
 8001118:	230c      	movs	r3, #12
 800111a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	e006      	b.n	8001130 <_sbrk+0x48>
	}

	heap_end += incr;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <_sbrk+0x50>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <_sbrk+0x50>)
 800112c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000134 	.word	0x20000134
 800113c:	20000920 	.word	0x20000920

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SystemInit+0x28>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <SystemInit+0x28>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SystemInit+0x28>)
 8001156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115a:	609a      	str	r2, [r3, #8]
#endif
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001170:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001172:	e003      	b.n	800117c <LoopCopyDataInit>

08001174 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001176:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001178:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800117a:	3104      	adds	r1, #4

0800117c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001180:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001184:	d3f6      	bcc.n	8001174 <CopyDataInit>
  ldr  r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001188:	e002      	b.n	8001190 <LoopFillZerobss>

0800118a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800118a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800118c:	f842 3b04 	str.w	r3, [r2], #4

08001190 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001192:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001194:	d3f9      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd3 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f006 fbb5 	bl	8007908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fb89 	bl	80008b4 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011a8:	08007c50 	.word	0x08007c50
  ldr  r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011b0:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 80011b4:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 80011b8:	2000091c 	.word	0x2000091c

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f94d 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdba 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f965 	bl	80014f2 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f92d 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000070 	.word	0x20000070
 800125c:	20000078 	.word	0x20000078
 8001260:	20000074 	.word	0x20000074

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000078 	.word	0x20000078
 8001288:	20000284 	.word	0x20000284

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000284 	.word	0x20000284

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_Delay+0x40>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000078 	.word	0x20000078

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e159      	b.n	80017dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8148 	bne.w	80017d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00b      	beq.n	8001566 <HAL_GPIO_Init+0x5a>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155a:	2b11      	cmp	r3, #17
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b12      	cmp	r3, #18
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0xfc>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d123      	bne.n	8001650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	69b9      	ldr	r1, [r7, #24]
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a2 	beq.w	80017d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_GPIO_Init+0x2e4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_GPIO_Init+0x2e8>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2ec>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x202>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x1fe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x1fa>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a45      	ldr	r2, [pc, #276]	; (8001804 <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x1f6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x1f2>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x204>
 80016fe:	2307      	movs	r3, #7
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_GPIO_Init+0x2e8>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_GPIO_Init+0x300>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_GPIO_Init+0x300>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_GPIO_Init+0x300>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_GPIO_Init+0x300>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_GPIO_Init+0x300>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_GPIO_Init+0x300>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_GPIO_Init+0x300>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_GPIO_Init+0x300>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f aea2 	bls.w	8001528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001844:	b08f      	sub	sp, #60	; 0x3c
 8001846:	af0a      	add	r7, sp, #40	; 0x28
 8001848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e054      	b.n	80018fe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f005 fd9a 	bl	80073a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f886 	bl	80049a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	687e      	ldr	r6, [r7, #4]
 80018a0:	466d      	mov	r5, sp
 80018a2:	f106 0410 	add.w	r4, r6, #16
 80018a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b6:	1d33      	adds	r3, r6, #4
 80018b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ba:	6838      	ldr	r0, [r7, #0]
 80018bc:	f003 f800 	bl	80048c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f87d 	bl	80049c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	687e      	ldr	r6, [r7, #4]
 80018d4:	466d      	mov	r5, sp
 80018d6:	f106 0410 	add.w	r4, r6, #16
 80018da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ea:	1d33      	adds	r3, r6, #4
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	6838      	ldr	r0, [r7, #0]
 80018f0:	f003 f990 	bl	8004c14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001906 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b089      	sub	sp, #36	; 0x24
 800190a:	af04      	add	r7, sp, #16
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	4608      	mov	r0, r1
 8001910:	4611      	mov	r1, r2
 8001912:	461a      	mov	r2, r3
 8001914:	4603      	mov	r3, r0
 8001916:	70fb      	strb	r3, [r7, #3]
 8001918:	460b      	mov	r3, r1
 800191a:	70bb      	strb	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_HCD_HC_Init+0x28>
 800192a:	2302      	movs	r3, #2
 800192c:	e07f      	b.n	8001a2e <HAL_HCD_HC_Init+0x128>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	333d      	adds	r3, #61	; 0x3d
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3338      	adds	r3, #56	; 0x38
 800195a:	787a      	ldrb	r2, [r7, #1]
 800195c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3340      	adds	r3, #64	; 0x40
 800196e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001970:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	3339      	adds	r3, #57	; 0x39
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	333f      	adds	r3, #63	; 0x3f
 8001996:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800199a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	78bb      	ldrb	r3, [r7, #2]
 80019a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a4:	b2d8      	uxtb	r0, r3
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	333a      	adds	r3, #58	; 0x3a
 80019b4:	4602      	mov	r2, r0
 80019b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da0a      	bge.n	80019d6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	333b      	adds	r3, #59	; 0x3b
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e009      	b.n	80019ea <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	333b      	adds	r3, #59	; 0x3b
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	333c      	adds	r3, #60	; 0x3c
 80019fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	787c      	ldrb	r4, [r7, #1]
 8001a06:	78ba      	ldrb	r2, [r7, #2]
 8001a08:	78f9      	ldrb	r1, [r7, #3]
 8001a0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f003 fa7c 	bl	8004f18 <USB_HC_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}

08001a36 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_HCD_HC_Halt+0x1e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e00f      	b.n	8001a74 <HAL_HCD_HC_Halt+0x3e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fcb6 	bl	80053d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	70fb      	strb	r3, [r7, #3]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70bb      	strb	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	333b      	adds	r3, #59	; 0x3b
 8001aa6:	78ba      	ldrb	r2, [r7, #2]
 8001aa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	333f      	adds	r3, #63	; 0x3f
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e009      	b.n	8001aee <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3342      	adds	r3, #66	; 0x42
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	f200 80d6 	bhi.w	8001ca2 <HAL_HCD_HC_SubmitRequest+0x226>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_HCD_HC_SubmitRequest+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b0d 	.word	0x08001b0d
 8001b00:	08001c8d 	.word	0x08001c8d
 8001b04:	08001b79 	.word	0x08001b79
 8001b08:	08001c03 	.word	0x08001c03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b0c:	7c3b      	ldrb	r3, [r7, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	f040 80c9 	bne.w	8001ca6 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001b14:	78bb      	ldrb	r3, [r7, #2]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 80c5 	bne.w	8001ca6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001b1c:	8b3b      	ldrh	r3, [r7, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3351      	adds	r3, #81	; 0x51
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3351      	adds	r3, #81	; 0x51
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3342      	adds	r3, #66	; 0x42
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b60:	e0a1      	b.n	8001ca6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e096      	b.n	8001ca6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d120      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3351      	adds	r3, #81	; 0x51
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3342      	adds	r3, #66	; 0x42
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ba8:	e07e      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
      break;
 8001bbe:	e073      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3350      	adds	r3, #80	; 0x50
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3342      	adds	r3, #66	; 0x42
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
      break;
 8001bea:	e05d      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]
      break;
 8001c00:	e052      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c02:	78bb      	ldrb	r3, [r7, #2]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d120      	bne.n	8001c4a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3351      	adds	r3, #81	; 0x51
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3342      	adds	r3, #66	; 0x42
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c32:	e039      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e02e      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	3350      	adds	r3, #80	; 0x50
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3342      	adds	r3, #66	; 0x42
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
      break;
 8001c74:	e018      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      break;
 8001c8a:	e00d      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3342      	adds	r3, #66	; 0x42
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ca0:	e002      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001ca6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3344      	adds	r3, #68	; 0x44
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	8b39      	ldrh	r1, [r7, #24]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4403      	add	r3, r0
 8001ccc:	3348      	adds	r3, #72	; 0x48
 8001cce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	335c      	adds	r3, #92	; 0x5c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	334c      	adds	r3, #76	; 0x4c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	3339      	adds	r3, #57	; 0x39
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	335d      	adds	r3, #93	; 0x5d
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	18d1      	adds	r1, r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f003 f9f6 	bl	800512c <USB_HC_StartXfer>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop

08001d4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 ff13 	bl	8004b8e <USB_GetMode>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 80f1 	bne.w	8001f52 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fef7 	bl	8004b68 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80e7 	beq.w	8001f50 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 feee 	bl	8004b68 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d96:	d104      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fede 	bl	8004b68 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db6:	d104      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fece 	bl	8004b68 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dd6:	d104      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 febe 	bl	8004b68 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 feb0 	bl	8004b68 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e12:	d117      	bne.n	8001e44 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001e22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e26:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f005 fb3b 	bl	80074a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 ffa9 	bl	8004d8c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fe8d 	bl	8004b68 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d102      	bne.n	8001e60 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 f8c8 	bl	8002ff0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fe7f 	bl	8004b68 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d106      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f005 faf9 	bl	800746c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2208      	movs	r2, #8
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fe6e 	bl	8004b68 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e96:	d138      	bne.n	8001f0a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fa89 	bl	80053b4 <USB_HC_ReadInterrupt>
 8001ea2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e025      	b.n	8001ef6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d018      	beq.n	8001ef0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8cf 	bl	8002080 <HCD_HC_IN_IRQHandler>
 8001ee2:	e005      	b.n	8001ef0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fc5f 	bl	80027ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3d4      	bcc.n	8001eaa <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fe2a 	bl	8004b68 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b10      	cmp	r3, #16
 8001f1c:	d101      	bne.n	8001f22 <HAL_HCD_IRQHandler+0x1d6>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_HCD_IRQHandler+0x1d8>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d014      	beq.n	8001f52 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 ffad 	bl	8002e98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0210 	orr.w	r2, r2, #16
 8001f4c:	619a      	str	r2, [r3, #24]
 8001f4e:	e000      	b.n	8001f52 <HAL_HCD_IRQHandler+0x206>
      return;
 8001f50:	bf00      	nop
    }
  }
}
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_HCD_Start+0x16>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e013      	b.n	8001f96 <HAL_HCD_Start+0x3e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fd01 	bl	8004982 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 ff64 	bl	8004e54 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_HCD_Stop+0x16>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e00d      	b.n	8001fd0 <HAL_HCD_Stop+0x32>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fb43 	bl	800564c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 ff0b 	bl	8004e00 <USB_ResetPort>
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	335c      	adds	r3, #92	; 0x5c
 8002010:	781b      	ldrb	r3, [r3, #0]
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	334c      	adds	r3, #76	; 0x4c
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 ff4d 	bl	8004ef4 <USB_GetCurrentFrame>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 ff28 	bl	8004ec6 <USB_GetHostSpeed>
 8002076:	4603      	mov	r3, r0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d119      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	2304      	movs	r3, #4
 80020c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	0151      	lsls	r1, r2, #5
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	440a      	add	r2, r1
 80020d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	60d3      	str	r3, [r2, #12]
 80020e2:	e095      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d109      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	2320      	movs	r3, #32
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	e080      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b08      	cmp	r3, #8
 8002122:	d134      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	0151      	lsls	r1, r2, #5
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	440a      	add	r2, r1
 800213a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335d      	adds	r3, #93	; 0x5d
 8002154:	2205      	movs	r2, #5
 8002156:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2310      	movs	r3, #16
 8002168:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	2308      	movs	r3, #8
 800217a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f003 f925 	bl	80053d6 <USB_HC_Halt>
 800218c:	e040      	b.n	8002210 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d134      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	0151      	lsls	r1, r2, #5
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	440a      	add	r2, r1
 80021bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f900 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2310      	movs	r3, #16
 80021e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	335d      	adds	r3, #93	; 0x5d
 80021f8:	2208      	movs	r2, #8
 80021fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	461a      	mov	r2, r3
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002226:	d122      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	0151      	lsls	r1, r2, #5
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	440a      	add	r2, r1
 800223e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f003 f8bf 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800226c:	e29b      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 80c1 	bne.w	8002408 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01b      	beq.n	80022c6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3348      	adds	r3, #72	; 0x48
 800229e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80022b2:	1ad1      	subs	r1, r2, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4403      	add	r3, r0
 80022c2:	334c      	adds	r3, #76	; 0x4c
 80022c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	335d      	adds	r3, #93	; 0x5d
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3358      	adds	r3, #88	; 0x58
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	333f      	adds	r3, #63	; 0x3f
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	333f      	adds	r3, #63	; 0x3f
 8002326:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002328:	2b02      	cmp	r3, #2
 800232a:	d121      	bne.n	8002370 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	0151      	lsls	r1, r2, #5
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	440a      	add	r2, r1
 8002342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f83d 	bl	80053d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	2310      	movs	r3, #16
 800236c:	6093      	str	r3, [r2, #8]
 800236e:	e034      	b.n	80023da <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d129      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	0151      	lsls	r1, r2, #5
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	440a      	add	r2, r1
 800239c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	335c      	adds	r3, #92	; 0x5c
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	b2d8      	uxtb	r0, r3
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	335c      	adds	r3, #92	; 0x5c
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4601      	mov	r1, r0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f005 f873 	bl	80074c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	3350      	adds	r3, #80	; 0x50
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2d8      	uxtb	r0, r3
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3350      	adds	r3, #80	; 0x50
 8002402:	4602      	mov	r2, r0
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	e1ce      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	f040 80f1 	bne.w	8002602 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f023 0302 	bic.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	335d      	adds	r3, #93	; 0x5d
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10a      	bne.n	800246c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335c      	adds	r3, #92	; 0x5c
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e0b0      	b.n	80025ce <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	335d      	adds	r3, #93	; 0x5d
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10a      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	335c      	adds	r3, #92	; 0x5c
 8002492:	2205      	movs	r2, #5
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e09a      	b.n	80025ce <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	335d      	adds	r3, #93	; 0x5d
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d00a      	beq.n	80024c4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	335d      	adds	r3, #93	; 0x5d
 80024be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d156      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	3358      	adds	r3, #88	; 0x58
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4403      	add	r3, r0
 80024e6:	3358      	adds	r3, #88	; 0x58
 80024e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3358      	adds	r3, #88	; 0x58
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d914      	bls.n	800252a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3358      	adds	r3, #88	; 0x58
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	335c      	adds	r3, #92	; 0x5c
 8002524:	2204      	movs	r2, #4
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e009      	b.n	800253e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	2202      	movs	r2, #2
 800253c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002554:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800255c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02d      	b.n	80025ce <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	335d      	adds	r3, #93	; 0x5d
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d122      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	335c      	adds	r3, #92	; 0x5c
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	2302      	movs	r3, #2
 80025de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	b2d8      	uxtb	r0, r3
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4601      	mov	r1, r0
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f004 ff60 	bl	80074c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002600:	e0d1      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b80      	cmp	r3, #128	; 0x80
 8002616:	d13e      	bne.n	8002696 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	0151      	lsls	r1, r2, #5
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	440a      	add	r2, r1
 800262e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3358      	adds	r3, #88	; 0x58
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4403      	add	r3, r0
 800265a:	3358      	adds	r3, #88	; 0x58
 800265c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	335d      	adds	r3, #93	; 0x5d
 800266e:	2206      	movs	r2, #6
 8002670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 feaa 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	6093      	str	r3, [r2, #8]
}
 8002694:	e087      	b.n	80027a6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d17c      	bne.n	80027a6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	333f      	adds	r3, #63	; 0x3f
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d122      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	3358      	adds	r3, #88	; 0x58
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	0151      	lsls	r1, r2, #5
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	440a      	add	r2, r1
 80026ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fe68 	bl	80053d6 <USB_HC_Halt>
 8002706:	e045      	b.n	8002794 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	333f      	adds	r3, #63	; 0x3f
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	333f      	adds	r3, #63	; 0x3f
 800272e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002730:	2b02      	cmp	r3, #2
 8002732:	d12f      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	3358      	adds	r3, #88	; 0x58
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d121      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	335d      	adds	r3, #93	; 0x5d
 8002760:	2203      	movs	r2, #3
 8002762:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fe21 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2310      	movs	r3, #16
 80027a4:	6093      	str	r3, [r2, #8]
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d119      	bne.n	8002812 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	2304      	movs	r3, #4
 80027ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002810:	e33e      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b20      	cmp	r3, #32
 8002826:	d141      	bne.n	80028ac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	461a      	mov	r2, r3
 8002836:	2320      	movs	r3, #32
 8002838:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	333d      	adds	r3, #61	; 0x3d
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 831f 	bne.w	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	333d      	adds	r3, #61	; 0x3d
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fd96 	bl	80053d6 <USB_HC_Halt>
}
 80028aa:	e2f1      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d13f      	bne.n	8002942 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	335d      	adds	r3, #93	; 0x5d
 80028d2:	2204      	movs	r2, #4
 80028d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	333d      	adds	r3, #61	; 0x3d
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	3358      	adds	r3, #88	; 0x58
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	440a      	add	r2, r1
 8002914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fd54 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	2340      	movs	r3, #64	; 0x40
 800293e:	6093      	str	r3, [r2, #8]
}
 8002940:	e2a6      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d122      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	0151      	lsls	r1, r2, #5
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	440a      	add	r2, r1
 8002970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fd26 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299c:	6093      	str	r3, [r2, #8]
}
 800299e:	e277      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d135      	bne.n	8002a22 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3358      	adds	r3, #88	; 0x58
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	0151      	lsls	r1, r2, #5
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	440a      	add	r2, r1
 80029e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fcee 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	2301      	movs	r3, #1
 8002a0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	335d      	adds	r3, #93	; 0x5d
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
}
 8002a20:	e236      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d12b      	bne.n	8002a90 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	461a      	mov	r2, r3
 8002a46:	2308      	movs	r3, #8
 8002a48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	0151      	lsls	r1, r2, #5
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	440a      	add	r2, r1
 8002a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fcae 	bl	80053d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	335d      	adds	r3, #93	; 0x5d
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	701a      	strb	r2, [r3, #0]
}
 8002a8e:	e1ff      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d155      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3358      	adds	r3, #88	; 0x58
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	335d      	adds	r3, #93	; 0x5d
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	333d      	adds	r3, #61	; 0x3d
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	333d      	adds	r3, #61	; 0x3d
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	0151      	lsls	r1, r2, #5
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	440a      	add	r2, r1
 8002b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fc4c 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	6093      	str	r3, [r2, #8]
}
 8002b50:	e19e      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d12b      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 fc1f 	bl	80053d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	335d      	adds	r3, #93	; 0x5d
 8002ba8:	2206      	movs	r2, #6
 8002baa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	6093      	str	r3, [r2, #8]
}
 8002bbe:	e167      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d135      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	0151      	lsls	r1, r2, #5
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	440a      	add	r2, r1
 8002bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fbe7 	bl	80053d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2310      	movs	r3, #16
 8002c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	335d      	adds	r3, #93	; 0x5d
 8002c3e:	2208      	movs	r2, #8
 8002c40:	701a      	strb	r2, [r3, #0]
}
 8002c42:	e125      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 811a 	bne.w	8002e90 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c76:	f023 0302 	bic.w	r3, r3, #2
 8002c7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335d      	adds	r3, #93	; 0x5d
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d137      	bne.n	8002d02 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	335c      	adds	r3, #92	; 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	333f      	adds	r3, #63	; 0x3f
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d00b      	beq.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	333f      	adds	r3, #63	; 0x3f
 8002ccc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	f040 80c5 	bne.w	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3351      	adds	r3, #81	; 0x51
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3351      	adds	r3, #81	; 0x51
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e0ad      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335d      	adds	r3, #93	; 0x5d
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d10a      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	335c      	adds	r3, #92	; 0x5c
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e097      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	335d      	adds	r3, #93	; 0x5d
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d10a      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e081      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	335d      	adds	r3, #93	; 0x5d
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10a      	bne.n	8002d86 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	2205      	movs	r2, #5
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e06b      	b.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	335d      	adds	r3, #93	; 0x5d
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d00a      	beq.n	8002db2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	335d      	adds	r3, #93	; 0x5d
 8002dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d155      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3358      	adds	r3, #88	; 0x58
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4403      	add	r3, r0
 8002dd4:	3358      	adds	r3, #88	; 0x58
 8002dd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3358      	adds	r3, #88	; 0x58
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d914      	bls.n	8002e18 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3358      	adds	r3, #88	; 0x58
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	335c      	adds	r3, #92	; 0x5c
 8002e12:	2204      	movs	r2, #4
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e009      	b.n	8002e2c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	335c      	adds	r3, #92	; 0x5c
 8002e28:	2202      	movs	r2, #2
 8002e2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	b2d8      	uxtb	r0, r3
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	335c      	adds	r3, #92	; 0x5c
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4601      	mov	r1, r0
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 fb18 	bl	80074c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	0c5b      	lsrs	r3, r3, #17
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ecc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d003      	beq.n	8002edc <HCD_RXQLVL_IRQHandler+0x44>
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	f000 8082 	beq.w	8002fde <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eda:	e083      	b.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07f      	beq.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	3344      	adds	r3, #68	; 0x44
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d074      	beq.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	3344      	adds	r3, #68	; 0x44
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	b292      	uxth	r2, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f001 fdff 	bl	8004b16 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	3344      	adds	r3, #68	; 0x44
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	18d1      	adds	r1, r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4403      	add	r3, r0
 8002f3c:	3344      	adds	r3, #68	; 0x44
 8002f3e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	334c      	adds	r3, #76	; 0x4c
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	18d1      	adds	r1, r2, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4403      	add	r3, r0
 8002f64:	334c      	adds	r3, #76	; 0x4c
 8002f66:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HCD_RXQLVL_IRQHandler+0x154>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d031      	beq.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	f083 0301 	eor.w	r3, r3, #1
 8002fc6:	b2d8      	uxtb	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3350      	adds	r3, #80	; 0x50
 8002fd8:	4602      	mov	r2, r0
 8002fda:	701a      	strb	r2, [r3, #0]
      break;
 8002fdc:	e001      	b.n	8002fe2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002fe2:	bf00      	nop
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	1ff80000 	.word	0x1ff80000

08002ff0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800301c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d113      	bne.n	8003050 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10a      	bne.n	8003048 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003040:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f004 fa20 	bl	8007488 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d147      	bne.n	80030ea <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d129      	bne.n	80030c0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d113      	bne.n	800309c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800307a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800307e:	d106      	bne.n	800308e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fe80 	bl	8004d8c <USB_InitFSLSPClkSel>
 800308c:	e011      	b.n	80030b2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f001 fe79 	bl	8004d8c <USB_InitFSLSPClkSel>
 800309a:	e00a      	b.n	80030b2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030aa:	461a      	mov	r2, r3
 80030ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030b0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f004 fa12 	bl	80074dc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f004 f9e5 	bl	8007488 <HAL_HCD_Connect_Callback>
 80030be:	e014      	b.n	80030ea <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f004 fa19 	bl	80074f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80030d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030d8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d103      	bne.n	80030fc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e11f      	b.n	8003362 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fe40 	bl	8000dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003174:	f001 f9de 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a7b      	ldr	r2, [pc, #492]	; (800336c <HAL_I2C_Init+0x25c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d807      	bhi.n	8003194 <HAL_I2C_Init+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a7a      	ldr	r2, [pc, #488]	; (8003370 <HAL_I2C_Init+0x260>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e006      	b.n	80031a2 <HAL_I2C_Init+0x92>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_I2C_Init+0x264>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0db      	b.n	8003362 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a72      	ldr	r2, [pc, #456]	; (8003378 <HAL_I2C_Init+0x268>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_I2C_Init+0x25c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <HAL_I2C_Init+0xd4>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e009      	b.n	80031f8 <HAL_I2C_Init+0xe8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a63      	ldr	r2, [pc, #396]	; (800337c <HAL_I2C_Init+0x26c>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4956      	ldr	r1, [pc, #344]	; (800336c <HAL_I2C_Init+0x25c>)
 8003214:	428b      	cmp	r3, r1
 8003216:	d80d      	bhi.n	8003234 <HAL_I2C_Init+0x124>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fbb1 f3f3 	udiv	r3, r1, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b04      	cmp	r3, #4
 800322e:	bf38      	it	cc
 8003230:	2304      	movcc	r3, #4
 8003232:	e04f      	b.n	80032d4 <HAL_I2C_Init+0x1c4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <HAL_I2C_Init+0x150>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e012      	b.n	8003286 <HAL_I2C_Init+0x176>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Init+0x17e>
 800328a:	2301      	movs	r3, #1
 800328c:	e022      	b.n	80032d4 <HAL_I2C_Init+0x1c4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10e      	bne.n	80032b4 <HAL_I2C_Init+0x1a4>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e58      	subs	r0, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	440b      	add	r3, r1
 80032a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	e00f      	b.n	80032d4 <HAL_I2C_Init+0x1c4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1e58      	subs	r0, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	0099      	lsls	r1, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	6809      	ldr	r1, [r1, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6911      	ldr	r1, [r2, #16]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68d2      	ldr	r2, [r2, #12]
 800330e:	4311      	orrs	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	000186a0 	.word	0x000186a0
 8003370:	001e847f 	.word	0x001e847f
 8003374:	003d08ff 	.word	0x003d08ff
 8003378:	431bde83 	.word	0x431bde83
 800337c:	10624dd3 	.word	0x10624dd3

08003380 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e128      	b.n	80035e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a90      	ldr	r2, [pc, #576]	; (80035ec <HAL_I2S_Init+0x26c>)
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fd fd4d 	bl	8000e4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d060      	beq.n	80034a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033e6:	2310      	movs	r3, #16
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e001      	b.n	80033f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d802      	bhi.n	80033fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033fe:	2001      	movs	r0, #1
 8003400:	f001 f99c 	bl	800473c <HAL_RCCEx_GetPeriphCLKFreq>
 8003404:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340e:	d125      	bne.n	800345c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	3305      	adds	r3, #5
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e01f      	b.n	800347a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	3305      	adds	r3, #5
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e00e      	b.n	800347a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fbb2 f2f3 	udiv	r2, r2, r3
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	3305      	adds	r3, #5
 8003478:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_I2S_Init+0x270>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d902      	bls.n	80034b4 <HAL_I2S_Init+0x134>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2bff      	cmp	r3, #255	; 0xff
 80034b2:	d907      	bls.n	80034c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f043 0210 	orr.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e08f      	b.n	80035e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	ea42 0103 	orr.w	r1, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034e2:	f023 030f 	bic.w	r3, r3, #15
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6851      	ldr	r1, [r2, #4]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68d2      	ldr	r2, [r2, #12]
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6992      	ldr	r2, [r2, #24]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003506:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d161      	bne.n	80035d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a38      	ldr	r2, [pc, #224]	; (80035f4 <HAL_I2S_Init+0x274>)
 8003514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a37      	ldr	r2, [pc, #220]	; (80035f8 <HAL_I2S_Init+0x278>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_I2S_Init+0x1a4>
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_I2S_Init+0x27c>)
 8003522:	e001      	b.n	8003528 <HAL_I2S_Init+0x1a8>
 8003524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4932      	ldr	r1, [pc, #200]	; (80035f8 <HAL_I2S_Init+0x278>)
 8003530:	428a      	cmp	r2, r1
 8003532:	d101      	bne.n	8003538 <HAL_I2S_Init+0x1b8>
 8003534:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_I2S_Init+0x27c>)
 8003536:	e001      	b.n	800353c <HAL_I2S_Init+0x1bc>
 8003538:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800353c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003540:	f023 030f 	bic.w	r3, r3, #15
 8003544:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <HAL_I2S_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_I2S_Init+0x1d4>
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_I2S_Init+0x27c>)
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x1d8>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	2202      	movs	r2, #2
 800355a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <HAL_I2S_Init+0x278>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_I2S_Init+0x1ea>
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_I2S_Init+0x27c>)
 8003568:	e001      	b.n	800356e <HAL_I2S_Init+0x1ee>
 800356a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d003      	beq.n	8003584 <HAL_I2S_Init+0x204>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e001      	b.n	8003590 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	b299      	uxth	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80035a6:	4303      	orrs	r3, r0
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	430b      	orrs	r3, r1
 80035ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <HAL_I2S_Init+0x278>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_I2S_Init+0x24c>
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_I2S_Init+0x27c>)
 80035ca:	e001      	b.n	80035d0 <HAL_I2S_Init+0x250>
 80035cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d0:	897a      	ldrh	r2, [r7, #10]
 80035d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	080036f7 	.word	0x080036f7
 80035f0:	cccccccd 	.word	0xcccccccd
 80035f4:	0800380d 	.word	0x0800380d
 80035f8:	40003800 	.word	0x40003800
 80035fc:	40003400 	.word	0x40003400

08003600 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	881a      	ldrh	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c9a      	adds	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003680:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffb8 	bl	8003600 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	b292      	uxth	r2, r2
 80036ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	1c9a      	adds	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff93 	bl	8003614 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b04      	cmp	r3, #4
 8003710:	d13a      	bne.n	8003788 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d109      	bne.n	8003730 <I2S_IRQHandler+0x3a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d102      	bne.n	8003730 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ffb4 	bl	8003698 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d126      	bne.n	8003788 <I2S_IRQHandler+0x92>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b20      	cmp	r3, #32
 8003746:	d11f      	bne.n	8003788 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003756:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff50 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d136      	bne.n	8003802 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d109      	bne.n	80037b2 <I2S_IRQHandler+0xbc>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d102      	bne.n	80037b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff45 	bl	800363c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d122      	bne.n	8003802 <I2S_IRQHandler+0x10c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d11b      	bne.n	8003802 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff13 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4aa2      	ldr	r2, [pc, #648]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003826:	4ba2      	ldr	r3, [pc, #648]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003828:	e001      	b.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800382a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a9b      	ldr	r2, [pc, #620]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003846:	e001      	b.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003848:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003858:	d004      	beq.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8099 	bne.w	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d107      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f925 	bl	8003ac8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9c8 	bl	8003c28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d13a      	bne.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d035      	beq.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a7e      	ldr	r2, [pc, #504]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038b6:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038b8:	e001      	b.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4979      	ldr	r1, [pc, #484]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038c6:	428b      	cmp	r3, r1
 80038c8:	d101      	bne.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038ca:	4b79      	ldr	r3, [pc, #484]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038cc:	e001      	b.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fe88 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	f040 80be 	bne.w	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80b8 	beq.w	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800393e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a59      	ldr	r2, [pc, #356]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800394a:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4954      	ldr	r1, [pc, #336]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fe4a 	bl	8003628 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003994:	e084      	b.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d107      	bne.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8be 	bl	8003b2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8fd 	bl	8003bc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d12f      	bne.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02a      	beq.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2e      	ldr	r2, [pc, #184]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039f8:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039fa:	e001      	b.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4929      	ldr	r1, [pc, #164]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a0e:	e001      	b.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0202 	orr.w	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fdfa 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d131      	bne.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02c      	beq.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a54:	e001      	b.n	8003a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4912      	ldr	r1, [pc, #72]	; (8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a62:	428b      	cmp	r3, r1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a68:	e001      	b.n	8003a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fdc5 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9e:	e000      	b.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa0:	bf00      	nop
}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40003800 	.word	0x40003800
 8003ab0:	40003400 	.word	0x40003400

08003ab4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	1c99      	adds	r1, r3, #2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6251      	str	r1, [r2, #36]	; 0x24
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ffc9 	bl	8003ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c99      	adds	r1, r3, #2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b3e:	8819      	ldrh	r1, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <I2SEx_TxISR_I2SExt+0x90>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <I2SEx_TxISR_I2SExt+0x22>
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b4c:	e001      	b.n	8003b52 <I2SEx_TxISR_I2SExt+0x26>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b52:	460a      	mov	r2, r1
 8003b54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d121      	bne.n	8003bb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <I2SEx_TxISR_I2SExt+0x90>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <I2SEx_TxISR_I2SExt+0x50>
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b7a:	e001      	b.n	8003b80 <I2SEx_TxISR_I2SExt+0x54>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <I2SEx_TxISR_I2SExt+0x90>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d101      	bne.n	8003b90 <I2SEx_TxISR_I2SExt+0x64>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b8e:	e001      	b.n	8003b94 <I2SEx_TxISR_I2SExt+0x68>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff81 	bl	8003ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40003800 	.word	0x40003800
 8003bc0:	40003400 	.word	0x40003400

08003bc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68d8      	ldr	r0, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	1c99      	adds	r1, r3, #2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bdc:	b282      	uxth	r2, r0
 8003bde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff4a 	bl	8003ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <I2SEx_RxISR_I2SExt+0x16>
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <I2SEx_RxISR_I2SExt+0x94>)
 8003c3c:	e001      	b.n	8003c42 <I2SEx_RxISR_I2SExt+0x1a>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	68d8      	ldr	r0, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	1c99      	adds	r1, r3, #2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c4e:	b282      	uxth	r2, r0
 8003c50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d121      	bne.n	8003cae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <I2SEx_RxISR_I2SExt+0x50>
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <I2SEx_RxISR_I2SExt+0x94>)
 8003c76:	e001      	b.n	8003c7c <I2SEx_RxISR_I2SExt+0x54>
 8003c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c84:	428b      	cmp	r3, r1
 8003c86:	d101      	bne.n	8003c8c <I2SEx_RxISR_I2SExt+0x64>
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <I2SEx_RxISR_I2SExt+0x94>)
 8003c8a:	e001      	b.n	8003c90 <I2SEx_RxISR_I2SExt+0x68>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff03 	bl	8003ab4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40003800 	.word	0x40003800
 8003cbc:	40003400 	.word	0x40003400

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e25b      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	4ba3      	ldr	r3, [pc, #652]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4ba0      	ldr	r3, [pc, #640]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b99      	ldr	r3, [pc, #612]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e236      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a90      	ldr	r2, [pc, #576]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a8a      	ldr	r2, [pc, #552]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a87      	ldr	r2, [pc, #540]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b84      	ldr	r3, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a83      	ldr	r2, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a80      	ldr	r2, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd fa88 	bl	800128c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd fa84 	bl	800128c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1fb      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fd fa74 	bl	800128c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd fa70 	bl	800128c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1e7      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d11c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1bb      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e12:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4952      	ldr	r1, [pc, #328]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	e03a      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCC_OscConfig+0x2b0>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd fa29 	bl	800128c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fd fa25 	bl	800128c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e19c      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4940      	ldr	r1, [pc, #256]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_RCC_OscConfig+0x2b0>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd fa08 	bl	800128c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fd fa04 	bl	800128c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e17b      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d030      	beq.n	8003f0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_RCC_OscConfig+0x2b4>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fd f9e8 	bl	800128c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7fd f9e4 	bl	800128c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e15b      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
 8003ede:	e015      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_OscConfig+0x2b4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fd f9d1 	bl	800128c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fd f9cd 	bl	800128c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e144      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a0 	beq.w	800405a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x2b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d121      	bne.n	8003f9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCC_OscConfig+0x2b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_RCC_OscConfig+0x2b8>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fd f993 	bl	800128c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e011      	b.n	8003f8e <HAL_RCC_OscConfig+0x2ce>
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	42470000 	.word	0x42470000
 8003f74:	42470e80 	.word	0x42470e80
 8003f78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7c:	f7fd f986 	bl	800128c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0fd      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	4b81      	ldr	r3, [pc, #516]	; (8004194 <HAL_RCC_OscConfig+0x4d4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
 8003fa2:	4b7d      	ldr	r3, [pc, #500]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
 8003fae:	e01c      	b.n	8003fea <HAL_RCC_OscConfig+0x32a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x312>
 8003fb8:	4b77      	ldr	r3, [pc, #476]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a76      	ldr	r2, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	4b74      	ldr	r3, [pc, #464]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a73      	ldr	r2, [pc, #460]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e00b      	b.n	8003fea <HAL_RCC_OscConfig+0x32a>
 8003fd2:	4b71      	ldr	r3, [pc, #452]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	4b6e      	ldr	r3, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a6d      	ldr	r2, [pc, #436]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d015      	beq.n	800401e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fd f94b 	bl	800128c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fd f947 	bl	800128c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0bc      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ee      	beq.n	8003ffa <HAL_RCC_OscConfig+0x33a>
 800401c:	e014      	b.n	8004048 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401e:	f7fd f935 	bl	800128c <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fd f931 	bl	800128c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e0a6      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	4b56      	ldr	r3, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ee      	bne.n	8004026 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404e:	4b52      	ldr	r3, [pc, #328]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a51      	ldr	r2, [pc, #324]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8092 	beq.w	8004188 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004064:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d05c      	beq.n	800412a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d141      	bne.n	80040fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004078:	4b48      	ldr	r3, [pc, #288]	; (800419c <HAL_RCC_OscConfig+0x4dc>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd f905 	bl	800128c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004086:	f7fd f901 	bl	800128c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e078      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004098:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	019b      	lsls	r3, r3, #6
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	4933      	ldr	r1, [pc, #204]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCC_OscConfig+0x4dc>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd f8da 	bl	800128c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd f8d6 	bl	800128c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04d      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x41c>
 80040fa:	e045      	b.n	8004188 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_OscConfig+0x4dc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd f8c3 	bl	800128c <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410a:	f7fd f8bf 	bl	800128c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e036      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x44a>
 8004128:	e02e      	b.n	8004188 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e029      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_RCC_OscConfig+0x4d8>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	429a      	cmp	r2, r3
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d115      	bne.n	8004184 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800415e:	4013      	ands	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004164:	4293      	cmp	r3, r2
 8004166:	d10d      	bne.n	8004184 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d106      	bne.n	8004184 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000
 8004198:	40023800 	.word	0x40023800
 800419c:	42470060 	.word	0x42470060

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0cc      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b68      	ldr	r3, [pc, #416]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d90c      	bls.n	80041dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b63      	ldr	r3, [pc, #396]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0b8      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a58      	ldr	r2, [pc, #352]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800420c:	4b53      	ldr	r3, [pc, #332]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a52      	ldr	r2, [pc, #328]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004218:	4b50      	ldr	r3, [pc, #320]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	494d      	ldr	r1, [pc, #308]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d044      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d119      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e07f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d003      	beq.n	800425e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	4b3f      	ldr	r3, [pc, #252]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	4b3b      	ldr	r3, [pc, #236]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e067      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427e:	4b37      	ldr	r3, [pc, #220]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 0203 	bic.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4934      	ldr	r1, [pc, #208]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004290:	f7fc fffc 	bl	800128c <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	e00a      	b.n	80042ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004298:	f7fc fff8 	bl	800128c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e04f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	4b2b      	ldr	r3, [pc, #172]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 020c 	and.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1eb      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20c      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e032      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4916      	ldr	r1, [pc, #88]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	490e      	ldr	r1, [pc, #56]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004326:	f000 f821 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800432a:	4601      	mov	r1, r0
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	5cd3      	ldrb	r3, [r2, r3]
 800433a:	fa21 f303 	lsr.w	r3, r1, r3
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc ff5c 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023c00 	.word	0x40023c00
 800435c:	40023800 	.word	0x40023800
 8004360:	08007c28 	.word	0x08007c28
 8004364:	20000070 	.word	0x20000070
 8004368:	20000074 	.word	0x20000074

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	2300      	movs	r3, #0
 800437c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004382:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d007      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x32>
 800438e:	2b08      	cmp	r3, #8
 8004390:	d008      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x38>
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 80b4 	bne.w	8004500 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800439a:	60bb      	str	r3, [r7, #8]
       break;
 800439c:	e0b3      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439e:	4b5e      	ldr	r3, [pc, #376]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043a0:	60bb      	str	r3, [r7, #8]
      break;
 80043a2:	e0b0      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ae:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04a      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b55      	ldr	r3, [pc, #340]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	ea03 0501 	and.w	r5, r3, r1
 80043d0:	ea04 0602 	and.w	r6, r4, r2
 80043d4:	4629      	mov	r1, r5
 80043d6:	4632      	mov	r2, r6
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	0154      	lsls	r4, r2, #5
 80043e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043e6:	014b      	lsls	r3, r1, #5
 80043e8:	4619      	mov	r1, r3
 80043ea:	4622      	mov	r2, r4
 80043ec:	1b49      	subs	r1, r1, r5
 80043ee:	eb62 0206 	sbc.w	r2, r2, r6
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	f04f 0400 	mov.w	r4, #0
 80043fa:	0194      	lsls	r4, r2, #6
 80043fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004400:	018b      	lsls	r3, r1, #6
 8004402:	1a5b      	subs	r3, r3, r1
 8004404:	eb64 0402 	sbc.w	r4, r4, r2
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	00e2      	lsls	r2, r4, #3
 8004412:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004416:	00d9      	lsls	r1, r3, #3
 8004418:	460b      	mov	r3, r1
 800441a:	4614      	mov	r4, r2
 800441c:	195b      	adds	r3, r3, r5
 800441e:	eb44 0406 	adc.w	r4, r4, r6
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	0262      	lsls	r2, r4, #9
 800442c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004430:	0259      	lsls	r1, r3, #9
 8004432:	460b      	mov	r3, r1
 8004434:	4614      	mov	r4, r2
 8004436:	4618      	mov	r0, r3
 8004438:	4621      	mov	r1, r4
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f04f 0400 	mov.w	r4, #0
 8004440:	461a      	mov	r2, r3
 8004442:	4623      	mov	r3, r4
 8004444:	f7fb fec8 	bl	80001d8 <__aeabi_uldivmod>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e049      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	f04f 0400 	mov.w	r4, #0
 800445a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	ea03 0501 	and.w	r5, r3, r1
 8004466:	ea04 0602 	and.w	r6, r4, r2
 800446a:	4629      	mov	r1, r5
 800446c:	4632      	mov	r2, r6
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	f04f 0400 	mov.w	r4, #0
 8004476:	0154      	lsls	r4, r2, #5
 8004478:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800447c:	014b      	lsls	r3, r1, #5
 800447e:	4619      	mov	r1, r3
 8004480:	4622      	mov	r2, r4
 8004482:	1b49      	subs	r1, r1, r5
 8004484:	eb62 0206 	sbc.w	r2, r2, r6
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	f04f 0400 	mov.w	r4, #0
 8004490:	0194      	lsls	r4, r2, #6
 8004492:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	1a5b      	subs	r3, r3, r1
 800449a:	eb64 0402 	sbc.w	r4, r4, r2
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	00e2      	lsls	r2, r4, #3
 80044a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044ac:	00d9      	lsls	r1, r3, #3
 80044ae:	460b      	mov	r3, r1
 80044b0:	4614      	mov	r4, r2
 80044b2:	195b      	adds	r3, r3, r5
 80044b4:	eb44 0406 	adc.w	r4, r4, r6
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	02a2      	lsls	r2, r4, #10
 80044c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044c6:	0299      	lsls	r1, r3, #10
 80044c8:	460b      	mov	r3, r1
 80044ca:	4614      	mov	r4, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	4621      	mov	r1, r4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f04f 0400 	mov.w	r4, #0
 80044d6:	461a      	mov	r2, r3
 80044d8:	4623      	mov	r3, r4
 80044da:	f7fb fe7d 	bl	80001d8 <__aeabi_uldivmod>
 80044de:	4603      	mov	r3, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	60bb      	str	r3, [r7, #8]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004502:	60bb      	str	r3, [r7, #8]
      break;
 8004504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004506:	68bb      	ldr	r3, [r7, #8]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	00f42400 	.word	0x00f42400
 8004518:	007a1200 	.word	0x007a1200

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000070 	.word	0x20000070

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff0 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800453c:	4601      	mov	r1, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0a9b      	lsrs	r3, r3, #10
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	08007c38 	.word	0x08007c38

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004580:	2b00      	cmp	r3, #0
 8004582:	d038      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7fc fe7f 	bl	800128c <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004592:	f7fc fe7b 	bl	800128c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0bd      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	495a      	ldr	r1, [pc, #360]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045ca:	4b57      	ldr	r3, [pc, #348]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045d0:	f7fc fe5c 	bl	800128c <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045d8:	f7fc fe58 	bl	800128c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e09a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ea:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8083 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	4a47      	ldr	r2, [pc, #284]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	6413      	str	r3, [r2, #64]	; 0x40
 8004614:	4b45      	ldr	r3, [pc, #276]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004620:	4b43      	ldr	r3, [pc, #268]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a42      	ldr	r2, [pc, #264]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800462c:	f7fc fe2e 	bl	800128c <HAL_GetTick>
 8004630:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004634:	f7fc fe2a 	bl	800128c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e06c      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004646:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d02f      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d028      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004670:	4b2e      	ldr	r3, [pc, #184]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800467a:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004686:	4a29      	ldr	r2, [pc, #164]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d114      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004698:	f7fc fdf8 	bl	800128c <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fc fdf4 	bl	800128c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e034      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ee      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d10d      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	4911      	ldr	r1, [pc, #68]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
 80046ea:	e005      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004704:	4909      	ldr	r1, [pc, #36]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7d1a      	ldrb	r2, [r3, #20]
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800471c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	42470068 	.word	0x42470068
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470e40 	.word	0x42470e40
 8004738:	424711e0 	.word	0x424711e0

0800473c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d13f      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004762:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800476a:	2b01      	cmp	r3, #1
 800476c:	d131      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004770:	617b      	str	r3, [r7, #20]
          break;
 8004772:	e031      	b.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d109      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	0f1b      	lsrs	r3, r3, #28
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	617b      	str	r3, [r7, #20]
          break;
 80047d0:	e002      	b.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
          break;
 80047d6:	bf00      	nop
        }
      }
      break;
 80047d8:	bf00      	nop
    }
  }
  return frequency;
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40023800 	.word	0x40023800
 80047ec:	00bb8000 	.word	0x00bb8000
 80047f0:	007a1200 	.word	0x007a1200
 80047f4:	00f42400 	.word	0x00f42400

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e056      	b.n	80048b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc fbdf 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	ea42 0103 	orr.w	r1, r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	f003 0104 	and.w	r1, r3, #4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c0:	b084      	sub	sp, #16
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	f107 001c 	add.w	r0, r7, #28
 80048ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d122      	bne.n	800491e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f94a 	bl	8004bac <USB_CoreReset>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	e01a      	b.n	8004954 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f93e 	bl	8004bac <USB_CoreReset>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
 8004946:	e005      	b.n	8004954 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10b      	bne.n	8004972 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f043 0206 	orr.w	r2, r3, #6
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800497e:	b004      	add	sp, #16
 8004980:	4770      	bx	lr

08004982 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 0201 	bic.w	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e00b      	b.n	8004a0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e001      	b.n	8004a0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e003      	b.n	8004a12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a0a:	2032      	movs	r0, #50	; 0x32
 8004a0c:	f7fc fc4a 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <USB_FlushTxFifo+0x48>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d0f0      	beq.n	8004a36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	00030d40 	.word	0x00030d40

08004a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2210      	movs	r2, #16
 8004a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <USB_FlushRxFifo+0x40>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d0f0      	beq.n	8004a7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	00030d40 	.word	0x00030d40

08004aac <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	460b      	mov	r3, r1
 8004abc:	71fb      	strb	r3, [r7, #7]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d11a      	bne.n	8004b08 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ad2:	88bb      	ldrh	r3, [r7, #4]
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e00f      	b.n	8004b00 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	031a      	lsls	r2, r3, #12
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	461a      	mov	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3304      	adds	r3, #4
 8004af8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3eb      	bcc.n	8004ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b089      	sub	sp, #36	; 0x24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	3303      	adds	r3, #3
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e00b      	b.n	8004b52 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3ef      	bcc.n	8004b3a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004b5a:	69fb      	ldr	r3, [r7, #28]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3724      	adds	r7, #36	; 0x24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <USB_CoreReset+0x64>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e01b      	b.n	8004c02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	daf2      	bge.n	8004bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <USB_CoreReset+0x64>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e006      	b.n	8004c02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d0f0      	beq.n	8004be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	00030d40 	.word	0x00030d40

08004c14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	f107 001c 	add.w	r0, r7, #28
 8004c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d10a      	bne.n	8004c82 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e014      	b.n	8004cac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e009      	b.n	8004cac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca6:	f023 0304 	bic.w	r3, r3, #4
 8004caa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004cac:	2110      	movs	r1, #16
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff feb4 	bl	8004a1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fed7 	bl	8004a68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e015      	b.n	8004cec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d3e5      	bcc.n	8004cc0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8ac 	bl	8004e54 <USB_DriveVbus>

  HAL_Delay(200U);
 8004cfc:	20c8      	movs	r0, #200	; 0xc8
 8004cfe:	f7fc fad1 	bl	80012a4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <USB_HostInit+0x164>)
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <USB_HostInit+0x168>)
 8004d2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d32:	e009      	b.n	8004d48 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2280      	movs	r2, #128	; 0x80
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <USB_HostInit+0x16c>)
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <USB_HostInit+0x170>)
 8004d44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f043 0210 	orr.w	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <USB_HostInit+0x174>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d72:	b004      	add	sp, #16
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	01000200 	.word	0x01000200
 8004d7c:	00e00300 	.word	0x00e00300
 8004d80:	00600080 	.word	0x00600080
 8004d84:	004000e0 	.word	0x004000e0
 8004d88:	a3200008 	.word	0xa3200008

08004d8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004dda:	6053      	str	r3, [r2, #4]
 8004ddc:	e009      	b.n	8004df2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d106      	bne.n	8004df2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dea:	461a      	mov	r2, r3
 8004dec:	f241 7370 	movw	r3, #6000	; 0x1770
 8004df0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004e30:	2064      	movs	r0, #100	; 0x64
 8004e32:	f7fc fa37 	bl	80012a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e42:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004e44:	200a      	movs	r0, #10
 8004e46:	f7fc fa2d 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <USB_DriveVbus+0x44>
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d106      	bne.n	8004e98 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e96:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea2:	d109      	bne.n	8004eb8 <USB_DriveVbus+0x64>
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0c5b      	lsrs	r3, r3, #17
 8004ee4:	f003 0303 	and.w	r3, r3, #3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	b29b      	uxth	r3, r3
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	70fb      	strb	r3, [r7, #3]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70bb      	strb	r3, [r7, #2]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d87e      	bhi.n	8005054 <USB_HC_Init+0x13c>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <USB_HC_Init+0x44>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08005017 	.word	0x08005017
 8004f64:	08004f6d 	.word	0x08004f6d
 8004f68:	08004fd9 	.word	0x08004fd9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004f7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004f80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	da10      	bge.n	8004faa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004fa8:	e057      	b.n	800505a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d051      	beq.n	800505a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fd4:	60d3      	str	r3, [r2, #12]
      break;
 8004fd6:	e040      	b.n	800505a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da34      	bge.n	800505e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005012:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005014:	e023      	b.n	800505e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	461a      	mov	r2, r3
 8005024:	f240 2325 	movw	r3, #549	; 0x225
 8005028:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800502a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da17      	bge.n	8005062 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	440a      	add	r2, r1
 8005048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005050:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005052:	e006      	b.n	8005062 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75fb      	strb	r3, [r7, #23]
      break;
 8005058:	e004      	b.n	8005064 <USB_HC_Init+0x14c>
      break;
 800505a:	bf00      	nop
 800505c:	e002      	b.n	8005064 <USB_HC_Init+0x14c>
      break;
 800505e:	bf00      	nop
 8005060:	e000      	b.n	8005064 <USB_HC_Init+0x14c>
      break;
 8005062:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800507e:	4313      	orrs	r3, r2
 8005080:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800508e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005092:	2b00      	cmp	r3, #0
 8005094:	da03      	bge.n	800509e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e001      	b.n	80050a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80050a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d103      	bne.n	80050b2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80050aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e001      	b.n	80050b6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050b6:	787b      	ldrb	r3, [r7, #1]
 80050b8:	059b      	lsls	r3, r3, #22
 80050ba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80050be:	78bb      	ldrb	r3, [r7, #2]
 80050c0:	02db      	lsls	r3, r3, #11
 80050c2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050cc:	049b      	lsls	r3, r3, #18
 80050ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80050d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80050da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	0159      	lsls	r1, r3, #5
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	440b      	add	r3, r1
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80050f2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80050f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d10f      	bne.n	800511c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	440a      	add	r2, r1
 8005112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800511a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800511c:	7dfb      	ldrb	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005148:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d028      	beq.n	80051a8 <USB_HC_StartXfer+0x7c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d124      	bne.n	80051a8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <USB_HC_StartXfer+0x50>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	795b      	ldrb	r3, [r3, #5]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	4619      	mov	r1, r3
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fa2e 	bl	80055d4 <USB_DoPing>
      return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e112      	b.n	80053a2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d112      	bne.n	80051a8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	440a      	add	r2, r1
 8005198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800519c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80051a0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d018      	beq.n	80051e2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	8912      	ldrh	r2, [r2, #8]
 80051b8:	4413      	add	r3, r2
 80051ba:	3b01      	subs	r3, #1
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	8912      	ldrh	r2, [r2, #8]
 80051c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80051c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d90b      	bls.n	80051e6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80051ce:	8b7b      	ldrh	r3, [r7, #26]
 80051d0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80051d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	8912      	ldrh	r2, [r2, #8]
 80051d8:	fb02 f203 	mul.w	r2, r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	611a      	str	r2, [r3, #16]
 80051e0:	e001      	b.n	80051e6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80051e2:	2301      	movs	r3, #1
 80051e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	78db      	ldrb	r3, [r3, #3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80051ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	8912      	ldrh	r2, [r2, #8]
 80051f4:	fb02 f203 	mul.w	r2, r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005206:	04d9      	lsls	r1, r3, #19
 8005208:	4b68      	ldr	r3, [pc, #416]	; (80053ac <USB_HC_StartXfer+0x280>)
 800520a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800520c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	7a9b      	ldrb	r3, [r3, #10]
 8005212:	075b      	lsls	r3, r3, #29
 8005214:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	4401      	add	r1, r0
 8005220:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005224:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005226:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	460a      	mov	r2, r1
 8005240:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	440a      	add	r2, r1
 8005270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005274:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005278:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	7e7b      	ldrb	r3, [r7, #25]
 800528a:	075b      	lsls	r3, r3, #29
 800528c:	69f9      	ldr	r1, [r7, #28]
 800528e:	0148      	lsls	r0, r1, #5
 8005290:	6a39      	ldr	r1, [r7, #32]
 8005292:	4401      	add	r1, r0
 8005294:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a41      	ldr	r2, [pc, #260]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ae:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b6:	4a3e      	ldr	r2, [pc, #248]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	78db      	ldrb	r3, [r3, #3]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052c2:	4b3b      	ldr	r3, [pc, #236]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ca:	4a39      	ldr	r2, [pc, #228]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e005      	b.n	80052dc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052d0:	4b37      	ldr	r3, [pc, #220]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d8:	4a35      	ldr	r2, [pc, #212]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052dc:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e4:	4a32      	ldr	r2, [pc, #200]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b2e      	ldr	r3, [pc, #184]	; (80053b0 <USB_HC_StartXfer+0x284>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d14e      	bne.n	80053a0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	78db      	ldrb	r3, [r3, #3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d14a      	bne.n	80053a0 <USB_HC_StartXfer+0x274>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d046      	beq.n	80053a0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	79db      	ldrb	r3, [r3, #7]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d830      	bhi.n	800537c <USB_HC_StartXfer+0x250>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <USB_HC_StartXfer+0x1f4>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005355 	.word	0x08005355
 8005328:	08005331 	.word	0x08005331
 800532c:	08005355 	.word	0x08005355
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	3303      	adds	r3, #3
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800533a:	8afa      	ldrh	r2, [r7, #22]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	b29b      	uxth	r3, r3
 8005342:	429a      	cmp	r2, r3
 8005344:	d91c      	bls.n	8005380 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	619a      	str	r2, [r3, #24]
          }
          break;
 8005352:	e015      	b.n	8005380 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	3303      	adds	r3, #3
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800535e:	8afa      	ldrh	r2, [r7, #22]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	b29b      	uxth	r3, r3
 800536a:	429a      	cmp	r2, r3
 800536c:	d90a      	bls.n	8005384 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	619a      	str	r2, [r3, #24]
          }
          break;
 800537a:	e003      	b.n	8005384 <USB_HC_StartXfer+0x258>

        default:
          break;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <USB_HC_StartXfer+0x25a>
          break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <USB_HC_StartXfer+0x25a>
          break;
 8005384:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785a      	ldrb	r2, [r3, #1]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	b298      	uxth	r0, r3
 8005394:	2300      	movs	r3, #0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4603      	mov	r3, r0
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff fb86 	bl	8004aac <USB_WritePacket>
    }
  }

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	1ff80000 	.word	0x1ff80000
 80053b0:	20000138 	.word	0x20000138

080053b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	b29b      	uxth	r3, r3
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b087      	sub	sp, #28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0c9b      	lsrs	r3, r3, #18
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <USB_HC_Halt+0x3a>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d16c      	bne.n	80054ea <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	440a      	add	r2, r1
 8005426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d143      	bne.n	80054c4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	440a      	add	r2, r1
 8005452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800545a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800547a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	440a      	add	r2, r1
 8005492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800549a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	3301      	adds	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a8:	d81d      	bhi.n	80054e6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c0:	d0ec      	beq.n	800549c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054c2:	e080      	b.n	80055c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054e4:	e06f      	b.n	80055c6 <USB_HC_Halt+0x1f0>
          break;
 80054e6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054e8:	e06d      	b.n	80055c6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d143      	bne.n	80055a2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005538:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	440a      	add	r2, r1
 8005550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005558:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	440a      	add	r2, r1
 8005570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005578:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3301      	adds	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005586:	d81d      	bhi.n	80055c4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559e:	d0ec      	beq.n	800557a <USB_HC_Halt+0x1a4>
 80055a0:	e011      	b.n	80055c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e000      	b.n	80055c6 <USB_HC_Halt+0x1f0>
          break;
 80055c4:	bf00      	nop
    }
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	04da      	lsls	r2, r3, #19
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <USB_DoPing+0x74>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005604:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800561c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005624:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	1ff80000 	.word	0x1ff80000

0800564c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff f9a1 	bl	80049a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005662:	2110      	movs	r1, #16
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff f9d9 	bl	8004a1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff f9fc 	bl	8004a68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	e01f      	b.n	80056b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800568c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005694:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800569c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056aa:	461a      	mov	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3301      	adds	r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b0f      	cmp	r3, #15
 80056ba:	d9dc      	bls.n	8005676 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e034      	b.n	800572c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	3301      	adds	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005708:	d80c      	bhi.n	8005724 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800571c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005720:	d0ec      	beq.n	80056fc <USB_StopHost+0xb0>
 8005722:	e000      	b.n	8005726 <USB_StopHost+0xda>
        break;
 8005724:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d9c7      	bls.n	80056c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005738:	461a      	mov	r2, r3
 800573a:	f04f 33ff 	mov.w	r3, #4294967295
 800573e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff f91a 	bl	8004982 <USB_EnableGlobalInt>

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af04      	add	r7, sp, #16
 800575e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005760:	2302      	movs	r3, #2
 8005762:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005764:	2301      	movs	r3, #1
 8005766:	2202      	movs	r2, #2
 8005768:	2102      	movs	r1, #2
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fc3a 	bl	8005fe4 <USBH_FindInterface>
 8005770:	4603      	mov	r3, r0
 8005772:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	2bff      	cmp	r3, #255	; 0xff
 8005778:	f000 812a 	beq.w	80059d0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fc13 	bl	8005fac <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800578c:	2050      	movs	r0, #80	; 0x50
 800578e:	f002 f8df 	bl	8007950 <malloc>
 8005792:	4603      	mov	r3, r0
 8005794:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	211a      	movs	r1, #26
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	da15      	bge.n	80057e4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	211a      	movs	r1, #26
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	211a      	movs	r1, #26
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80057de:	881a      	ldrh	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fd21 	bl	8007232 <USBH_AllocPipe>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	7858      	ldrb	r0, [r3, #1]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	8952      	ldrh	r2, [r2, #10]
 8005810:	9202      	str	r2, [sp, #8]
 8005812:	2203      	movs	r2, #3
 8005814:	9201      	str	r2, [sp, #4]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	4623      	mov	r3, r4
 800581a:	4602      	mov	r2, r0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fcd9 	bl	80071d4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 ffe0 	bl	80077f0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005830:	2300      	movs	r3, #0
 8005832:	2200      	movs	r2, #0
 8005834:	210a      	movs	r1, #10
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fbd4 	bl	8005fe4 <USBH_FindInterface>
 800583c:	4603      	mov	r3, r0
 800583e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	2bff      	cmp	r3, #255	; 0xff
 8005844:	f000 80c4 	beq.w	80059d0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	211a      	movs	r1, #26
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b25b      	sxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	da16      	bge.n	800588e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	211a      	movs	r1, #26
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	211a      	movs	r1, #26
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	835a      	strh	r2, [r3, #26]
 800588c:	e015      	b.n	80058ba <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	211a      	movs	r1, #26
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	4413      	add	r3, r2
 800589a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	211a      	movs	r1, #26
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	211a      	movs	r1, #26
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da16      	bge.n	8005900 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	211a      	movs	r1, #26
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	f203 3352 	addw	r3, r3, #850	; 0x352
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	211a      	movs	r1, #26
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	835a      	strh	r2, [r3, #26]
 80058fe:	e015      	b.n	800592c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	211a      	movs	r1, #26
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005910:	781a      	ldrb	r2, [r3, #0]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	211a      	movs	r1, #26
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	7b9b      	ldrb	r3, [r3, #14]
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 fc7d 	bl	8007232 <USBH_AllocPipe>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	7bdb      	ldrb	r3, [r3, #15]
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fc73 	bl	8007232 <USBH_AllocPipe>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	7b59      	ldrb	r1, [r3, #13]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	7b98      	ldrb	r0, [r3, #14]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	8b12      	ldrh	r2, [r2, #24]
 800596c:	9202      	str	r2, [sp, #8]
 800596e:	2202      	movs	r2, #2
 8005970:	9201      	str	r2, [sp, #4]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4623      	mov	r3, r4
 8005976:	4602      	mov	r2, r0
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fc2b 	bl	80071d4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	7b19      	ldrb	r1, [r3, #12]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	7bd8      	ldrb	r0, [r3, #15]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	8b52      	ldrh	r2, [r2, #26]
 8005996:	9202      	str	r2, [sp, #8]
 8005998:	2202      	movs	r2, #2
 800599a:	9201      	str	r2, [sp, #4]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4623      	mov	r3, r4
 80059a0:	4602      	mov	r2, r0
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fc16 	bl	80071d4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	7b5b      	ldrb	r3, [r3, #13]
 80059b4:	2200      	movs	r2, #0
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 ff19 	bl	80077f0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	7b1b      	ldrb	r3, [r3, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 ff12 	bl	80077f0 <USBH_LL_SetToggle>
      status = USBH_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}

080059da <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00e      	beq.n	8005a12 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fc09 	bl	8007212 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fc31 	bl	800726e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	7b1b      	ldrb	r3, [r3, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00e      	beq.n	8005a38 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	7b1b      	ldrb	r3, [r3, #12]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fbf6 	bl	8007212 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7b1b      	ldrb	r3, [r3, #12]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fc1e 	bl	800726e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	7b5b      	ldrb	r3, [r3, #13]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7b5b      	ldrb	r3, [r3, #13]
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fbe3 	bl	8007212 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	7b5b      	ldrb	r3, [r3, #13]
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fc0b 	bl	800726e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 ff74 	bl	8007960 <free>
    phost->pActiveClass->pData = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a7e:	2200      	movs	r2, #0
 8005a80:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005a94:	2302      	movs	r3, #2
 8005a96:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	3340      	adds	r3, #64	; 0x40
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8b2 	bl	8005c12 <GetLineCoding>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005abe:	2102      	movs	r1, #2
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
  }
  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d877      	bhi.n	8005be4 <USBH_CDC_Process+0x114>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USBH_CDC_Process+0x2c>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b11 	.word	0x08005b11
 8005b00:	08005b17 	.word	0x08005b17
 8005b04:	08005b47 	.word	0x08005b47
 8005b08:	08005bbb 	.word	0x08005bbb
 8005b0c:	08005bc9 	.word	0x08005bc9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
    break;
 8005b14:	e06d      	b.n	8005bf2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f897 	bl	8005c50 <SetLineCoding>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005b34:	e058      	b.n	8005be8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d055      	beq.n	8005be8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005b44:	e050      	b.n	8005be8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	3340      	adds	r3, #64	; 0x40
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f860 	bl	8005c12 <GetLineCoding>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d126      	bne.n	8005baa <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d13b      	bne.n	8005bec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d133      	bne.n	8005bec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d12b      	bne.n	8005bec <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d124      	bne.n	8005bec <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f95a 	bl	8005e5c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005ba8:	e020      	b.n	8005bec <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d01d      	beq.n	8005bec <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005bb8:	e018      	b.n	8005bec <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f867 	bl	8005c8e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f8dc 	bl	8005d7e <CDC_ProcessReception>
    break;
 8005bc6:	e014      	b.n	8005bf2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fece 	bl	800696c <USBH_ClrFeature>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005be2:	e005      	b.n	8005bf0 <USBH_CDC_Process+0x120>

  default:
    break;
 8005be4:	bf00      	nop
 8005be6:	e004      	b.n	8005bf2 <USBH_CDC_Process+0x122>
    break;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <USBH_CDC_Process+0x122>
    break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <USBH_CDC_Process+0x122>
    break;
 8005bf0:	bf00      	nop

  }

  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	22a1      	movs	r2, #161	; 0xa1
 8005c20:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2221      	movs	r2, #33	; 0x21
 8005c26:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2207      	movs	r2, #7
 8005c38:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2207      	movs	r2, #7
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f873 	bl	8006d2c <USBH_CtlReq>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2221      	movs	r2, #33	; 0x21
 8005c5e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2207      	movs	r2, #7
 8005c76:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2207      	movs	r2, #7
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f854 	bl	8006d2c <USBH_CtlReq>
 8005c84:	4603      	mov	r3, r0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af02      	add	r7, sp, #8
 8005c94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <CDC_ProcessTransmission+0x26>
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d025      	beq.n	8005cfe <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005cb2:	e060      	b.n	8005d76 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	8b12      	ldrh	r2, [r2, #24]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d90c      	bls.n	8005cda <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8b1a      	ldrh	r2, [r3, #24]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	7b58      	ldrb	r0, [r3, #13]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fa3b 	bl	800714e <USBH_BulkSendData>
 8005cd8:	e00c      	b.n	8005cf4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	7b58      	ldrb	r0, [r3, #13]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4603      	mov	r3, r0
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fa2d 	bl	800714e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005cfc:	e03b      	b.n	8005d76 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	7b5b      	ldrb	r3, [r3, #13]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 fd49 	bl	800779c <USBH_LL_GetURBState>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d128      	bne.n	8005d66 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	8b12      	ldrh	r2, [r2, #24]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d90e      	bls.n	8005d3e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	8b12      	ldrh	r2, [r2, #24]
 8005d28:	1a9a      	subs	r2, r3, r2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	8b12      	ldrh	r2, [r2, #24]
 8005d36:	441a      	add	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	61da      	str	r2, [r3, #28]
 8005d3c:	e002      	b.n	8005d44 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005d54:	e00e      	b.n	8005d74 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f868 	bl	8005e34 <USBH_CDC_TransmitCallback>
    break;
 8005d64:	e006      	b.n	8005d74 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d103      	bne.n	8005d74 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005d74:	bf00      	nop
  }
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d002      	beq.n	8005da4 <CDC_ProcessReception+0x26>
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00e      	beq.n	8005dc0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005da2:	e043      	b.n	8005e2c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6a19      	ldr	r1, [r3, #32]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	8b5a      	ldrh	r2, [r3, #26]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	7b1b      	ldrb	r3, [r3, #12]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f9f1 	bl	8007198 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2204      	movs	r2, #4
 8005dba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005dbe:	e035      	b.n	8005e2c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	7b1b      	ldrb	r3, [r3, #12]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f001 fce8 	bl	800779c <USBH_LL_GetURBState>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d129      	bne.n	8005e2a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	7b1b      	ldrb	r3, [r3, #12]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 fc4b 	bl	8007678 <USBH_LL_GetLastXferSize>
 8005de2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d016      	beq.n	8005e1c <CDC_ProcessReception+0x9e>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	8b5b      	ldrh	r3, [r3, #26]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d910      	bls.n	8005e1c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2203      	movs	r2, #3
 8005e16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005e1a:	e006      	b.n	8005e2a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f80f 	bl	8005e48 <USBH_CDC_ReceiveCallback>
    break;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e019      	b.n	8005ebc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	79fa      	ldrb	r2, [r7, #7]
 8005e8c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f80f 	bl	8005ec4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f001 fb2d 	bl	8007514 <USBH_LL_Init>

  return USBH_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005ed0:	e008      	b.n	8005ee4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	32e0      	adds	r2, #224	; 0xe0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b0e      	cmp	r3, #14
 8005ee8:	d9f3      	bls.n	8005ed2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e009      	b.n	8005f04 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d3f1      	bcc.n	8005ef0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d017      	beq.n	8005f9a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10f      	bne.n	8005f94 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f7a:	1c59      	adds	r1, r3, #1
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	33dc      	adds	r3, #220	; 0xdc
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
 8005f92:	e004      	b.n	8005f9e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f94:	2302      	movs	r3, #2
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e001      	b.n	8005f9e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d204      	bcs.n	8005fd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005fd0:	e001      	b.n	8005fd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	4608      	mov	r0, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	70fb      	strb	r3, [r7, #3]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	70bb      	strb	r3, [r7, #2]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800600c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800600e:	e025      	b.n	800605c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	221a      	movs	r2, #26
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	3308      	adds	r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	3302      	adds	r3, #2
 8006020:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	795b      	ldrb	r3, [r3, #5]
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	429a      	cmp	r2, r3
 800602a:	d002      	beq.n	8006032 <USBH_FindInterface+0x4e>
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d111      	bne.n	8006056 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006036:	78ba      	ldrb	r2, [r7, #2]
 8006038:	429a      	cmp	r2, r3
 800603a:	d002      	beq.n	8006042 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800603c:	78bb      	ldrb	r3, [r7, #2]
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d109      	bne.n	8006056 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006046:	787a      	ldrb	r2, [r7, #1]
 8006048:	429a      	cmp	r2, r3
 800604a:	d002      	beq.n	8006052 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800604c:	787b      	ldrb	r3, [r7, #1]
 800604e:	2bff      	cmp	r3, #255	; 0xff
 8006050:	d101      	bne.n	8006056 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	e006      	b.n	8006064 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	3301      	adds	r3, #1
 800605a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d9d6      	bls.n	8006010 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006062:	23ff      	movs	r3, #255	; 0xff
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fa87 	bl	800758c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800607e:	2101      	movs	r1, #1
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fb9e 	bl	80077c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af04      	add	r7, sp, #16
 8006096:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006098:	2302      	movs	r3, #2
 800609a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 faec 	bl	800667e <USBH_IsPortEnabled>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10c      	bne.n	80060c6 <USBH_Process+0x36>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d002      	beq.n	80060c6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2203      	movs	r2, #3
 80060c4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b0b      	cmp	r3, #11
 80060ce:	f200 814c 	bhi.w	800636a <USBH_Process+0x2da>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USBH_Process+0x48>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	08006109 	.word	0x08006109
 80060dc:	0800612b 	.word	0x0800612b
 80060e0:	0800613f 	.word	0x0800613f
 80060e4:	08006345 	.word	0x08006345
 80060e8:	0800636b 	.word	0x0800636b
 80060ec:	080061cd 	.word	0x080061cd
 80060f0:	080062fb 	.word	0x080062fb
 80060f4:	080061fd 	.word	0x080061fd
 80060f8:	0800621d 	.word	0x0800621d
 80060fc:	0800623d 	.word	0x0800623d
 8006100:	0800626b 	.word	0x0800626b
 8006104:	0800632d 	.word	0x0800632d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 812c 	beq.w	800636e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800611c:	20c8      	movs	r0, #200	; 0xc8
 800611e:	f001 fb9a 	bl	8007856 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fa8d 	bl	8007642 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006128:	e121      	b.n	800636e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006130:	2b01      	cmp	r3, #1
 8006132:	f040 811e 	bne.w	8006372 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800613c:	e119      	b.n	8006372 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800613e:	2064      	movs	r0, #100	; 0x64
 8006140:	f001 fb89 	bl	8007856 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fa57 	bl	80075f8 <USBH_LL_GetSpeed>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2205      	movs	r2, #5
 8006158:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800615a:	2100      	movs	r1, #0
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f868 	bl	8007232 <USBH_AllocPipe>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800616a:	2180      	movs	r1, #128	; 0x80
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 f860 	bl	8007232 <USBH_AllocPipe>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7919      	ldrb	r1, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800618e:	b292      	uxth	r2, r2
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	2200      	movs	r2, #0
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4603      	mov	r3, r0
 800619a:	2280      	movs	r2, #128	; 0x80
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f819 	bl	80071d4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7959      	ldrb	r1, [r3, #5]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80061b6:	b292      	uxth	r2, r2
 80061b8:	9202      	str	r2, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	9201      	str	r2, [sp, #4]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	2200      	movs	r2, #0
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 f805 	bl	80071d4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80061ca:	e0e3      	b.n	8006394 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8e7 	bl	80063a0 <USBH_HandleEnum>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 80ce 	bne.w	8006376 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d103      	bne.n	80061f4 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2208      	movs	r2, #8
 80061f0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80061f2:	e0c0      	b.n	8006376 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2207      	movs	r2, #7
 80061f8:	701a      	strb	r2, [r3, #0]
    break;
 80061fa:	e0bc      	b.n	8006376 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80b9 	beq.w	800637a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2208      	movs	r2, #8
 8006218:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800621a:	e0ae      	b.n	800637a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006222:	b29b      	uxth	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb59 	bl	80068de <USBH_SetCfg>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 80a5 	bne.w	800637e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2209      	movs	r2, #9
 8006238:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800623a:	e0a0      	b.n	800637e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800624a:	2101      	movs	r1, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb69 	bl	8006924 <USBH_SetFeature>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8094 	bne.w	8006382 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	220a      	movs	r2, #10
 800625e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006260:	e08f      	b.n	8006382 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	220a      	movs	r2, #10
 8006266:	701a      	strb	r2, [r3, #0]
    break;
 8006268:	e08b      	b.n	8006382 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8088 	beq.w	8006386 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
 8006282:	e017      	b.n	80062b4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	33dc      	adds	r3, #220	; 0xdc
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	791a      	ldrb	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006298:	429a      	cmp	r2, r3
 800629a:	d108      	bne.n	80062ae <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	33dc      	adds	r3, #220	; 0xdc
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	3301      	adds	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0e4      	beq.n	8006284 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2206      	movs	r2, #6
 80062da:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062e2:	2103      	movs	r1, #3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80062e8:	e04d      	b.n	8006386 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	220d      	movs	r2, #13
 80062ee:	701a      	strb	r2, [r3, #0]
    break;
 80062f0:	e049      	b.n	8006386 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	220d      	movs	r2, #13
 80062f6:	701a      	strb	r2, [r3, #0]
    break;
 80062f8:	e045      	b.n	8006386 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
 8006310:	4603      	mov	r3, r0
 8006312:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d136      	bne.n	800638a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220b      	movs	r2, #11
 8006320:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006322:	e032      	b.n	800638a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	220d      	movs	r2, #13
 8006328:	701a      	strb	r2, [r3, #0]
    break;
 800632a:	e02e      	b.n	800638a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02b      	beq.n	800638e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
    }
    break;
 8006342:	e024      	b.n	800638e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fdbd 	bl	8005ec4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01e      	beq.n	8006392 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006368:	e013      	b.n	8006392 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800636a:	bf00      	nop
 800636c:	e012      	b.n	8006394 <USBH_Process+0x304>
    break;
 800636e:	bf00      	nop
 8006370:	e010      	b.n	8006394 <USBH_Process+0x304>
    break;
 8006372:	bf00      	nop
 8006374:	e00e      	b.n	8006394 <USBH_Process+0x304>
    break;
 8006376:	bf00      	nop
 8006378:	e00c      	b.n	8006394 <USBH_Process+0x304>
    break;
 800637a:	bf00      	nop
 800637c:	e00a      	b.n	8006394 <USBH_Process+0x304>
    break;
 800637e:	bf00      	nop
 8006380:	e008      	b.n	8006394 <USBH_Process+0x304>
    break;
 8006382:	bf00      	nop
 8006384:	e006      	b.n	8006394 <USBH_Process+0x304>
    break;
 8006386:	bf00      	nop
 8006388:	e004      	b.n	8006394 <USBH_Process+0x304>
    break;
 800638a:	bf00      	nop
 800638c:	e002      	b.n	8006394 <USBH_Process+0x304>
    break;
 800638e:	bf00      	nop
 8006390:	e000      	b.n	8006394 <USBH_Process+0x304>
    break;
 8006392:	bf00      	nop
  }
 return USBH_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b07      	cmp	r3, #7
 80063b2:	f200 80f8 	bhi.w	80065a6 <USBH_HandleEnum+0x206>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <USBH_HandleEnum+0x1c>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063dd 	.word	0x080063dd
 80063c0:	0800644f 	.word	0x0800644f
 80063c4:	08006467 	.word	0x08006467
 80063c8:	080064dd 	.word	0x080064dd
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	0800650f 	.word	0x0800650f
 80063d4:	08006543 	.word	0x08006543
 80063d8:	08006577 	.word	0x08006577
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80063dc:	2108      	movs	r1, #8
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9ad 	bl	800673e <USBH_Get_DevDesc>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 80df 	bne.w	80065aa <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	7919      	ldrb	r1, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006410:	b292      	uxth	r2, r2
 8006412:	9202      	str	r2, [sp, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	9201      	str	r2, [sp, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4603      	mov	r3, r0
 800641c:	2280      	movs	r2, #128	; 0x80
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fed8 	bl	80071d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7959      	ldrb	r1, [r3, #5]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006438:	b292      	uxth	r2, r2
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4603      	mov	r3, r0
 8006444:	2200      	movs	r2, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fec4 	bl	80071d4 <USBH_OpenPipe>

    }
    break;
 800644c:	e0ad      	b.n	80065aa <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800644e:	2112      	movs	r1, #18
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f974 	bl	800673e <USBH_Get_DevDesc>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 80a8 	bne.w	80065ae <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006464:	e0a3      	b.n	80065ae <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa14 	bl	8006896 <USBH_SetAddress>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 809e 	bne.w	80065b2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006476:	2002      	movs	r0, #2
 8006478:	f001 f9ed 	bl	8007856 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2203      	movs	r2, #3
 8006488:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7919      	ldrb	r1, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800649e:	b292      	uxth	r2, r2
 80064a0:	9202      	str	r2, [sp, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	9201      	str	r2, [sp, #4]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4603      	mov	r3, r0
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fe91 	bl	80071d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7959      	ldrb	r1, [r3, #5]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80064c6:	b292      	uxth	r2, r2
 80064c8:	9202      	str	r2, [sp, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	9201      	str	r2, [sp, #4]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4603      	mov	r3, r0
 80064d2:	2200      	movs	r2, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fe7d 	bl	80071d4 <USBH_OpenPipe>
    }
    break;
 80064da:	e06a      	b.n	80065b2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80064dc:	2109      	movs	r1, #9
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f955 	bl	800678e <USBH_Get_CfgDesc>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d165      	bne.n	80065b6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	705a      	strb	r2, [r3, #1]
    }
    break;
 80064f0:	e061      	b.n	80065b6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f947 	bl	800678e <USBH_Get_CfgDesc>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d159      	bne.n	80065ba <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2205      	movs	r2, #5
 800650a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800650c:	e055      	b.n	80065ba <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006524:	23ff      	movs	r3, #255	; 0xff
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f955 	bl	80067d6 <USBH_Get_StringDesc>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d145      	bne.n	80065be <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2206      	movs	r2, #6
 8006536:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006538:	e041      	b.n	80065be <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2206      	movs	r2, #6
 800653e:	705a      	strb	r2, [r3, #1]
    break;
 8006540:	e03d      	b.n	80065be <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006548:	2b00      	cmp	r3, #0
 800654a:	d010      	beq.n	800656e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006558:	23ff      	movs	r3, #255	; 0xff
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f93b 	bl	80067d6 <USBH_Get_StringDesc>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d12d      	bne.n	80065c2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2207      	movs	r2, #7
 800656a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800656c:	e029      	b.n	80065c2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2207      	movs	r2, #7
 8006572:	705a      	strb	r2, [r3, #1]
    break;
 8006574:	e025      	b.n	80065c2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00f      	beq.n	80065a0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800658c:	23ff      	movs	r3, #255	; 0xff
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f921 	bl	80067d6 <USBH_Get_StringDesc>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d115      	bne.n	80065c6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800659e:	e012      	b.n	80065c6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73fb      	strb	r3, [r7, #15]
    break;
 80065a4:	e00f      	b.n	80065c6 <USBH_HandleEnum+0x226>

  default:
    break;
 80065a6:	bf00      	nop
 80065a8:	e00e      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065aa:	bf00      	nop
 80065ac:	e00c      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065ae:	bf00      	nop
 80065b0:	e00a      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065b2:	bf00      	nop
 80065b4:	e008      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065b6:	bf00      	nop
 80065b8:	e006      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065ba:	bf00      	nop
 80065bc:	e004      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065be:	bf00      	nop
 80065c0:	e002      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065c2:	bf00      	nop
 80065c4:	e000      	b.n	80065c8 <USBH_HandleEnum+0x228>
    break;
 80065c6:	bf00      	nop
  }
  return Status;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop

080065d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f804 	bl	8006616 <USBH_HandleSof>
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b0b      	cmp	r3, #11
 8006626:	d10a      	bne.n	800663e <USBH_HandleSof+0x28>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
  }
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006656:	bf00      	nop
}
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006672:	bf00      	nop
}
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066c2:	2104      	movs	r1, #4
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e007      	b.n	80066da <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d102      	bne.n	80066da <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 ff68 	bl	80075c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	791b      	ldrb	r3, [r3, #4]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fdb8 	bl	800726e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	795b      	ldrb	r3, [r3, #5]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdb2 	bl	800726e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006722:	2105      	movs	r1, #5
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 ff2f 	bl	800758c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2203      	movs	r2, #3
 8006732:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af02      	add	r7, sp, #8
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	b29b      	uxth	r3, r3
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800675c:	2100      	movs	r1, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f864 	bl	800682c <USBH_GetDescriptor>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	b292      	uxth	r2, r2
 800677e:	4619      	mov	r1, r3
 8006780:	f000 f918 	bl	80069b4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af02      	add	r7, sp, #8
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	331c      	adds	r3, #28
 800679e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80067a0:	887b      	ldrh	r3, [r7, #2]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f83d 	bl	800682c <USBH_GetDescriptor>
 80067b2:	4603      	mov	r3, r0
 80067b4:	72fb      	strb	r3, [r7, #11]
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d107      	bne.n	80067cc <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	68f9      	ldr	r1, [r7, #12]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f964 	bl	8006a94 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	461a      	mov	r2, r3
 80067e2:	460b      	mov	r3, r1
 80067e4:	72fb      	strb	r3, [r7, #11]
 80067e6:	4613      	mov	r3, r2
 80067e8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067f2:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	460b      	mov	r3, r1
 8006800:	2100      	movs	r1, #0
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f812 	bl	800682c <USBH_GetDescriptor>
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006818:	893a      	ldrh	r2, [r7, #8]
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fa37 	bl	8006c90 <USBH_ParseStringDesc>
  }
  return status;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	72fb      	strb	r3, [r7, #11]
 800683a:	4613      	mov	r3, r2
 800683c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	789b      	ldrb	r3, [r3, #2]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d11c      	bne.n	8006880 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2206      	movs	r2, #6
 8006856:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	893a      	ldrh	r2, [r7, #8]
 800685c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800685e:	893b      	ldrh	r3, [r7, #8]
 8006860:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006868:	d104      	bne.n	8006874 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f240 4209 	movw	r2, #1033	; 0x409
 8006870:	829a      	strh	r2, [r3, #20]
 8006872:	e002      	b.n	800687a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8b3a      	ldrh	r2, [r7, #24]
 800687e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006880:	8b3b      	ldrh	r3, [r7, #24]
 8006882:	461a      	mov	r2, r3
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fa50 	bl	8006d2c <USBH_CtlReq>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d10f      	bne.n	80068ca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2205      	movs	r2, #5
 80068b4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa2c 	bl	8006d2c <USBH_CtlReq>
 80068d4:	4603      	mov	r3, r0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	789b      	ldrb	r3, [r3, #2]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d10e      	bne.n	8006910 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2209      	movs	r2, #9
 80068fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	887a      	ldrh	r2, [r7, #2]
 8006902:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa09 	bl	8006d2c <USBH_CtlReq>
 800691a:	4603      	mov	r3, r0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d10f      	bne.n	8006958 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2203      	movs	r2, #3
 8006942:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9e5 	bl	8006d2c <USBH_CtlReq>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	789b      	ldrb	r3, [r3, #2]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10f      	bne.n	80069a0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9c1 	bl	8006d2c <USBH_CtlReq>
 80069aa:	4603      	mov	r3, r0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	785a      	ldrb	r2, [r3, #1]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3302      	adds	r3, #2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3303      	adds	r3, #3
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	791a      	ldrb	r2, [r3, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	795a      	ldrb	r2, [r3, #5]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	799a      	ldrb	r2, [r3, #6]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	79da      	ldrb	r2, [r3, #7]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d939      	bls.n	8006a88 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3308      	adds	r3, #8
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3309      	adds	r3, #9
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	330a      	adds	r3, #10
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	330b      	adds	r3, #11
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	330d      	adds	r3, #13
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4313      	orrs	r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	7b9a      	ldrb	r2, [r3, #14]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	7bda      	ldrb	r2, [r3, #15]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7c1a      	ldrb	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	7c5a      	ldrb	r2, [r3, #17]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	745a      	strb	r2, [r3, #17]
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	785a      	ldrb	r2, [r3, #1]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	3302      	adds	r3, #2
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	791a      	ldrb	r2, [r3, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	795a      	ldrb	r2, [r3, #5]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	799a      	ldrb	r2, [r3, #6]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	79da      	ldrb	r2, [r3, #7]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	7a1a      	ldrb	r2, [r3, #8]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d95f      	bls.n	8006bd0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b10:	2309      	movs	r3, #9
 8006b12:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b18:	e051      	b.n	8006bbe <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b1a:	f107 0316 	add.w	r3, r7, #22
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b22:	f000 f8e8 	bl	8006cf6 <USBH_GetNextDesc>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d146      	bne.n	8006bbe <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b34:	221a      	movs	r2, #26
 8006b36:	fb02 f303 	mul.w	r3, r2, r3
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	3302      	adds	r3, #2
 8006b42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b46:	69f8      	ldr	r0, [r7, #28]
 8006b48:	f000 f846 	bl	8006bd8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b56:	e022      	b.n	8006b9e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006b58:	f107 0316 	add.w	r3, r7, #22
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b60:	f000 f8c9 	bl	8006cf6 <USBH_GetNextDesc>
 8006b64:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d117      	bne.n	8006b9e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b72:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006b76:	3201      	adds	r2, #1
 8006b78:	00d2      	lsls	r2, r2, #3
 8006b7a:	211a      	movs	r1, #26
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	3308      	adds	r3, #8
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b8e:	69b8      	ldr	r0, [r7, #24]
 8006b90:	f000 f851 	bl	8006c36 <USBH_ParseEPDesc>
            ep_ix++;
 8006b94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d204      	bcs.n	8006bb4 <USBH_ParseCfgDesc+0x120>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	885a      	ldrh	r2, [r3, #2]
 8006bae:	8afb      	ldrh	r3, [r7, #22]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d8d1      	bhi.n	8006b58 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d804      	bhi.n	8006bd0 <USBH_ParseCfgDesc+0x13c>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	885a      	ldrh	r2, [r3, #2]
 8006bca:	8afb      	ldrh	r3, [r7, #22]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d8a4      	bhi.n	8006b1a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	3728      	adds	r7, #40	; 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785a      	ldrb	r2, [r3, #1]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	789a      	ldrb	r2, [r3, #2]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	78da      	ldrb	r2, [r3, #3]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	791a      	ldrb	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	795a      	ldrb	r2, [r3, #5]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	799a      	ldrb	r2, [r3, #6]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	79da      	ldrb	r2, [r3, #7]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	7a1a      	ldrb	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	721a      	strb	r2, [r3, #8]
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	785a      	ldrb	r2, [r3, #1]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	789a      	ldrb	r2, [r3, #2]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	78da      	ldrb	r2, [r3, #3]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3304      	adds	r3, #4
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3305      	adds	r3, #5
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4313      	orrs	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	799a      	ldrb	r2, [r3, #6]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	719a      	strb	r2, [r3, #6]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d120      	bne.n	8006cea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	1e9a      	subs	r2, r3, #2
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	bf28      	it	cs
 8006cb4:	4613      	movcs	r3, r2
 8006cb6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	82fb      	strh	r3, [r7, #22]
 8006cc2:	e00b      	b.n	8006cdc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006cd6:	8afb      	ldrh	r3, [r7, #22]
 8006cd8:	3302      	adds	r3, #2
 8006cda:	82fb      	strh	r3, [r7, #22]
 8006cdc:	8afa      	ldrh	r2, [r7, #22]
 8006cde:	8abb      	ldrh	r3, [r7, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3ef      	bcc.n	8006cc4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
  }
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	881a      	ldrh	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	789b      	ldrb	r3, [r3, #2]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d002      	beq.n	8006d4c <USBH_CtlReq+0x20>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d00f      	beq.n	8006d6a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006d4a:	e034      	b.n	8006db6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2202      	movs	r2, #2
 8006d62:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
    break;
 8006d68:	e025      	b.n	8006db6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f828 	bl	8006dc0 <USBH_HandleControl>
 8006d70:	4603      	mov	r3, r0
 8006d72:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]
    break;
 8006d8a:	e013      	b.n	8006db4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d108      	bne.n	8006da4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
    break;
 8006da2:	e007      	b.n	8006db4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d104      	bne.n	8006db4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006db0:	2302      	movs	r3, #2
 8006db2:	75fb      	strb	r3, [r7, #23]
    break;
 8006db4:	bf00      	nop
  }
  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7e1b      	ldrb	r3, [r3, #24]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	2b0a      	cmp	r3, #10
 8006dd8:	f200 814c 	bhi.w	8007074 <USBH_HandleControl+0x2b4>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USBH_HandleControl+0x24>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e2b 	.word	0x08006e2b
 8006dec:	08006e95 	.word	0x08006e95
 8006df0:	08006ebb 	.word	0x08006ebb
 8006df4:	08006ef3 	.word	0x08006ef3
 8006df8:	08006f1f 	.word	0x08006f1f
 8006dfc:	08006f71 	.word	0x08006f71
 8006e00:	08006f93 	.word	0x08006f93
 8006e04:	08006fcf 	.word	0x08006fcf
 8006e08:	08006ff7 	.word	0x08006ff7
 8006e0c:	08007035 	.word	0x08007035
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f103 0110 	add.w	r1, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	795b      	ldrb	r3, [r3, #5]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f939 	bl	8007094 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	761a      	strb	r2, [r3, #24]
    break;
 8006e28:	e12f      	b.n	800708a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	795b      	ldrb	r3, [r3, #5]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fcb3 	bl	800779c <USBH_LL_GetURBState>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d11e      	bne.n	8006e7e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7c1b      	ldrb	r3, [r3, #16]
 8006e44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e48:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	8adb      	ldrh	r3, [r3, #22]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006e52:	7b7b      	ldrb	r3, [r7, #13]
 8006e54:	2b80      	cmp	r3, #128	; 0x80
 8006e56:	d103      	bne.n	8006e60 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e5e:	e10b      	b.n	8007078 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2205      	movs	r2, #5
 8006e64:	761a      	strb	r2, [r3, #24]
    break;
 8006e66:	e107      	b.n	8007078 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006e68:	7b7b      	ldrb	r3, [r7, #13]
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d103      	bne.n	8006e76 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2209      	movs	r2, #9
 8006e72:	761a      	strb	r2, [r3, #24]
    break;
 8006e74:	e100      	b.n	8007078 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2207      	movs	r2, #7
 8006e7a:	761a      	strb	r2, [r3, #24]
    break;
 8006e7c:	e0fc      	b.n	8007078 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d003      	beq.n	8006e8c <USBH_HandleControl+0xcc>
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	f040 80f6 	bne.w	8007078 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	220b      	movs	r2, #11
 8006e90:	761a      	strb	r2, [r3, #24]
    break;
 8006e92:	e0f1      	b.n	8007078 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6899      	ldr	r1, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	899a      	ldrh	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	791b      	ldrb	r3, [r3, #4]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f930 	bl	8007112 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	761a      	strb	r2, [r3, #24]
    break;
 8006eb8:	e0e7      	b.n	800708a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	791b      	ldrb	r3, [r3, #4]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc6b 	bl	800779c <USBH_LL_GetURBState>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d102      	bne.n	8006ed6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2209      	movs	r2, #9
 8006ed4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b05      	cmp	r3, #5
 8006eda:	d102      	bne.n	8006ee2 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006edc:	2303      	movs	r3, #3
 8006ede:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ee0:	e0cc      	b.n	800707c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	f040 80c9 	bne.w	800707c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220b      	movs	r2, #11
 8006eee:	761a      	strb	r2, [r3, #24]
    break;
 8006ef0:	e0c4      	b.n	800707c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6899      	ldr	r1, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	899a      	ldrh	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7958      	ldrb	r0, [r3, #5]
 8006efe:	2301      	movs	r3, #1
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4603      	mov	r3, r0
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8df 	bl	80070c8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2206      	movs	r2, #6
 8006f1a:	761a      	strb	r2, [r3, #24]
    break;
 8006f1c:	e0b5      	b.n	800708a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	795b      	ldrb	r3, [r3, #5]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc39 	bl	800779c <USBH_LL_GetURBState>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d103      	bne.n	8006f3c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2207      	movs	r2, #7
 8006f38:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f3a:	e0a1      	b.n	8007080 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	d105      	bne.n	8006f4e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	220c      	movs	r2, #12
 8006f46:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4c:	e098      	b.n	8007080 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d103      	bne.n	8006f5c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2205      	movs	r2, #5
 8006f58:	761a      	strb	r2, [r3, #24]
    break;
 8006f5a:	e091      	b.n	8007080 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	f040 808e 	bne.w	8007080 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220b      	movs	r2, #11
 8006f68:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6e:	e087      	b.n	8007080 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8ca 	bl	8007112 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	761a      	strb	r2, [r3, #24]

    break;
 8006f90:	e07b      	b.n	800708a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fbff 	bl	800779c <USBH_LL_GetURBState>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d105      	bne.n	8006fb4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220d      	movs	r2, #13
 8006fac:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006fb2:	e067      	b.n	8007084 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d103      	bne.n	8006fc2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	220b      	movs	r2, #11
 8006fbe:	761a      	strb	r2, [r3, #24]
    break;
 8006fc0:	e060      	b.n	8007084 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d15d      	bne.n	8007084 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	73fb      	strb	r3, [r7, #15]
    break;
 8006fcc:	e05a      	b.n	8007084 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	795a      	ldrb	r2, [r3, #5]
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2100      	movs	r1, #0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f873 	bl	80070c8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	761a      	strb	r2, [r3, #24]
    break;
 8006ff4:	e049      	b.n	800708a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	795b      	ldrb	r3, [r3, #5]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fbcd 	bl	800779c <USBH_LL_GetURBState>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d105      	bne.n	8007018 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	220d      	movs	r2, #13
 8007014:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007016:	e037      	b.n	8007088 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d103      	bne.n	8007026 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2209      	movs	r2, #9
 8007022:	761a      	strb	r2, [r3, #24]
    break;
 8007024:	e030      	b.n	8007088 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d12d      	bne.n	8007088 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	220b      	movs	r2, #11
 8007030:	761a      	strb	r2, [r3, #24]
    break;
 8007032:	e029      	b.n	8007088 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7e5b      	ldrb	r3, [r3, #25]
 8007038:	3301      	adds	r3, #1
 800703a:	b2da      	uxtb	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	765a      	strb	r2, [r3, #25]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7e5b      	ldrb	r3, [r3, #25]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d809      	bhi.n	800705c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 faba 	bl	80075c2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800705a:	e016      	b.n	800708a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007062:	2106      	movs	r1, #6
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800706e:	2302      	movs	r3, #2
 8007070:	73fb      	strb	r3, [r7, #15]
    break;
 8007072:	e00a      	b.n	800708a <USBH_HandleControl+0x2ca>

  default:
    break;
 8007074:	bf00      	nop
 8007076:	e008      	b.n	800708a <USBH_HandleControl+0x2ca>
    break;
 8007078:	bf00      	nop
 800707a:	e006      	b.n	800708a <USBH_HandleControl+0x2ca>
    break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <USBH_HandleControl+0x2ca>
    break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <USBH_HandleControl+0x2ca>
    break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <USBH_HandleControl+0x2ca>
    break;
 8007088:	bf00      	nop
  }
  return status;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af04      	add	r7, sp, #16
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070a2:	79f9      	ldrb	r1, [r7, #7]
 80070a4:	2300      	movs	r3, #0
 80070a6:	9303      	str	r3, [sp, #12]
 80070a8:	2308      	movs	r3, #8
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	2300      	movs	r3, #0
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2200      	movs	r2, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fb3e 	bl	800773a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4611      	mov	r1, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	460b      	mov	r3, r1
 80070d8:	80fb      	strh	r3, [r7, #6]
 80070da:	4613      	mov	r3, r2
 80070dc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070ec:	7979      	ldrb	r1, [r7, #5]
 80070ee:	7e3b      	ldrb	r3, [r7, #24]
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	2301      	movs	r3, #1
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fb19 	bl	800773a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b088      	sub	sp, #32
 8007116:	af04      	add	r7, sp, #16
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	4611      	mov	r1, r2
 800711e:	461a      	mov	r2, r3
 8007120:	460b      	mov	r3, r1
 8007122:	80fb      	strh	r3, [r7, #6]
 8007124:	4613      	mov	r3, r2
 8007126:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007128:	7979      	ldrb	r1, [r7, #5]
 800712a:	2300      	movs	r3, #0
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	2301      	movs	r3, #1
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2300      	movs	r3, #0
 800713c:	2201      	movs	r2, #1
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fafb 	bl	800773a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007144:	2300      	movs	r3, #0

}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b088      	sub	sp, #32
 8007152:	af04      	add	r7, sp, #16
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	4611      	mov	r1, r2
 800715a:	461a      	mov	r2, r3
 800715c:	460b      	mov	r3, r1
 800715e:	80fb      	strh	r3, [r7, #6]
 8007160:	4613      	mov	r3, r2
 8007162:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007172:	7979      	ldrb	r1, [r7, #5]
 8007174:	7e3b      	ldrb	r3, [r7, #24]
 8007176:	9303      	str	r3, [sp, #12]
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	9302      	str	r3, [sp, #8]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	2301      	movs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2302      	movs	r3, #2
 8007186:	2200      	movs	r2, #0
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fad6 	bl	800773a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af04      	add	r7, sp, #16
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	80fb      	strh	r3, [r7, #6]
 80071aa:	4613      	mov	r3, r2
 80071ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071ae:	7979      	ldrb	r1, [r7, #5]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	2301      	movs	r3, #1
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2302      	movs	r3, #2
 80071c2:	2201      	movs	r2, #1
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fab8 	bl	800773a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af04      	add	r7, sp, #16
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	70fb      	strb	r3, [r7, #3]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70bb      	strb	r3, [r7, #2]
 80071ea:	4613      	mov	r3, r2
 80071ec:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80071ee:	7878      	ldrb	r0, [r7, #1]
 80071f0:	78ba      	ldrb	r2, [r7, #2]
 80071f2:	78f9      	ldrb	r1, [r7, #3]
 80071f4:	8b3b      	ldrh	r3, [r7, #24]
 80071f6:	9302      	str	r3, [sp, #8]
 80071f8:	7d3b      	ldrb	r3, [r7, #20]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	7c3b      	ldrb	r3, [r7, #16]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4603      	mov	r3, r0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa4b 	bl	800769e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007208:	2300      	movs	r3, #0

}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa6a 	bl	80076fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007228:	2300      	movs	r3, #0

}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f831 	bl	80072a6 <USBH_GetFreePipe>
 8007244:	4603      	mov	r3, r0
 8007246:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	89fa      	ldrh	r2, [r7, #14]
 8007256:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32e0      	adds	r2, #224	; 0xe0
 800725e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007262:	89fb      	ldrh	r3, [r7, #14]
 8007264:	b2db      	uxtb	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b0a      	cmp	r3, #10
 800727e:	d80b      	bhi.n	8007298 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32e0      	adds	r2, #224	; 0xe0
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32e0      	adds	r2, #224	; 0xe0
 8007294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e00e      	b.n	80072d6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80072b8:	7bfa      	ldrb	r2, [r7, #15]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32e0      	adds	r2, #224	; 0xe0
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	e007      	b.n	80072e0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	3301      	adds	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b0a      	cmp	r3, #10
 80072da:	d9ed      	bls.n	80072b8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80072dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80072f0:	2201      	movs	r2, #1
 80072f2:	490e      	ldr	r1, [pc, #56]	; (800732c <MX_USB_HOST_Init+0x40>)
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <MX_USB_HOST_Init+0x44>)
 80072f6:	f7fe fdbb 	bl	8005e70 <USBH_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007300:	f7f9 fd2c 	bl	8000d5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007304:	490b      	ldr	r1, [pc, #44]	; (8007334 <MX_USB_HOST_Init+0x48>)
 8007306:	480a      	ldr	r0, [pc, #40]	; (8007330 <MX_USB_HOST_Init+0x44>)
 8007308:	f7fe fe25 	bl	8005f56 <USBH_RegisterClass>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007312:	f7f9 fd23 	bl	8000d5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007316:	4806      	ldr	r0, [pc, #24]	; (8007330 <MX_USB_HOST_Init+0x44>)
 8007318:	f7fe feaa 	bl	8006070 <USBH_Start>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007322:	f7f9 fd1b 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	0800734d 	.word	0x0800734d
 8007330:	20000288 	.word	0x20000288
 8007334:	2000007c 	.word	0x2000007c

08007338 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800733c:	4802      	ldr	r0, [pc, #8]	; (8007348 <MX_USB_HOST_Process+0x10>)
 800733e:	f7fe fea7 	bl	8006090 <USBH_Process>
}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000288 	.word	0x20000288

0800734c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	3b01      	subs	r3, #1
 800735c:	2b04      	cmp	r3, #4
 800735e:	d819      	bhi.n	8007394 <USBH_UserProcess+0x48>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <USBH_UserProcess+0x1c>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	08007395 	.word	0x08007395
 800736c:	08007385 	.word	0x08007385
 8007370:	08007395 	.word	0x08007395
 8007374:	0800738d 	.word	0x0800738d
 8007378:	0800737d 	.word	0x0800737d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <USBH_UserProcess+0x58>)
 800737e:	2203      	movs	r2, #3
 8007380:	701a      	strb	r2, [r3, #0]
  break;
 8007382:	e008      	b.n	8007396 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <USBH_UserProcess+0x58>)
 8007386:	2202      	movs	r2, #2
 8007388:	701a      	strb	r2, [r3, #0]
  break;
 800738a:	e004      	b.n	8007396 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <USBH_UserProcess+0x58>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
  break;
 8007392:	e000      	b.n	8007396 <USBH_UserProcess+0x4a>

  default:
  break;
 8007394:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	2000013c 	.word	0x2000013c

080073a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	; 0x28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c8:	d147      	bne.n	800745a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	4b25      	ldr	r3, [pc, #148]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	4a24      	ldr	r2, [pc, #144]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	6313      	str	r3, [r2, #48]	; 0x30
 80073da:	4b22      	ldr	r3, [pc, #136]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80073e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	4619      	mov	r1, r3
 80073fa:	481b      	ldr	r0, [pc, #108]	; (8007468 <HAL_HCD_MspInit+0xc0>)
 80073fc:	f7fa f886 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007400:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007406:	2302      	movs	r3, #2
 8007408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800740e:	2303      	movs	r3, #3
 8007410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007412:	230a      	movs	r3, #10
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	4619      	mov	r1, r3
 800741c:	4812      	ldr	r0, [pc, #72]	; (8007468 <HAL_HCD_MspInit+0xc0>)
 800741e:	f7fa f875 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007422:	4b10      	ldr	r3, [pc, #64]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	4a0f      	ldr	r2, [pc, #60]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	6353      	str	r3, [r2, #52]	; 0x34
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	4a0b      	ldr	r2, [pc, #44]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 8007438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800743c:	6453      	str	r3, [r2, #68]	; 0x44
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <HAL_HCD_MspInit+0xbc>)
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	2043      	movs	r0, #67	; 0x43
 8007450:	f7fa f825 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007454:	2043      	movs	r0, #67	; 0x43
 8007456:	f7fa f83e 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800745a:	bf00      	nop
 800745c:	3728      	adds	r7, #40	; 0x28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800
 8007468:	40020000 	.word	0x40020000

0800746c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f8b9 	bl	80065f2 <USBH_LL_IncTimer>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff f8fe 	bl	8006698 <USBH_LL_Connect>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f916 	bl	80066e4 <USBH_LL_Disconnect>
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
 80074cc:	4613      	mov	r3, r2
 80074ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff f8ab 	bl	8006646 <USBH_LL_PortEnabled>
} 
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff f8ab 	bl	8006662 <USBH_LL_PortDisabled>
} 
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d12a      	bne.n	800757c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <USBH_LL_Init+0x74>)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <USBH_LL_Init+0x74>)
 8007532:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <USBH_LL_Init+0x74>)
 8007538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800753c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800753e:	4b12      	ldr	r3, [pc, #72]	; (8007588 <USBH_LL_Init+0x74>)
 8007540:	2208      	movs	r2, #8
 8007542:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007544:	4b10      	ldr	r3, [pc, #64]	; (8007588 <USBH_LL_Init+0x74>)
 8007546:	2201      	movs	r2, #1
 8007548:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <USBH_LL_Init+0x74>)
 800754c:	2200      	movs	r2, #0
 800754e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007550:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <USBH_LL_Init+0x74>)
 8007552:	2202      	movs	r2, #2
 8007554:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <USBH_LL_Init+0x74>)
 8007558:	2200      	movs	r2, #0
 800755a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800755c:	480a      	ldr	r0, [pc, #40]	; (8007588 <USBH_LL_Init+0x74>)
 800755e:	f7fa f970 	bl	8001842 <HAL_HCD_Init>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007568:	f7f9 fbf8 	bl	8000d5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800756c:	4806      	ldr	r0, [pc, #24]	; (8007588 <USBH_LL_Init+0x74>)
 800756e:	f7fa fd6b 	bl	8002048 <HAL_HCD_GetCurrentFrame>
 8007572:	4603      	mov	r3, r0
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff f82c 	bl	80065d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000654 	.word	0x20000654

0800758c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fa fcd8 	bl	8001f58 <HAL_HCD_Start>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f95c 	bl	800786c <USBH_Get_USB_Status>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fa fce0 	bl	8001f9e <HAL_HCD_Stop>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f941 	bl	800786c <USBH_Get_USB_Status>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fa fd2a 	bl	8002064 <HAL_HCD_GetCurrentSpeed>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d007      	beq.n	8007626 <USBH_LL_GetSpeed+0x2e>
 8007616:	2b01      	cmp	r3, #1
 8007618:	d302      	bcc.n	8007620 <USBH_LL_GetSpeed+0x28>
 800761a:	2b02      	cmp	r3, #2
 800761c:	d006      	beq.n	800762c <USBH_LL_GetSpeed+0x34>
 800761e:	e008      	b.n	8007632 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
    break;
 8007624:	e008      	b.n	8007638 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
    break;
 800762a:	e005      	b.n	8007638 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800762c:	2302      	movs	r3, #2
 800762e:	73fb      	strb	r3, [r7, #15]
    break;
 8007630:	e002      	b.n	8007638 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007632:	2301      	movs	r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]
    break;
 8007636:	bf00      	nop
  }
  return  speed;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007658:	4618      	mov	r0, r3
 800765a:	f7fa fcbd 	bl	8001fd8 <HAL_HCD_ResetPort>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 f901 	bl	800786c <USBH_Get_USB_Status>
 800766a:	4603      	mov	r3, r0
 800766c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800766e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa fcc5 	bl	800201e <HAL_HCD_HC_GetXferCount>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800769e:	b590      	push	{r4, r7, lr}
 80076a0:	b089      	sub	sp, #36	; 0x24
 80076a2:	af04      	add	r7, sp, #16
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	4603      	mov	r3, r0
 80076ae:	70fb      	strb	r3, [r7, #3]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70bb      	strb	r3, [r7, #2]
 80076b4:	4613      	mov	r3, r2
 80076b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80076c6:	787c      	ldrb	r4, [r7, #1]
 80076c8:	78ba      	ldrb	r2, [r7, #2]
 80076ca:	78f9      	ldrb	r1, [r7, #3]
 80076cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4623      	mov	r3, r4
 80076de:	f7fa f912 	bl	8001906 <HAL_HCD_HC_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f8bf 	bl	800786c <USBH_Get_USB_Status>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd90      	pop	{r4, r7, pc}

080076fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7fa f98b 	bl	8001a36 <HAL_HCD_HC_Halt>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f8a0 	bl	800786c <USBH_Get_USB_Status>
 800772c:	4603      	mov	r3, r0
 800772e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007730:	7bbb      	ldrb	r3, [r7, #14]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800773a:	b590      	push	{r4, r7, lr}
 800773c:	b089      	sub	sp, #36	; 0x24
 800773e:	af04      	add	r7, sp, #16
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	4608      	mov	r0, r1
 8007744:	4611      	mov	r1, r2
 8007746:	461a      	mov	r2, r3
 8007748:	4603      	mov	r3, r0
 800774a:	70fb      	strb	r3, [r7, #3]
 800774c:	460b      	mov	r3, r1
 800774e:	70bb      	strb	r3, [r7, #2]
 8007750:	4613      	mov	r3, r2
 8007752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007762:	787c      	ldrb	r4, [r7, #1]
 8007764:	78ba      	ldrb	r2, [r7, #2]
 8007766:	78f9      	ldrb	r1, [r7, #3]
 8007768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007770:	9302      	str	r3, [sp, #8]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4623      	mov	r3, r4
 800777e:	f7fa f97d 	bl	8001a7c <HAL_HCD_HC_SubmitRequest>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f86f 	bl	800786c <USBH_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007792:	7bbb      	ldrb	r3, [r7, #14]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}

0800779c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fa fc1e 	bl	8001ff4 <HAL_HCD_HC_GetURBState>
 80077b8:	4603      	mov	r3, r0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d103      	bne.n	80077e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f872 	bl	80078c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80077e0:	20c8      	movs	r0, #200	; 0xc8
 80077e2:	f7f9 fd5f 	bl	80012a4 <HAL_Delay>
  return USBH_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
 80077fc:	4613      	mov	r3, r2
 80077fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007806:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	440b      	add	r3, r1
 8007816:	333b      	adds	r3, #59	; 0x3b
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	440b      	add	r3, r1
 800782c:	3350      	adds	r3, #80	; 0x50
 800782e:	78ba      	ldrb	r2, [r7, #2]
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e009      	b.n	8007848 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	440b      	add	r3, r1
 8007842:	3351      	adds	r3, #81	; 0x51
 8007844:	78ba      	ldrb	r2, [r7, #2]
 8007846:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7f9 fd20 	bl	80012a4 <HAL_Delay>
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d817      	bhi.n	80078b0 <USBH_Get_USB_Status+0x44>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <USBH_Get_USB_Status+0x1c>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	08007899 	.word	0x08007899
 800788c:	0800789f 	.word	0x0800789f
 8007890:	080078a5 	.word	0x080078a5
 8007894:	080078ab 	.word	0x080078ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
    break;
 800789c:	e00b      	b.n	80078b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800789e:	2302      	movs	r3, #2
 80078a0:	73fb      	strb	r3, [r7, #15]
    break;
 80078a2:	e008      	b.n	80078b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
    break;
 80078a8:	e005      	b.n	80078b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80078aa:	2302      	movs	r3, #2
 80078ac:	73fb      	strb	r3, [r7, #15]
    break;
 80078ae:	e002      	b.n	80078b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80078b0:	2302      	movs	r3, #2
 80078b2:	73fb      	strb	r3, [r7, #15]
    break;
 80078b4:	bf00      	nop
  }
  return usb_status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
 80078dc:	e001      	b.n	80078e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80078de:	2300      	movs	r3, #0
 80078e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	461a      	mov	r2, r3
 80078e6:	2101      	movs	r1, #1
 80078e8:	4803      	ldr	r0, [pc, #12]	; (80078f8 <MX_DriverVbusFS+0x34>)
 80078ea:	f7f9 ff91 	bl	8001810 <HAL_GPIO_WritePin>
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40020800 	.word	0x40020800

080078fc <__errno>:
 80078fc:	4b01      	ldr	r3, [pc, #4]	; (8007904 <__errno+0x8>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	2000009c 	.word	0x2000009c

08007908 <__libc_init_array>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4e0d      	ldr	r6, [pc, #52]	; (8007940 <__libc_init_array+0x38>)
 800790c:	4c0d      	ldr	r4, [pc, #52]	; (8007944 <__libc_init_array+0x3c>)
 800790e:	1ba4      	subs	r4, r4, r6
 8007910:	10a4      	asrs	r4, r4, #2
 8007912:	2500      	movs	r5, #0
 8007914:	42a5      	cmp	r5, r4
 8007916:	d109      	bne.n	800792c <__libc_init_array+0x24>
 8007918:	4e0b      	ldr	r6, [pc, #44]	; (8007948 <__libc_init_array+0x40>)
 800791a:	4c0c      	ldr	r4, [pc, #48]	; (800794c <__libc_init_array+0x44>)
 800791c:	f000 f976 	bl	8007c0c <_init>
 8007920:	1ba4      	subs	r4, r4, r6
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	2500      	movs	r5, #0
 8007926:	42a5      	cmp	r5, r4
 8007928:	d105      	bne.n	8007936 <__libc_init_array+0x2e>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007930:	4798      	blx	r3
 8007932:	3501      	adds	r5, #1
 8007934:	e7ee      	b.n	8007914 <__libc_init_array+0xc>
 8007936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800793a:	4798      	blx	r3
 800793c:	3501      	adds	r5, #1
 800793e:	e7f2      	b.n	8007926 <__libc_init_array+0x1e>
 8007940:	08007c48 	.word	0x08007c48
 8007944:	08007c48 	.word	0x08007c48
 8007948:	08007c48 	.word	0x08007c48
 800794c:	08007c4c 	.word	0x08007c4c

08007950 <malloc>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <malloc+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f000 b861 	b.w	8007a1c <_malloc_r>
 800795a:	bf00      	nop
 800795c:	2000009c 	.word	0x2000009c

08007960 <free>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <free+0xc>)
 8007962:	4601      	mov	r1, r0
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f000 b80b 	b.w	8007980 <_free_r>
 800796a:	bf00      	nop
 800796c:	2000009c 	.word	0x2000009c

08007970 <memset>:
 8007970:	4402      	add	r2, r0
 8007972:	4603      	mov	r3, r0
 8007974:	4293      	cmp	r3, r2
 8007976:	d100      	bne.n	800797a <memset+0xa>
 8007978:	4770      	bx	lr
 800797a:	f803 1b01 	strb.w	r1, [r3], #1
 800797e:	e7f9      	b.n	8007974 <memset+0x4>

08007980 <_free_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4605      	mov	r5, r0
 8007984:	2900      	cmp	r1, #0
 8007986:	d045      	beq.n	8007a14 <_free_r+0x94>
 8007988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798c:	1f0c      	subs	r4, r1, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfb8      	it	lt
 8007992:	18e4      	addlt	r4, r4, r3
 8007994:	f000 f930 	bl	8007bf8 <__malloc_lock>
 8007998:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <_free_r+0x98>)
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	4610      	mov	r0, r2
 800799e:	b933      	cbnz	r3, 80079ae <_free_r+0x2e>
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	6014      	str	r4, [r2, #0]
 80079a4:	4628      	mov	r0, r5
 80079a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079aa:	f000 b926 	b.w	8007bfa <__malloc_unlock>
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	d90c      	bls.n	80079cc <_free_r+0x4c>
 80079b2:	6821      	ldr	r1, [r4, #0]
 80079b4:	1862      	adds	r2, r4, r1
 80079b6:	4293      	cmp	r3, r2
 80079b8:	bf04      	itt	eq
 80079ba:	681a      	ldreq	r2, [r3, #0]
 80079bc:	685b      	ldreq	r3, [r3, #4]
 80079be:	6063      	str	r3, [r4, #4]
 80079c0:	bf04      	itt	eq
 80079c2:	1852      	addeq	r2, r2, r1
 80079c4:	6022      	streq	r2, [r4, #0]
 80079c6:	6004      	str	r4, [r0, #0]
 80079c8:	e7ec      	b.n	80079a4 <_free_r+0x24>
 80079ca:	4613      	mov	r3, r2
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	b10a      	cbz	r2, 80079d4 <_free_r+0x54>
 80079d0:	42a2      	cmp	r2, r4
 80079d2:	d9fa      	bls.n	80079ca <_free_r+0x4a>
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	1858      	adds	r0, r3, r1
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d10b      	bne.n	80079f4 <_free_r+0x74>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	4401      	add	r1, r0
 80079e0:	1858      	adds	r0, r3, r1
 80079e2:	4282      	cmp	r2, r0
 80079e4:	6019      	str	r1, [r3, #0]
 80079e6:	d1dd      	bne.n	80079a4 <_free_r+0x24>
 80079e8:	6810      	ldr	r0, [r2, #0]
 80079ea:	6852      	ldr	r2, [r2, #4]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	4401      	add	r1, r0
 80079f0:	6019      	str	r1, [r3, #0]
 80079f2:	e7d7      	b.n	80079a4 <_free_r+0x24>
 80079f4:	d902      	bls.n	80079fc <_free_r+0x7c>
 80079f6:	230c      	movs	r3, #12
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	e7d3      	b.n	80079a4 <_free_r+0x24>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	1821      	adds	r1, r4, r0
 8007a00:	428a      	cmp	r2, r1
 8007a02:	bf04      	itt	eq
 8007a04:	6811      	ldreq	r1, [r2, #0]
 8007a06:	6852      	ldreq	r2, [r2, #4]
 8007a08:	6062      	str	r2, [r4, #4]
 8007a0a:	bf04      	itt	eq
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	605c      	str	r4, [r3, #4]
 8007a12:	e7c7      	b.n	80079a4 <_free_r+0x24>
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	20000140 	.word	0x20000140

08007a1c <_malloc_r>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	1ccd      	adds	r5, r1, #3
 8007a20:	f025 0503 	bic.w	r5, r5, #3
 8007a24:	3508      	adds	r5, #8
 8007a26:	2d0c      	cmp	r5, #12
 8007a28:	bf38      	it	cc
 8007a2a:	250c      	movcc	r5, #12
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	4606      	mov	r6, r0
 8007a30:	db01      	blt.n	8007a36 <_malloc_r+0x1a>
 8007a32:	42a9      	cmp	r1, r5
 8007a34:	d903      	bls.n	8007a3e <_malloc_r+0x22>
 8007a36:	230c      	movs	r3, #12
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	f000 f8db 	bl	8007bf8 <__malloc_lock>
 8007a42:	4a21      	ldr	r2, [pc, #132]	; (8007ac8 <_malloc_r+0xac>)
 8007a44:	6814      	ldr	r4, [r2, #0]
 8007a46:	4621      	mov	r1, r4
 8007a48:	b991      	cbnz	r1, 8007a70 <_malloc_r+0x54>
 8007a4a:	4c20      	ldr	r4, [pc, #128]	; (8007acc <_malloc_r+0xb0>)
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	b91b      	cbnz	r3, 8007a58 <_malloc_r+0x3c>
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 f895 	bl	8007b80 <_sbrk_r>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 f890 	bl	8007b80 <_sbrk_r>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d124      	bne.n	8007aae <_malloc_r+0x92>
 8007a64:	230c      	movs	r3, #12
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 f8c6 	bl	8007bfa <__malloc_unlock>
 8007a6e:	e7e4      	b.n	8007a3a <_malloc_r+0x1e>
 8007a70:	680b      	ldr	r3, [r1, #0]
 8007a72:	1b5b      	subs	r3, r3, r5
 8007a74:	d418      	bmi.n	8007aa8 <_malloc_r+0x8c>
 8007a76:	2b0b      	cmp	r3, #11
 8007a78:	d90f      	bls.n	8007a9a <_malloc_r+0x7e>
 8007a7a:	600b      	str	r3, [r1, #0]
 8007a7c:	50cd      	str	r5, [r1, r3]
 8007a7e:	18cc      	adds	r4, r1, r3
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 f8ba 	bl	8007bfa <__malloc_unlock>
 8007a86:	f104 000b 	add.w	r0, r4, #11
 8007a8a:	1d23      	adds	r3, r4, #4
 8007a8c:	f020 0007 	bic.w	r0, r0, #7
 8007a90:	1ac3      	subs	r3, r0, r3
 8007a92:	d0d3      	beq.n	8007a3c <_malloc_r+0x20>
 8007a94:	425a      	negs	r2, r3
 8007a96:	50e2      	str	r2, [r4, r3]
 8007a98:	e7d0      	b.n	8007a3c <_malloc_r+0x20>
 8007a9a:	428c      	cmp	r4, r1
 8007a9c:	684b      	ldr	r3, [r1, #4]
 8007a9e:	bf16      	itet	ne
 8007aa0:	6063      	strne	r3, [r4, #4]
 8007aa2:	6013      	streq	r3, [r2, #0]
 8007aa4:	460c      	movne	r4, r1
 8007aa6:	e7eb      	b.n	8007a80 <_malloc_r+0x64>
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	6849      	ldr	r1, [r1, #4]
 8007aac:	e7cc      	b.n	8007a48 <_malloc_r+0x2c>
 8007aae:	1cc4      	adds	r4, r0, #3
 8007ab0:	f024 0403 	bic.w	r4, r4, #3
 8007ab4:	42a0      	cmp	r0, r4
 8007ab6:	d005      	beq.n	8007ac4 <_malloc_r+0xa8>
 8007ab8:	1a21      	subs	r1, r4, r0
 8007aba:	4630      	mov	r0, r6
 8007abc:	f000 f860 	bl	8007b80 <_sbrk_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d0cf      	beq.n	8007a64 <_malloc_r+0x48>
 8007ac4:	6025      	str	r5, [r4, #0]
 8007ac6:	e7db      	b.n	8007a80 <_malloc_r+0x64>
 8007ac8:	20000140 	.word	0x20000140
 8007acc:	20000144 	.word	0x20000144

08007ad0 <srand>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <srand+0x38>)
 8007ad4:	681c      	ldr	r4, [r3, #0]
 8007ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ad8:	4605      	mov	r5, r0
 8007ada:	b97b      	cbnz	r3, 8007afc <srand+0x2c>
 8007adc:	2018      	movs	r0, #24
 8007ade:	f7ff ff37 	bl	8007950 <malloc>
 8007ae2:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <srand+0x3c>)
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <srand+0x40>)
 8007ae6:	63a0      	str	r0, [r4, #56]	; 0x38
 8007ae8:	e9c0 2300 	strd	r2, r3, [r0]
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <srand+0x44>)
 8007aee:	6083      	str	r3, [r0, #8]
 8007af0:	230b      	movs	r3, #11
 8007af2:	8183      	strh	r3, [r0, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	2300      	movs	r3, #0
 8007af8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007afe:	2200      	movs	r2, #0
 8007b00:	611d      	str	r5, [r3, #16]
 8007b02:	615a      	str	r2, [r3, #20]
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	bf00      	nop
 8007b08:	2000009c 	.word	0x2000009c
 8007b0c:	abcd330e 	.word	0xabcd330e
 8007b10:	e66d1234 	.word	0xe66d1234
 8007b14:	0005deec 	.word	0x0005deec

08007b18 <rand>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <rand+0x50>)
 8007b1c:	681c      	ldr	r4, [r3, #0]
 8007b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b20:	b97b      	cbnz	r3, 8007b42 <rand+0x2a>
 8007b22:	2018      	movs	r0, #24
 8007b24:	f7ff ff14 	bl	8007950 <malloc>
 8007b28:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <rand+0x54>)
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <rand+0x58>)
 8007b2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8007b2e:	e9c0 2300 	strd	r2, r3, [r0]
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <rand+0x5c>)
 8007b34:	6083      	str	r3, [r0, #8]
 8007b36:	230b      	movs	r3, #11
 8007b38:	8183      	strh	r3, [r0, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007b42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b44:	480c      	ldr	r0, [pc, #48]	; (8007b78 <rand+0x60>)
 8007b46:	690a      	ldr	r2, [r1, #16]
 8007b48:	694b      	ldr	r3, [r1, #20]
 8007b4a:	4c0c      	ldr	r4, [pc, #48]	; (8007b7c <rand+0x64>)
 8007b4c:	4350      	muls	r0, r2
 8007b4e:	fb04 0003 	mla	r0, r4, r3, r0
 8007b52:	fba2 2304 	umull	r2, r3, r2, r4
 8007b56:	4403      	add	r3, r0
 8007b58:	1c54      	adds	r4, r2, #1
 8007b5a:	f143 0500 	adc.w	r5, r3, #0
 8007b5e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007b62:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	2000009c 	.word	0x2000009c
 8007b6c:	abcd330e 	.word	0xabcd330e
 8007b70:	e66d1234 	.word	0xe66d1234
 8007b74:	0005deec 	.word	0x0005deec
 8007b78:	5851f42d 	.word	0x5851f42d
 8007b7c:	4c957f2d 	.word	0x4c957f2d

08007b80 <_sbrk_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4c06      	ldr	r4, [pc, #24]	; (8007b9c <_sbrk_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4605      	mov	r5, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	f7f9 faac 	bl	80010e8 <_sbrk>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_sbrk_r+0x1a>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_sbrk_r+0x1a>
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20000918 	.word	0x20000918

08007ba0 <time>:
 8007ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <time+0x30>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4669      	mov	r1, sp
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	f000 f812 	bl	8007bd4 <_gettimeofday_r>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	da05      	bge.n	8007bc0 <time+0x20>
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	e9cd 2300 	strd	r2, r3, [sp]
 8007bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc4:	b10c      	cbz	r4, 8007bca <time+0x2a>
 8007bc6:	e9c4 0100 	strd	r0, r1, [r4]
 8007bca:	b004      	add	sp, #16
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000009c 	.word	0x2000009c

08007bd4 <_gettimeofday_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4c07      	ldr	r4, [pc, #28]	; (8007bf4 <_gettimeofday_r+0x20>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4605      	mov	r5, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	f000 f80b 	bl	8007bfc <_gettimeofday>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d102      	bne.n	8007bf0 <_gettimeofday_r+0x1c>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	b103      	cbz	r3, 8007bf0 <_gettimeofday_r+0x1c>
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000918 	.word	0x20000918

08007bf8 <__malloc_lock>:
 8007bf8:	4770      	bx	lr

08007bfa <__malloc_unlock>:
 8007bfa:	4770      	bx	lr

08007bfc <_gettimeofday>:
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <_gettimeofday+0xc>)
 8007bfe:	2258      	movs	r2, #88	; 0x58
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	4770      	bx	lr
 8007c08:	20000918 	.word	0x20000918

08007c0c <_init>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr

08007c18 <_fini>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr
