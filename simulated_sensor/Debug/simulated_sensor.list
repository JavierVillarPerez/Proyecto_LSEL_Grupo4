
simulated_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f34  08007f34  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f3c  08007f3c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000090  08007fd4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08007fd4  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195fc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037b5  00000000  00000000  000396bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  0003ce78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0003e080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198f5  00000000  00000000  0003f110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e71  00000000  00000000  00058a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092569  00000000  00000000  0006a876  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fcddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000fce5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f00 	.word	0x08007f00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007f00 	.word	0x08007f00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t sensor_value = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fd1b 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f82f 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9c7 	bl	800087c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f000 f903 	bl	80006f8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f2:	f000 f92f 	bl	8000754 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f6:	f000 f95b 	bl	80007b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fa:	f000 f989 	bl	8000810 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fe:	f007 f8fb 	bl	80076f8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000502:	f000 f8a5 	bl	8000650 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000506:	f007 f91d 	bl	8007744 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_GPIO_WritePin(Sensor_Supply_GPIO_Port, Sensor_Supply_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2102      	movs	r1, #2
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x68>)
 8000510:	f001 fb84 	bl	8001c1c <HAL_GPIO_WritePin>

    HAL_ADC_Start(&hadc1);
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x6c>)
 8000516:	f000 fdd9 	bl	80010cc <HAL_ADC_Start>
    HAL_Delay(2000);
 800051a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800051e:	f000 fd6f 	bl	8001000 <HAL_Delay>

    sensor_value = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
    sensor_value = HAL_ADC_GetValue(&hadc1);
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x6c>)
 8000528:	f000 fea9 	bl	800127e <HAL_ADC_GetValue>
 800052c:	6078      	str	r0, [r7, #4]

    HAL_ADC_Stop(&hadc1);
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x6c>)
 8000530:	f000 fe72 	bl	8001218 <HAL_ADC_Stop>

//    HAL_GPIO_WritePin(Sensor_Supply_GPIO_Port, Sensor_Supply_Pin, GPIO_PIN_RESET);

    HAL_Delay(5000);
 8000534:	f241 3088 	movw	r0, #5000	; 0x1388
 8000538:	f000 fd62 	bl	8001000 <HAL_Delay>
    MX_USB_HOST_Process();
 800053c:	e7e3      	b.n	8000506 <main+0x2e>
 800053e:	bf00      	nop
 8000540:	40020c00 	.word	0x40020c00
 8000544:	20000114 	.word	0x20000114

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09a      	sub	sp, #104	; 0x68
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f007 fc10 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <SystemClock_Config+0x100>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a30      	ldr	r2, [pc, #192]	; (8000648 <SystemClock_Config+0x100>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <SystemClock_Config+0x100>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SystemClock_Config+0x104>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a2a      	ldr	r2, [pc, #168]	; (800064c <SystemClock_Config+0x104>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0x104>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fd74 	bl	80040cc <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ea:	f000 fa21 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000608:	2103      	movs	r1, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f003 ffce 	bl	80045ac <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000616:	f000 fa0b 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800061a:	2301      	movs	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800061e:	23c8      	movs	r3, #200	; 0xc8
 8000620:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000622:	2305      	movs	r3, #5
 8000624:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f99a 	bl	8004968 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800063a:	f000 f9f9 	bl	8000a30 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3768      	adds	r7, #104	; 0x68
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_ADC1_Init+0xa0>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_ADC1_Init+0x9c>)
 800066a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000672:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x9c>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa4>)
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x9c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ADC1_Init+0x9c>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x9c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <MX_ADC1_Init+0x9c>)
 80006b4:	f000 fcc6 	bl	8001044 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006be:	f000 f9b7 	bl	8000a30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_ADC1_Init+0x9c>)
 80006d4:	f000 fde0 	bl	8001298 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006de:	f000 f9a7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000114 	.word	0x20000114
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f002 fef1 	bl	800351c <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f976 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000c0 	.word	0x200000c0
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2S2_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_I2S2_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_I2S2_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_I2S2_Init+0x50>)
 800077a:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_I2S2_Init+0x58>)
 800077c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2S2_Init+0x50>)
 800078c:	2201      	movs	r2, #1
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2S2_Init+0x50>)
 8000792:	f002 fffb 	bl	800378c <HAL_I2S_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f948 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001b4 	.word	0x200001b4
 80007a8:	40003800 	.word	0x40003800
 80007ac:	00017700 	.word	0x00017700

080007b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2S3_Init+0x54>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_I2S3_Init+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_I2S3_Init+0x5c>)
 80007da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2S3_Init+0x54>)
 80007f0:	f002 ffcc 	bl	800378c <HAL_I2S_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 f919 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001fc 	.word	0x200001fc
 8000808:	40003c00 	.word	0x40003c00
 800080c:	00017700 	.word	0x00017700

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI1_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI1_Init+0x64>)
 8000862:	f004 f9cf 	bl	8004c04 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f8e0 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000015c 	.word	0x2000015c
 8000878:	40013000 	.word	0x40013000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5f      	ldr	r2, [pc, #380]	; (8000a18 <MX_GPIO_Init+0x19c>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b59      	ldr	r3, [pc, #356]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a58      	ldr	r2, [pc, #352]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a51      	ldr	r2, [pc, #324]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a4a      	ldr	r2, [pc, #296]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <MX_GPIO_Init+0x19c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a43      	ldr	r2, [pc, #268]	; (8000a18 <MX_GPIO_Init+0x19c>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a3c      	ldr	r2, [pc, #240]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	4837      	ldr	r0, [pc, #220]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 8000940:	f001 f96c 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4835      	ldr	r0, [pc, #212]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 800094a:	f001 f967 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0112 	movw	r1, #61458	; 0xf012
 8000954:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x1a8>)
 8000956:	f001 f961 	bl	8001c1c <HAL_GPIO_WritePin>
                          |Sensor_Supply_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482b      	ldr	r0, [pc, #172]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 800096e:	f000 ffd3 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4824      	ldr	r0, [pc, #144]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 800098a:	f000 ffc5 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800098e:	2332      	movs	r3, #50	; 0x32
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x1ac>)
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481e      	ldr	r0, [pc, #120]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 80009a2:	f000 ffb9 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 80009be:	f000 ffab 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_GPIO_Init+0x1ac>)
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_GPIO_Init+0x1b0>)
 80009d6:	f000 ff9f 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Sensor_Supply_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009da:	f24f 0312 	movw	r3, #61458	; 0xf012
 80009de:	61fb      	str	r3, [r7, #28]
                          |Sensor_Supply_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_GPIO_Init+0x1a8>)
 80009f4:	f000 ff90 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_GPIO_Init+0x1a8>)
 8000a0c:	f000 ff84 	bl	8001918 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3730      	adds	r7, #48	; 0x30
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	10120000 	.word	0x10120000
 8000a2c:	40020000 	.word	0x40020000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 ff08 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_ADC_MspInit+0x7c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d127      	bne.n	8000b02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	2302      	movs	r3, #2
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_ADC_MspInit+0x84>)
 8000afe:	f000 ff0b 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40012000 	.word	0x40012000
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_I2C_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12c      	bne.n	8000b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5c:	2312      	movs	r3, #18
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_I2C_MspInit+0x8c>)
 8000b74:	f000 fed0 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a59      	ldr	r2, [pc, #356]	; (8000d2c <HAL_I2S_MspInit+0x184>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d15b      	bne.n	8000c82 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a57      	ldr	r2, [pc, #348]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a50      	ldr	r2, [pc, #320]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a49      	ldr	r2, [pc, #292]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	483e      	ldr	r0, [pc, #248]	; (8000d34 <HAL_I2S_MspInit+0x18c>)
 8000c3a:	f000 fe6d 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4836      	ldr	r0, [pc, #216]	; (8000d34 <HAL_I2S_MspInit+0x18c>)
 8000c5a:	f000 fe5d 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c70:	2305      	movs	r3, #5
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482f      	ldr	r0, [pc, #188]	; (8000d38 <HAL_I2S_MspInit+0x190>)
 8000c7c:	f000 fe4c 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c80:	e04f      	b.n	8000d22 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <HAL_I2S_MspInit+0x194>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d14a      	bne.n	8000d22 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_I2S_MspInit+0x188>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <HAL_I2S_MspInit+0x198>)
 8000cfc:	f000 fe0c 	bl	8001918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d00:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d12:	2306      	movs	r3, #6
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_I2S_MspInit+0x18c>)
 8000d1e:	f000 fdfb 	bl	8001918 <HAL_GPIO_Init>
}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	; 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40003800 	.word	0x40003800
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40003c00 	.word	0x40003c00
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_SPI_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_SPI_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d9e:	23e0      	movs	r3, #224	; 0xe0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dae:	2305      	movs	r3, #5
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_SPI_MspInit+0x8c>)
 8000dba:	f000 fdad 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f8ca 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f001 f98f 	bl	8002158 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000614 	.word	0x20000614

08000e44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x50>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x16>
		heap_end = &end;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <_sbrk+0x50>)
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <_sbrk+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_sbrk+0x50>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_sbrk+0x50>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	466a      	mov	r2, sp
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d907      	bls.n	8000e7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e6e:	f006 ff4b 	bl	8007d08 <__errno>
 8000e72:	4602      	mov	r2, r0
 8000e74:	230c      	movs	r3, #12
 8000e76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	e006      	b.n	8000e8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_sbrk+0x50>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <_sbrk+0x50>)
 8000e88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000ac 	.word	0x200000ac
 8000e98:	200008e0 	.word	0x200008e0

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SystemInit+0x28>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <SystemInit+0x28>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x28>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd3 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f006 ff0d 	bl	8007d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff faed 	bl	80004d8 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f04:	08007f44 	.word	0x08007f44
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f10:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f14:	200008dc 	.word	0x200008dc

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fca5 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd76 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fcbd 	bl	80018fe <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 fc85 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000244 	.word	0x20000244

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000244 	.word	0x20000244

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008

08001044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e033      	b.n	80010c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fd14 	bl	8000a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800108a:	f023 0302 	bic.w	r3, r3, #2
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fa30 	bl	80014fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
 80010b2:	e001      	b.n	80010b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Start+0x1a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e08a      	b.n	80011fc <HAL_ADC_Start+0x130>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d018      	beq.n	800112e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_ADC_Start+0x13c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_ADC_Start+0x140>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9a      	lsrs	r2, r3, #18
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001120:	e002      	b.n	8001128 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d15e      	bne.n	80011fa <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f023 0206 	bic.w	r2, r3, #6
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
 8001188:	e002      	b.n	8001190 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_ADC_Start+0x144>)
 800119a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10f      	bne.n	80011d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11c      	bne.n	80011fa <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e013      	b.n	80011fa <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_ADC_Start+0x148>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d10e      	bne.n	80011fa <HAL_ADC_Start+0x12e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000000 	.word	0x20000000
 800120c:	431bde83 	.word	0x431bde83
 8001210:	40012300 	.word	0x40012300
 8001214:	40012000 	.word	0x40012000

08001218 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Stop+0x16>
 800122a:	2302      	movs	r3, #2
 800122c:	e021      	b.n	8001272 <HAL_ADC_Stop+0x5a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1c>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e113      	b.n	80014dc <HAL_ADC_ConfigChannel+0x244>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d925      	bls.n	8001310 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	3b1e      	subs	r3, #30
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43da      	mvns	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	400a      	ands	r2, r1
 80012e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68d9      	ldr	r1, [r3, #12]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4403      	add	r3, r0
 8001302:	3b1e      	subs	r3, #30
 8001304:	409a      	lsls	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	e022      	b.n	8001356 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6919      	ldr	r1, [r3, #16]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	2207      	movs	r2, #7
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	400a      	ands	r2, r1
 8001332:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6919      	ldr	r1, [r3, #16]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4403      	add	r3, r0
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b06      	cmp	r3, #6
 800135c:	d824      	bhi.n	80013a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b05      	subs	r3, #5
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	400a      	ands	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b05      	subs	r3, #5
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	e04c      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d824      	bhi.n	80013fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b23      	subs	r3, #35	; 0x23
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43da      	mvns	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	400a      	ands	r2, r1
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b23      	subs	r3, #35	; 0x23
 80013ec:	fa00 f203 	lsl.w	r2, r0, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
 80013f8:	e023      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b41      	subs	r3, #65	; 0x41
 800140c:	221f      	movs	r2, #31
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b41      	subs	r3, #65	; 0x41
 8001436:	fa00 f203 	lsl.w	r2, r0, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_ADC_ConfigChannel+0x250>)
 8001444:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <HAL_ADC_ConfigChannel+0x254>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d10f      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1d8>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b12      	cmp	r3, #18
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_ADC_ConfigChannel+0x254>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x23a>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <HAL_ADC_ConfigChannel+0x258>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_ADC_ConfigChannel+0x1f4>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b11      	cmp	r3, #17
 800148a:	d122      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_ADC_ConfigChannel+0x258>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d111      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_ADC_ConfigChannel+0x25c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_ADC_ConfigChannel+0x260>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9a      	lsrs	r2, r3, #18
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40012300 	.word	0x40012300
 80014ec:	40012000 	.word	0x40012000
 80014f0:	10000012 	.word	0x10000012
 80014f4:	20000000 	.word	0x20000000
 80014f8:	431bde83 	.word	0x431bde83

080014fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001504:	4b79      	ldr	r3, [pc, #484]	; (80016ec <ADC_Init+0x1f0>)
 8001506:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	431a      	orrs	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6899      	ldr	r1, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <ADC_Init+0x1f4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e00f      	b.n	80015fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0202 	bic.w	r2, r2, #2
 8001608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e1b      	ldrb	r3, [r3, #24]
 8001614:	005a      	lsls	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001636:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	3b01      	subs	r3, #1
 8001654:	035a      	lsls	r2, r3, #13
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e007      	b.n	8001670 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	3b01      	subs	r3, #1
 800168c:	051a      	lsls	r2, r3, #20
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b2:	025a      	lsls	r2, r3, #9
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	029a      	lsls	r2, r3, #10
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40012300 	.word	0x40012300
 80016f0:	0f000001 	.word	0x0f000001

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff3e 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff31 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e159      	b.n	8001be8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8148 	bne.w	8001be2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d00b      	beq.n	8001972 <HAL_GPIO_Init+0x5a>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001966:	2b11      	cmp	r3, #17
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d130      	bne.n	80019d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 0201 	and.w	r2, r3, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0xfc>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a2 	beq.w	8001be2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a55      	ldr	r2, [pc, #340]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2ec>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x202>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x2f0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x1fe>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_GPIO_Init+0x2f4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x1fa>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_GPIO_Init+0x2f8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x1f6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_GPIO_Init+0x2fc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x1f2>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4934      	ldr	r1, [pc, #208]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f aea2 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c50:	b08f      	sub	sp, #60	; 0x3c
 8001c52:	af0a      	add	r7, sp, #40	; 0x28
 8001c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e054      	b.n	8001d0a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f005 fd9a 	bl	80077b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f886 	bl	8004db0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	687e      	ldr	r6, [r7, #4]
 8001cac:	466d      	mov	r5, sp
 8001cae:	f106 0410 	add.w	r4, r6, #16
 8001cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc2:	1d33      	adds	r3, r6, #4
 8001cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f003 f800 	bl	8004ccc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f87d 	bl	8004dd2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	687e      	ldr	r6, [r7, #4]
 8001ce0:	466d      	mov	r5, sp
 8001ce2:	f106 0410 	add.w	r4, r6, #16
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf6:	1d33      	adds	r3, r6, #4
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f003 f990 	bl	8005020 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d12 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b089      	sub	sp, #36	; 0x24
 8001d16:	af04      	add	r7, sp, #16
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	70fb      	strb	r3, [r7, #3]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70bb      	strb	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_HCD_HC_Init+0x28>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e07f      	b.n	8001e3a <HAL_HCD_HC_Init+0x128>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	333d      	adds	r3, #61	; 0x3d
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	3338      	adds	r3, #56	; 0x38
 8001d66:	787a      	ldrb	r2, [r7, #1]
 8001d68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3340      	adds	r3, #64	; 0x40
 8001d7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d7c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3339      	adds	r3, #57	; 0x39
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	333f      	adds	r3, #63	; 0x3f
 8001da2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	78bb      	ldrb	r3, [r7, #2]
 8001dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	333a      	adds	r3, #58	; 0x3a
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0a      	bge.n	8001de2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	333b      	adds	r3, #59	; 0x3b
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e009      	b.n	8001df6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	333b      	adds	r3, #59	; 0x3b
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	333c      	adds	r3, #60	; 0x3c
 8001e06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e0a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	787c      	ldrb	r4, [r7, #1]
 8001e12:	78ba      	ldrb	r2, [r7, #2]
 8001e14:	78f9      	ldrb	r1, [r7, #3]
 8001e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	f003 fa7c 	bl	8005324 <USB_HC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}

08001e42 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_HCD_HC_Halt+0x1e>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e00f      	b.n	8001e80 <HAL_HCD_HC_Halt+0x3e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fcb6 	bl	80057e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	70fb      	strb	r3, [r7, #3]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70bb      	strb	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	333b      	adds	r3, #59	; 0x3b
 8001eb2:	78ba      	ldrb	r2, [r7, #2]
 8001eb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333f      	adds	r3, #63	; 0x3f
 8001ec6:	787a      	ldrb	r2, [r7, #1]
 8001ec8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001eca:	7c3b      	ldrb	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	3342      	adds	r3, #66	; 0x42
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e009      	b.n	8001efa <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3342      	adds	r3, #66	; 0x42
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	f200 80d6 	bhi.w	80020ae <HAL_HCD_HC_SubmitRequest+0x226>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08002099 	.word	0x08002099
 8001f10:	08001f85 	.word	0x08001f85
 8001f14:	0800200f 	.word	0x0800200f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f18:	7c3b      	ldrb	r3, [r7, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	f040 80c9 	bne.w	80020b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001f20:	78bb      	ldrb	r3, [r7, #2]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80c5 	bne.w	80020b2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001f28:	8b3b      	ldrh	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3351      	adds	r3, #81	; 0x51
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	3351      	adds	r3, #81	; 0x51
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3342      	adds	r3, #66	; 0x42
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f6c:	e0a1      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3342      	adds	r3, #66	; 0x42
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
      break;
 8001f82:	e096      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f84:	78bb      	ldrb	r3, [r7, #2]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d120      	bne.n	8001fcc <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3351      	adds	r3, #81	; 0x51
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fb4:	e07e      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3342      	adds	r3, #66	; 0x42
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
      break;
 8001fca:	e073      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3350      	adds	r3, #80	; 0x50
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3342      	adds	r3, #66	; 0x42
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e05d      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	3342      	adds	r3, #66	; 0x42
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
      break;
 800200c:	e052      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800200e:	78bb      	ldrb	r3, [r7, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d120      	bne.n	8002056 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3351      	adds	r3, #81	; 0x51
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3342      	adds	r3, #66	; 0x42
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800203e:	e039      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	3342      	adds	r3, #66	; 0x42
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]
      break;
 8002054:	e02e      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3350      	adds	r3, #80	; 0x50
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	3342      	adds	r3, #66	; 0x42
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
      break;
 8002080:	e018      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3342      	adds	r3, #66	; 0x42
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
      break;
 8002096:	e00d      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3342      	adds	r3, #66	; 0x42
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
      break;
 80020ac:	e002      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80020b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3344      	adds	r3, #68	; 0x44
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	8b39      	ldrh	r1, [r7, #24]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4403      	add	r3, r0
 80020d8:	3348      	adds	r3, #72	; 0x48
 80020da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	334c      	adds	r3, #76	; 0x4c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3339      	adds	r3, #57	; 0x39
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335d      	adds	r3, #93	; 0x5d
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	3338      	adds	r3, #56	; 0x38
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	18d1      	adds	r1, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	f003 f9f6 	bl	8005538 <USB_HC_StartXfer>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop

08002158 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 ff13 	bl	8004f9a <USB_GetMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	f040 80f1 	bne.w	800235e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fef7 	bl	8004f74 <USB_ReadInterrupts>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80e7 	beq.w	800235c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f002 feee 	bl	8004f74 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021a2:	d104      	bne.n	80021ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fede 	bl	8004f74 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c2:	d104      	bne.n	80021ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fece 	bl	8004f74 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e2:	d104      	bne.n	80021ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 febe 	bl	8004f74 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d103      	bne.n	800220a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2202      	movs	r2, #2
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 feb0 	bl	8004f74 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800221e:	d117      	bne.n	8002250 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800222e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002232:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f005 fb3b 	bl	80078b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f002 ffa9 	bl	8005198 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800224e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fe8d 	bl	8004f74 <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d102      	bne.n	800226c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f001 f8c8 	bl	80033fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fe7f 	bl	8004f74 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b08      	cmp	r3, #8
 800227e:	d106      	bne.n	800228e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f005 faf9 	bl	8007878 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fe6e 	bl	8004f74 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022a2:	d138      	bne.n	8002316 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fa89 	bl	80057c0 <USB_HC_ReadInterrupt>
 80022ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e025      	b.n	8002302 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	fa22 f303 	lsr.w	r3, r2, r3
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e0:	d106      	bne.n	80022f0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8cf 	bl	800248c <HCD_HC_IN_IRQHandler>
 80022ee:	e005      	b.n	80022fc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fc5f 	bl	8002bba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3d4      	bcc.n	80022b6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fe2a 	bl	8004f74 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d101      	bne.n	800232e <HAL_HCD_IRQHandler+0x1d6>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_HCD_IRQHandler+0x1d8>
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d014      	beq.n	800235e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0210 	bic.w	r2, r2, #16
 8002342:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 ffad 	bl	80032a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0210 	orr.w	r2, r2, #16
 8002358:	619a      	str	r2, [r3, #24]
 800235a:	e000      	b.n	800235e <HAL_HCD_IRQHandler+0x206>
      return;
 800235c:	bf00      	nop
    }
  }
}
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_HCD_Start+0x16>
 8002376:	2302      	movs	r3, #2
 8002378:	e013      	b.n	80023a2 <HAL_HCD_Start+0x3e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fd01 	bl	8004d8e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f002 ff64 	bl	8005260 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_HCD_Stop+0x16>
 80023bc:	2302      	movs	r3, #2
 80023be:	e00d      	b.n	80023dc <HAL_HCD_Stop+0x32>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fb43 	bl	8005a58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 ff0b 	bl	800520c <USB_ResetPort>
 80023f6:	4603      	mov	r3, r0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	334c      	adds	r3, #76	; 0x4c
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 ff4d 	bl	8005300 <USB_GetCurrentFrame>
 8002466:	4603      	mov	r3, r0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f002 ff28 	bl	80052d2 <USB_GetHostSpeed>
 8002482:	4603      	mov	r3, r0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d119      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2304      	movs	r3, #4
 80024cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	60d3      	str	r3, [r2, #12]
 80024ee:	e095      	b.n	800261c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d109      	bne.n	800251a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2320      	movs	r3, #32
 8002516:	6093      	str	r3, [r2, #8]
 8002518:	e080      	b.n	800261c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d134      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	335d      	adds	r3, #93	; 0x5d
 8002560:	2205      	movs	r2, #5
 8002562:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2310      	movs	r3, #16
 8002574:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	2308      	movs	r3, #8
 8002586:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f925 	bl	80057e2 <USB_HC_Halt>
 8002598:	e040      	b.n	800261c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d134      	bne.n	800261c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f900 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	461a      	mov	r2, r3
 80025f0:	2310      	movs	r3, #16
 80025f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	335d      	adds	r3, #93	; 0x5d
 8002604:	2208      	movs	r2, #8
 8002606:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002632:	d122      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f8bf 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002676:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002678:	e29b      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 80c1 	bne.w	8002814 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01b      	beq.n	80026d2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3348      	adds	r3, #72	; 0x48
 80026aa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80026be:	1ad1      	subs	r1, r2, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4403      	add	r3, r0
 80026ce:	334c      	adds	r3, #76	; 0x4c
 80026d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	335d      	adds	r3, #93	; 0x5d
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3358      	adds	r3, #88	; 0x58
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	333f      	adds	r3, #63	; 0x3f
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	333f      	adds	r3, #63	; 0x3f
 8002732:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	d121      	bne.n	800277c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002752:	f043 0302 	orr.w	r3, r3, #2
 8002756:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 f83d 	bl	80057e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2310      	movs	r3, #16
 8002778:	6093      	str	r3, [r2, #8]
 800277a:	e034      	b.n	80027e6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	333f      	adds	r3, #63	; 0x3f
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d129      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	0151      	lsls	r1, r2, #5
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	440a      	add	r2, r1
 80027a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	335c      	adds	r3, #92	; 0x5c
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	b2d8      	uxtb	r0, r3
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	335c      	adds	r3, #92	; 0x5c
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4601      	mov	r1, r0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f005 f873 	bl	80078cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3350      	adds	r3, #80	; 0x50
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f083 0301 	eor.w	r3, r3, #1
 80027fc:	b2d8      	uxtb	r0, r3
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	3350      	adds	r3, #80	; 0x50
 800280e:	4602      	mov	r2, r0
 8002810:	701a      	strb	r2, [r3, #0]
}
 8002812:	e1ce      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	f040 80f1 	bne.w	8002a0e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	440a      	add	r2, r1
 8002842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002846:	f023 0302 	bic.w	r3, r3, #2
 800284a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	335d      	adds	r3, #93	; 0x5d
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10a      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	335c      	adds	r3, #92	; 0x5c
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e0b0      	b.n	80029da <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	335d      	adds	r3, #93	; 0x5d
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10a      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335c      	adds	r3, #92	; 0x5c
 800289e:	2205      	movs	r2, #5
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e09a      	b.n	80029da <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	335d      	adds	r3, #93	; 0x5d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d00a      	beq.n	80028d0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	335d      	adds	r3, #93	; 0x5d
 80028ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d156      	bne.n	800297e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3358      	adds	r3, #88	; 0x58
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4403      	add	r3, r0
 80028f2:	3358      	adds	r3, #88	; 0x58
 80028f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3358      	adds	r3, #88	; 0x58
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d914      	bls.n	8002936 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3358      	adds	r3, #88	; 0x58
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e009      	b.n	800294a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002960:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002968:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e02d      	b.n	80029da <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	335d      	adds	r3, #93	; 0x5d
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d122      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	335c      	adds	r3, #92	; 0x5c
 80029a4:	2202      	movs	r2, #2
 80029a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2302      	movs	r3, #2
 80029ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4601      	mov	r1, r0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f004 ff60 	bl	80078cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a0c:	e0d1      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d13e      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3358      	adds	r3, #88	; 0x58
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1c59      	adds	r1, r3, #1
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4403      	add	r3, r0
 8002a66:	3358      	adds	r3, #88	; 0x58
 8002a68:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	335d      	adds	r3, #93	; 0x5d
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 feaa 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	6093      	str	r3, [r2, #8]
}
 8002aa0:	e087      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d17c      	bne.n	8002bb2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333f      	adds	r3, #63	; 0x3f
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d122      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3358      	adds	r3, #88	; 0x58
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	0151      	lsls	r1, r2, #5
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	440a      	add	r2, r1
 8002af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fe68 	bl	80057e2 <USB_HC_Halt>
 8002b12:	e045      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	333f      	adds	r3, #63	; 0x3f
 8002b3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d12f      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3358      	adds	r3, #88	; 0x58
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d121      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335d      	adds	r3, #93	; 0x5d
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	0151      	lsls	r1, r2, #5
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	440a      	add	r2, r1
 8002b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fe21 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	6093      	str	r3, [r2, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d119      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	0151      	lsls	r1, r2, #5
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	440a      	add	r2, r1
 8002c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c1c:	e33e      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d141      	bne.n	8002cb8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2320      	movs	r3, #32
 8002c44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333d      	adds	r3, #61	; 0x3d
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 831f 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	333d      	adds	r3, #61	; 0x3d
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	335c      	adds	r3, #92	; 0x5c
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f002 fd96 	bl	80057e2 <USB_HC_Halt>
}
 8002cb6:	e2f1      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d13f      	bne.n	8002d4e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	335d      	adds	r3, #93	; 0x5d
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	333d      	adds	r3, #61	; 0x3d
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3358      	adds	r3, #88	; 0x58
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 fd54 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	e2a6      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d64:	d122      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fd26 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da8:	6093      	str	r3, [r2, #8]
}
 8002daa:	e277      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d135      	bne.n	8002e2e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3358      	adds	r3, #88	; 0x58
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fcee 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	2301      	movs	r3, #1
 8002e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	335d      	adds	r3, #93	; 0x5d
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
}
 8002e2c:	e236      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d12b      	bne.n	8002e9c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2308      	movs	r3, #8
 8002e54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fcae 	bl	80057e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	335d      	adds	r3, #93	; 0x5d
 8002e96:	2205      	movs	r2, #5
 8002e98:	701a      	strb	r2, [r3, #0]
}
 8002e9a:	e1ff      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d155      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3358      	adds	r3, #88	; 0x58
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	335d      	adds	r3, #93	; 0x5d
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333d      	adds	r3, #61	; 0x3d
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	333c      	adds	r3, #60	; 0x3c
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	333d      	adds	r3, #61	; 0x3d
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	0151      	lsls	r1, r2, #5
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	440a      	add	r2, r1
 8002f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fc4c 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2310      	movs	r3, #16
 8002f5a:	6093      	str	r3, [r2, #8]
}
 8002f5c:	e19e      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d12b      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fc1f 	bl	80057e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	335d      	adds	r3, #93	; 0x5d
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	6093      	str	r3, [r2, #8]
}
 8002fca:	e167      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d135      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fbe7 	bl	80057e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2310      	movs	r3, #16
 8003024:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003038:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	335d      	adds	r3, #93	; 0x5d
 800304a:	2208      	movs	r2, #8
 800304c:	701a      	strb	r2, [r3, #0]
}
 800304e:	e125      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	f040 811a 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	0151      	lsls	r1, r2, #5
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	440a      	add	r2, r1
 800307e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003082:	f023 0302 	bic.w	r3, r3, #2
 8003086:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	335d      	adds	r3, #93	; 0x5d
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d137      	bne.n	800310e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	333f      	adds	r3, #63	; 0x3f
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d00b      	beq.n	80030e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	333f      	adds	r3, #63	; 0x3f
 80030d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	f040 80c5 	bne.w	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3351      	adds	r3, #81	; 0x51
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	f083 0301 	eor.w	r3, r3, #1
 80030f6:	b2d8      	uxtb	r0, r3
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3351      	adds	r3, #81	; 0x51
 8003108:	4602      	mov	r2, r0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e0ad      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	335d      	adds	r3, #93	; 0x5d
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d10a      	bne.n	800313a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	335c      	adds	r3, #92	; 0x5c
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e097      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	335d      	adds	r3, #93	; 0x5d
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d10a      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e081      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	335d      	adds	r3, #93	; 0x5d
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d10a      	bne.n	8003192 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	2205      	movs	r2, #5
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e06b      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	335d      	adds	r3, #93	; 0x5d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d00a      	beq.n	80031be <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	335d      	adds	r3, #93	; 0x5d
 80031b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d155      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	3358      	adds	r3, #88	; 0x58
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4403      	add	r3, r0
 80031e0:	3358      	adds	r3, #88	; 0x58
 80031e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	3358      	adds	r3, #88	; 0x58
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d914      	bls.n	8003224 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	3358      	adds	r3, #88	; 0x58
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e009      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800324e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003256:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2302      	movs	r3, #2
 800327a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	335c      	adds	r3, #92	; 0x5c
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4601      	mov	r1, r0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f004 fb18 	bl	80078cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d003      	beq.n	80032e8 <HCD_RXQLVL_IRQHandler+0x44>
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	f000 8082 	beq.w	80033ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032e6:	e083      	b.n	80033f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d07f      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	; 0x44
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d074      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3344      	adds	r3, #68	; 0x44
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	b292      	uxth	r2, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f001 fdff 	bl	8004f22 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	3344      	adds	r3, #68	; 0x44
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	18d1      	adds	r1, r2, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4403      	add	r3, r0
 8003348:	3344      	adds	r3, #68	; 0x44
 800334a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	334c      	adds	r3, #76	; 0x4c
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	18d1      	adds	r1, r2, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4403      	add	r3, r0
 8003370:	334c      	adds	r3, #76	; 0x4c
 8003372:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d031      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3350      	adds	r3, #80	; 0x50
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	3350      	adds	r3, #80	; 0x50
 80033e4:	4602      	mov	r2, r0
 80033e6:	701a      	strb	r2, [r3, #0]
      break;
 80033e8:	e001      	b.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80033ee:	bf00      	nop
  }
}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	1ff80000 	.word	0x1ff80000

080033fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003428:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d113      	bne.n	800345c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10a      	bne.n	8003454 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800344c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f004 fa20 	bl	8007894 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	d147      	bne.n	80034f6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d129      	bne.n	80034cc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d113      	bne.n	80034a8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003486:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800348a:	d106      	bne.n	800349a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fe80 	bl	8005198 <USB_InitFSLSPClkSel>
 8003498:	e011      	b.n	80034be <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fe79 	bl	8005198 <USB_InitFSLSPClkSel>
 80034a6:	e00a      	b.n	80034be <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b6:	461a      	mov	r2, r3
 80034b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034bc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f004 fa12 	bl	80078e8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f004 f9e5 	bl	8007894 <HAL_HCD_Connect_Callback>
 80034ca:	e014      	b.n	80034f6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f004 fa19 	bl	8007904 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80034e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034e4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d103      	bne.n	8003508 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e11f      	b.n	800376e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fae8 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003580:	f001 f9de 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8003584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a7b      	ldr	r2, [pc, #492]	; (8003778 <HAL_I2C_Init+0x25c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d807      	bhi.n	80035a0 <HAL_I2C_Init+0x84>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_I2C_Init+0x260>)
 8003594:	4293      	cmp	r3, r2
 8003596:	bf94      	ite	ls
 8003598:	2301      	movls	r3, #1
 800359a:	2300      	movhi	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e006      	b.n	80035ae <HAL_I2C_Init+0x92>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_I2C_Init+0x264>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bf94      	ite	ls
 80035a8:	2301      	movls	r3, #1
 80035aa:	2300      	movhi	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0db      	b.n	800376e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a72      	ldr	r2, [pc, #456]	; (8003784 <HAL_I2C_Init+0x268>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0c9b      	lsrs	r3, r3, #18
 80035c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a64      	ldr	r2, [pc, #400]	; (8003778 <HAL_I2C_Init+0x25c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d802      	bhi.n	80035f0 <HAL_I2C_Init+0xd4>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3301      	adds	r3, #1
 80035ee:	e009      	b.n	8003604 <HAL_I2C_Init+0xe8>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	4a63      	ldr	r2, [pc, #396]	; (8003788 <HAL_I2C_Init+0x26c>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	3301      	adds	r3, #1
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4956      	ldr	r1, [pc, #344]	; (8003778 <HAL_I2C_Init+0x25c>)
 8003620:	428b      	cmp	r3, r1
 8003622:	d80d      	bhi.n	8003640 <HAL_I2C_Init+0x124>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e59      	subs	r1, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b04      	cmp	r3, #4
 800363a:	bf38      	it	cc
 800363c:	2304      	movcc	r3, #4
 800363e:	e04f      	b.n	80036e0 <HAL_I2C_Init+0x1c4>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <HAL_I2C_Init+0x150>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e012      	b.n	8003692 <HAL_I2C_Init+0x176>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x17e>
 8003696:	2301      	movs	r3, #1
 8003698:	e022      	b.n	80036e0 <HAL_I2C_Init+0x1c4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_I2C_Init+0x1a4>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e58      	subs	r0, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	440b      	add	r3, r1
 80036b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Init+0x1c4>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	6809      	ldr	r1, [r1, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800370e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6911      	ldr	r1, [r2, #16]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	000186a0 	.word	0x000186a0
 800377c:	001e847f 	.word	0x001e847f
 8003780:	003d08ff 	.word	0x003d08ff
 8003784:	431bde83 	.word	0x431bde83
 8003788:	10624dd3 	.word	0x10624dd3

0800378c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e128      	b.n	80039f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a90      	ldr	r2, [pc, #576]	; (80039f8 <HAL_I2S_Init+0x26c>)
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fd f9f5 	bl	8000ba8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037d4:	f023 030f 	bic.w	r3, r3, #15
 80037d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2202      	movs	r2, #2
 80037e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d060      	beq.n	80038ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037f2:	2310      	movs	r3, #16
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e001      	b.n	80037fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b20      	cmp	r3, #32
 8003802:	d802      	bhi.n	800380a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800380a:	2001      	movs	r0, #1
 800380c:	f001 f99c 	bl	8004b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8003810:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381a:	d125      	bne.n	8003868 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	fbb2 f2f3 	udiv	r2, r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	3305      	adds	r3, #5
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	e01f      	b.n	8003886 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	3305      	adds	r3, #5
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	e00e      	b.n	8003886 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	461a      	mov	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	3305      	adds	r3, #5
 8003884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4a5c      	ldr	r2, [pc, #368]	; (80039fc <HAL_I2S_Init+0x270>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e003      	b.n	80038b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038ac:	2302      	movs	r3, #2
 80038ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d902      	bls.n	80038c0 <HAL_I2S_Init+0x134>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2bff      	cmp	r3, #255	; 0xff
 80038be:	d907      	bls.n	80038d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e08f      	b.n	80039f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	ea42 0103 	orr.w	r1, r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038ee:	f023 030f 	bic.w	r3, r3, #15
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6851      	ldr	r1, [r2, #4]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68d2      	ldr	r2, [r2, #12]
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6992      	ldr	r2, [r2, #24]
 8003906:	430a      	orrs	r2, r1
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003912:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d161      	bne.n	80039e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a38      	ldr	r2, [pc, #224]	; (8003a00 <HAL_I2S_Init+0x274>)
 8003920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <HAL_I2S_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_I2S_Init+0x1a4>
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_I2S_Init+0x27c>)
 800392e:	e001      	b.n	8003934 <HAL_I2S_Init+0x1a8>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4932      	ldr	r1, [pc, #200]	; (8003a04 <HAL_I2S_Init+0x278>)
 800393c:	428a      	cmp	r2, r1
 800393e:	d101      	bne.n	8003944 <HAL_I2S_Init+0x1b8>
 8003940:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <HAL_I2S_Init+0x27c>)
 8003942:	e001      	b.n	8003948 <HAL_I2S_Init+0x1bc>
 8003944:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003948:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_I2S_Init+0x278>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_I2S_Init+0x1d4>
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_I2S_Init+0x27c>)
 800395e:	e001      	b.n	8003964 <HAL_I2S_Init+0x1d8>
 8003960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003964:	2202      	movs	r2, #2
 8003966:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_I2S_Init+0x278>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_I2S_Init+0x1ea>
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_I2S_Init+0x27c>)
 8003974:	e001      	b.n	800397a <HAL_I2S_Init+0x1ee>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d003      	beq.n	8003990 <HAL_I2S_Init+0x204>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e001      	b.n	800399c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	b299      	uxth	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80039b2:	4303      	orrs	r3, r0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	430b      	orrs	r3, r1
 80039b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b29a      	uxth	r2, r3
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a0d      	ldr	r2, [pc, #52]	; (8003a04 <HAL_I2S_Init+0x278>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2S_Init+0x24c>
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_I2S_Init+0x27c>)
 80039d6:	e001      	b.n	80039dc <HAL_I2S_Init+0x250>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	897a      	ldrh	r2, [r7, #10]
 80039de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	08003b03 	.word	0x08003b03
 80039fc:	cccccccd 	.word	0xcccccccd
 8003a00:	08003c19 	.word	0x08003c19
 8003a04:	40003800 	.word	0x40003800
 8003a08:	40003400 	.word	0x40003400

08003a0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10e      	bne.n	8003a9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffb8 	bl	8003a0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	b292      	uxth	r2, r2
 8003ab8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10e      	bne.n	8003afa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff93 	bl	8003a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d13a      	bne.n	8003b94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d109      	bne.n	8003b3c <I2S_IRQHandler+0x3a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d102      	bne.n	8003b3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ffb4 	bl	8003aa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d126      	bne.n	8003b94 <I2S_IRQHandler+0x92>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d11f      	bne.n	8003b94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ff50 	bl	8003a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d136      	bne.n	8003c0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d109      	bne.n	8003bbe <I2S_IRQHandler+0xbc>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d102      	bne.n	8003bbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff45 	bl	8003a48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d122      	bne.n	8003c0e <I2S_IRQHandler+0x10c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d11b      	bne.n	8003c0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003be4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff13 	bl	8003a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4aa2      	ldr	r2, [pc, #648]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c32:	4ba2      	ldr	r3, [pc, #648]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c34:	e001      	b.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a9b      	ldr	r2, [pc, #620]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c50:	4b9a      	ldr	r3, [pc, #616]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c52:	e001      	b.n	8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d004      	beq.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 8099 	bne.w	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f925 	bl	8003ed4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9c8 	bl	8004034 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d13a      	bne.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d035      	beq.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7e      	ldr	r2, [pc, #504]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003cc2:	4b7e      	ldr	r3, [pc, #504]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cc4:	e001      	b.n	8003cca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4979      	ldr	r1, [pc, #484]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cd2:	428b      	cmp	r3, r1
 8003cd4:	d101      	bne.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003cd6:	4b79      	ldr	r3, [pc, #484]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd8:	e001      	b.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cf2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fe88 	bl	8003a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	f040 80be 	bne.w	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80b8 	beq.w	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a59      	ldr	r2, [pc, #356]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d56:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4954      	ldr	r1, [pc, #336]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d66:	428b      	cmp	r3, r1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d6c:	e001      	b.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fe4a 	bl	8003a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da0:	e084      	b.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d107      	bne.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8be 	bl	8003f38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8fd 	bl	8003fd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d12f      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02a      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e06:	e001      	b.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4929      	ldr	r1, [pc, #164]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e1a:	e001      	b.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fdfa 	bl	8003a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d131      	bne.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d02c      	beq.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e5e:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e60:	e001      	b.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4912      	ldr	r1, [pc, #72]	; (8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fdc5 	bl	8003a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	e000      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eac:	bf00      	nop
}
 8003eae:	bf00      	nop
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40003800 	.word	0x40003800
 8003ebc:	40003400 	.word	0x40003400

08003ec0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c99      	adds	r1, r3, #2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffc9 	bl	8003ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c99      	adds	r1, r3, #2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6251      	str	r1, [r2, #36]	; 0x24
 8003f4a:	8819      	ldrh	r1, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <I2SEx_TxISR_I2SExt+0x22>
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <I2SEx_TxISR_I2SExt+0x94>)
 8003f58:	e001      	b.n	8003f5e <I2SEx_TxISR_I2SExt+0x26>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	460a      	mov	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d121      	bne.n	8003fbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <I2SEx_TxISR_I2SExt+0x50>
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <I2SEx_TxISR_I2SExt+0x94>)
 8003f86:	e001      	b.n	8003f8c <I2SEx_TxISR_I2SExt+0x54>
 8003f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f94:	428b      	cmp	r3, r1
 8003f96:	d101      	bne.n	8003f9c <I2SEx_TxISR_I2SExt+0x64>
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <I2SEx_TxISR_I2SExt+0x94>)
 8003f9a:	e001      	b.n	8003fa0 <I2SEx_TxISR_I2SExt+0x68>
 8003f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff81 	bl	8003ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40003800 	.word	0x40003800
 8003fcc:	40003400 	.word	0x40003400

08003fd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68d8      	ldr	r0, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	1c99      	adds	r1, r3, #2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fe8:	b282      	uxth	r2, r0
 8003fea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d113      	bne.n	800402c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004012:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff ff4a 	bl	8003ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <I2SEx_RxISR_I2SExt+0x16>
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004048:	e001      	b.n	800404e <I2SEx_RxISR_I2SExt+0x1a>
 800404a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404e:	68d8      	ldr	r0, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	1c99      	adds	r1, r3, #2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	62d1      	str	r1, [r2, #44]	; 0x2c
 800405a:	b282      	uxth	r2, r0
 800405c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d121      	bne.n	80040ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <I2SEx_RxISR_I2SExt+0x90>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <I2SEx_RxISR_I2SExt+0x50>
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004082:	e001      	b.n	8004088 <I2SEx_RxISR_I2SExt+0x54>
 8004084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	490d      	ldr	r1, [pc, #52]	; (80040c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d101      	bne.n	8004098 <I2SEx_RxISR_I2SExt+0x64>
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004096:	e001      	b.n	800409c <I2SEx_RxISR_I2SExt+0x68>
 8004098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800409c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff03 	bl	8003ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40003800 	.word	0x40003800
 80040c8:	40003400 	.word	0x40003400

080040cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e25b      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d075      	beq.n	80041d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ea:	4ba3      	ldr	r3, [pc, #652]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d00c      	beq.n	8004110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4ba0      	ldr	r3, [pc, #640]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d112      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4b9d      	ldr	r3, [pc, #628]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b99      	ldr	r3, [pc, #612]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d157      	bne.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e236      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x74>
 8004132:	4b91      	ldr	r3, [pc, #580]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a90      	ldr	r2, [pc, #576]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x98>
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a8a      	ldr	r2, [pc, #552]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a87      	ldr	r2, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004164:	4b84      	ldr	r3, [pc, #528]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a80      	ldr	r2, [pc, #512]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fc ff30 	bl	8000fe8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fc ff2c 	bl	8000fe8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1fb      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b76      	ldr	r3, [pc, #472]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xc0>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fc ff1c 	bl	8000fe8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fc ff18 	bl	8000fe8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1e7      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0xe8>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b62      	ldr	r3, [pc, #392]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e1bb      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4952      	ldr	r1, [pc, #328]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	e03a      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423c:	4b4f      	ldr	r3, [pc, #316]	; (800437c <HAL_RCC_OscConfig+0x2b0>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fc fed1 	bl	8000fe8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424a:	f7fc fecd 	bl	8000fe8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e19c      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4940      	ldr	r1, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_OscConfig+0x2b0>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fc feb0 	bl	8000fe8 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800428c:	f7fc feac 	bl	8000fe8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e17b      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d030      	beq.n	8004318 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCC_OscConfig+0x2b4>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fc fe90 	bl	8000fe8 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fc fe8c 	bl	8000fe8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e15b      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x200>
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x2b4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fc fe79 	bl	8000fe8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fc fe75 	bl	8000fe8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e144      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a0 	beq.w	8004466 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a07      	ldr	r2, [pc, #28]	; (8004384 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fc fe3b 	bl	8000fe8 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	e011      	b.n	800439a <HAL_RCC_OscConfig+0x2ce>
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	42470000 	.word	0x42470000
 8004380:	42470e80 	.word	0x42470e80
 8004384:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fc fe2e 	bl	8000fe8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0fd      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	4b81      	ldr	r3, [pc, #516]	; (80045a0 <HAL_RCC_OscConfig+0x4d4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x2f0>
 80043ae:	4b7d      	ldr	r3, [pc, #500]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a7c      	ldr	r2, [pc, #496]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	e01c      	b.n	80043f6 <HAL_RCC_OscConfig+0x32a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x312>
 80043c4:	4b77      	ldr	r3, [pc, #476]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a76      	ldr	r2, [pc, #472]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	4b74      	ldr	r3, [pc, #464]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a73      	ldr	r2, [pc, #460]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e00b      	b.n	80043f6 <HAL_RCC_OscConfig+0x32a>
 80043de:	4b71      	ldr	r3, [pc, #452]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a70      	ldr	r2, [pc, #448]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a6d      	ldr	r2, [pc, #436]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fc fdf3 	bl	8000fe8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fc fdef 	bl	8000fe8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0bc      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCC_OscConfig+0x33a>
 8004428:	e014      	b.n	8004454 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442a:	f7fc fddd 	bl	8000fe8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fc fdd9 	bl	8000fe8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0a6      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004448:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b52      	ldr	r3, [pc, #328]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	4a51      	ldr	r2, [pc, #324]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8092 	beq.w	8004594 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004470:	4b4c      	ldr	r3, [pc, #304]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d05c      	beq.n	8004536 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d141      	bne.n	8004508 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <HAL_RCC_OscConfig+0x4dc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fc fdad 	bl	8000fe8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fc fda9 	bl	8000fe8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e078      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	019b      	lsls	r3, r3, #6
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	4933      	ldr	r1, [pc, #204]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_RCC_OscConfig+0x4dc>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fc fd82 	bl	8000fe8 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fc fd7e 	bl	8000fe8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04d      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x41c>
 8004506:	e045      	b.n	8004594 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <HAL_RCC_OscConfig+0x4dc>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fc fd6b 	bl	8000fe8 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fc fd67 	bl	8000fe8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e036      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004528:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x44a>
 8004534:	e02e      	b.n	8004594 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e029      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_RCC_OscConfig+0x4d8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	429a      	cmp	r2, r3
 8004554:	d11c      	bne.n	8004590 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d115      	bne.n	8004590 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d106      	bne.n	8004590 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40007000 	.word	0x40007000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	42470060 	.word	0x42470060

080045ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0cc      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b68      	ldr	r3, [pc, #416]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d90c      	bls.n	80045e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b65      	ldr	r3, [pc, #404]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b63      	ldr	r3, [pc, #396]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0b8      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004600:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004618:	4b53      	ldr	r3, [pc, #332]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a52      	ldr	r2, [pc, #328]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b50      	ldr	r3, [pc, #320]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	494d      	ldr	r1, [pc, #308]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d044      	beq.n	80046cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d119      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e07f      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d003      	beq.n	800466a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004666:	2b03      	cmp	r3, #3
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	4b3f      	ldr	r3, [pc, #252]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e06f      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e067      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4934      	ldr	r1, [pc, #208]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800469c:	f7fc fca4 	bl	8000fe8 <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fc fca0 	bl	8000fe8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e04f      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 020c 	and.w	r2, r3, #12
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1eb      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d20c      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e032      	b.n	800475a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4916      	ldr	r1, [pc, #88]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	490e      	ldr	r1, [pc, #56]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004732:	f000 f821 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	fa21 f303 	lsr.w	r3, r1, r3
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fc04 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40023c00 	.word	0x40023c00
 8004768:	40023800 	.word	0x40023800
 800476c:	08007f1c 	.word	0x08007f1c
 8004770:	20000000 	.word	0x20000000
 8004774:	20000004 	.word	0x20000004

08004778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	2300      	movs	r3, #0
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800478e:	4b63      	ldr	r3, [pc, #396]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b04      	cmp	r3, #4
 8004798:	d007      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x32>
 800479a:	2b08      	cmp	r3, #8
 800479c:	d008      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x38>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 80b4 	bne.w	800490c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a4:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047a6:	60bb      	str	r3, [r7, #8]
       break;
 80047a8:	e0b3      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047aa:	4b5e      	ldr	r3, [pc, #376]	; (8004924 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80047ac:	60bb      	str	r3, [r7, #8]
      break;
 80047ae:	e0b0      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b0:	4b5a      	ldr	r3, [pc, #360]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ba:	4b58      	ldr	r3, [pc, #352]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d04a      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	ea03 0501 	and.w	r5, r3, r1
 80047dc:	ea04 0602 	and.w	r6, r4, r2
 80047e0:	4629      	mov	r1, r5
 80047e2:	4632      	mov	r2, r6
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f04f 0400 	mov.w	r4, #0
 80047ec:	0154      	lsls	r4, r2, #5
 80047ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047f2:	014b      	lsls	r3, r1, #5
 80047f4:	4619      	mov	r1, r3
 80047f6:	4622      	mov	r2, r4
 80047f8:	1b49      	subs	r1, r1, r5
 80047fa:	eb62 0206 	sbc.w	r2, r2, r6
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	0194      	lsls	r4, r2, #6
 8004808:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800480c:	018b      	lsls	r3, r1, #6
 800480e:	1a5b      	subs	r3, r3, r1
 8004810:	eb64 0402 	sbc.w	r4, r4, r2
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	00e2      	lsls	r2, r4, #3
 800481e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004822:	00d9      	lsls	r1, r3, #3
 8004824:	460b      	mov	r3, r1
 8004826:	4614      	mov	r4, r2
 8004828:	195b      	adds	r3, r3, r5
 800482a:	eb44 0406 	adc.w	r4, r4, r6
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	0262      	lsls	r2, r4, #9
 8004838:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800483c:	0259      	lsls	r1, r3, #9
 800483e:	460b      	mov	r3, r1
 8004840:	4614      	mov	r4, r2
 8004842:	4618      	mov	r0, r3
 8004844:	4621      	mov	r1, r4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	461a      	mov	r2, r3
 800484e:	4623      	mov	r3, r4
 8004850:	f7fb fcc2 	bl	80001d8 <__aeabi_uldivmod>
 8004854:	4603      	mov	r3, r0
 8004856:	460c      	mov	r4, r1
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e049      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485c:	4b2f      	ldr	r3, [pc, #188]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	f240 11ff 	movw	r1, #511	; 0x1ff
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	ea03 0501 	and.w	r5, r3, r1
 8004872:	ea04 0602 	and.w	r6, r4, r2
 8004876:	4629      	mov	r1, r5
 8004878:	4632      	mov	r2, r6
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	f04f 0400 	mov.w	r4, #0
 8004882:	0154      	lsls	r4, r2, #5
 8004884:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004888:	014b      	lsls	r3, r1, #5
 800488a:	4619      	mov	r1, r3
 800488c:	4622      	mov	r2, r4
 800488e:	1b49      	subs	r1, r1, r5
 8004890:	eb62 0206 	sbc.w	r2, r2, r6
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	f04f 0400 	mov.w	r4, #0
 800489c:	0194      	lsls	r4, r2, #6
 800489e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048a2:	018b      	lsls	r3, r1, #6
 80048a4:	1a5b      	subs	r3, r3, r1
 80048a6:	eb64 0402 	sbc.w	r4, r4, r2
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048b8:	00d9      	lsls	r1, r3, #3
 80048ba:	460b      	mov	r3, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	195b      	adds	r3, r3, r5
 80048c0:	eb44 0406 	adc.w	r4, r4, r6
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	02a2      	lsls	r2, r4, #10
 80048ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048d2:	0299      	lsls	r1, r3, #10
 80048d4:	460b      	mov	r3, r1
 80048d6:	4614      	mov	r4, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	4621      	mov	r1, r4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f04f 0400 	mov.w	r4, #0
 80048e2:	461a      	mov	r2, r3
 80048e4:	4623      	mov	r3, r4
 80048e6:	f7fb fc77 	bl	80001d8 <__aeabi_uldivmod>
 80048ea:	4603      	mov	r3, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	3301      	adds	r3, #1
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
      break;
 800490a:	e002      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800490e:	60bb      	str	r3, [r7, #8]
      break;
 8004910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004912:	68bb      	ldr	r3, [r7, #8]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491c:	40023800 	.word	0x40023800
 8004920:	00f42400 	.word	0x00f42400
 8004924:	007a1200 	.word	0x007a1200

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000000 	.word	0x20000000

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4601      	mov	r1, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4a03      	ldr	r2, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08007f2c 	.word	0x08007f2c

08004968 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800498c:	2b00      	cmp	r3, #0
 800498e:	d038      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004990:	4b68      	ldr	r3, [pc, #416]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004996:	f7fc fb27 	bl	8000fe8 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800499e:	f7fc fb23 	bl	8000fe8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e0bd      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b0:	4b61      	ldr	r3, [pc, #388]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	019b      	lsls	r3, r3, #6
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	071b      	lsls	r3, r3, #28
 80049ce:	495a      	ldr	r1, [pc, #360]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049d6:	4b57      	ldr	r3, [pc, #348]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049dc:	f7fc fb04 	bl	8000fe8 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049e4:	f7fc fb00 	bl	8000fe8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e09a      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f6:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8083 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	4b48      	ldr	r3, [pc, #288]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	4a47      	ldr	r2, [pc, #284]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a20:	4b45      	ldr	r3, [pc, #276]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a42      	ldr	r2, [pc, #264]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a36:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a38:	f7fc fad6 	bl	8000fe8 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fc fad2 	bl	8000fe8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e06c      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a52:	4b3a      	ldr	r3, [pc, #232]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02f      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d028      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d114      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fc faa0 	bl	8000fe8 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fc fa9c 	bl	8000fe8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e034      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ee      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	4911      	ldr	r1, [pc, #68]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
 8004af6:	e005      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b10:	4909      	ldr	r1, [pc, #36]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7d1a      	ldrb	r2, [r3, #20]
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004b28:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	42470068 	.word	0x42470068
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	42470e40 	.word	0x42470e40
 8004b44:	424711e0 	.word	0x424711e0

08004b48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d13f      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b66:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b6e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d131      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b7c:	617b      	str	r3, [r7, #20]
          break;
 8004b7e:	e031      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	0f1b      	lsrs	r3, r3, #28
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	617b      	str	r3, [r7, #20]
          break;
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
          break;
 8004be2:	bf00      	nop
        }
      }
      break;
 8004be4:	bf00      	nop
    }
  }
  return frequency;
 8004be6:	697b      	ldr	r3, [r7, #20]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00bb8000 	.word	0x00bb8000
 8004bfc:	007a1200 	.word	0x007a1200
 8004c00:	00f42400 	.word	0x00f42400

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e056      	b.n	8004cc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fc f887 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	ea42 0103 	orr.w	r1, r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	f003 0104 	and.w	r1, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ccc:	b084      	sub	sp, #16
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	f107 001c 	add.w	r0, r7, #28
 8004cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d122      	bne.n	8004d2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f94a 	bl	8004fb8 <USB_CoreReset>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e01a      	b.n	8004d60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f93e 	bl	8004fb8 <USB_CoreReset>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
 8004d52:	e005      	b.n	8004d60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10b      	bne.n	8004d7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f043 0206 	orr.w	r2, r3, #6
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d8a:	b004      	add	sp, #16
 8004d8c:	4770      	bx	lr

08004d8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 0201 	bic.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	e00b      	b.n	8004e16 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	e001      	b.n	8004e16 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e003      	b.n	8004e1e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e16:	2032      	movs	r0, #50	; 0x32
 8004e18:	f7fc f8f2 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <USB_FlushTxFifo+0x48>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e006      	b.n	8004e62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d0f0      	beq.n	8004e42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	00030d40 	.word	0x00030d40

08004e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2210      	movs	r2, #16
 8004e84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <USB_FlushRxFifo+0x40>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e006      	b.n	8004ea6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d0f0      	beq.n	8004e86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	00030d40 	.word	0x00030d40

08004eb8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	71fb      	strb	r3, [r7, #7]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11a      	bne.n	8004f14 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ede:	88bb      	ldrh	r3, [r7, #4]
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e00f      	b.n	8004f0c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	031a      	lsls	r2, r3, #12
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3304      	adds	r3, #4
 8004f04:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3eb      	bcc.n	8004eec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3724      	adds	r7, #36	; 0x24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b089      	sub	sp, #36	; 0x24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	3303      	adds	r3, #3
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e00b      	b.n	8004f5e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3304      	adds	r3, #4
 8004f56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3ef      	bcc.n	8004f46 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3724      	adds	r7, #36	; 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <USB_CoreReset+0x64>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e01b      	b.n	800500e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <USB_CoreReset+0x64>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d0f0      	beq.n	8004fee <USB_CoreReset+0x36>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	00030d40 	.word	0x00030d40

08005020 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005020:	b084      	sub	sp, #16
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	f107 001c 	add.w	r0, r7, #28
 800502e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2b03      	cmp	r3, #3
 8005076:	d10a      	bne.n	800508e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005086:	f043 0304 	orr.w	r3, r3, #4
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e014      	b.n	80050b8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e009      	b.n	80050b8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b2:	f023 0304 	bic.w	r3, r3, #4
 80050b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80050b8:	2110      	movs	r1, #16
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff feb4 	bl	8004e28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fed7 	bl	8004e74 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e015      	b.n	80050f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	461a      	mov	r2, r3
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3e5      	bcc.n	80050cc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005100:	2101      	movs	r1, #1
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8ac 	bl	8005260 <USB_DriveVbus>

  HAL_Delay(200U);
 8005108:	20c8      	movs	r0, #200	; 0xc8
 800510a:	f7fb ff79 	bl	8001000 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	; (8005184 <USB_HostInit+0x164>)
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <USB_HostInit+0x168>)
 800513a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800513e:	e009      	b.n	8005154 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2280      	movs	r2, #128	; 0x80
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a10      	ldr	r2, [pc, #64]	; (800518c <USB_HostInit+0x16c>)
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <USB_HostInit+0x170>)
 8005150:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <USB_HostInit+0x174>)
 800516c:	4313      	orrs	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800517e:	b004      	add	sp, #16
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	01000200 	.word	0x01000200
 8005188:	00e00300 	.word	0x00e00300
 800518c:	00600080 	.word	0x00600080
 8005190:	004000e0 	.word	0x004000e0
 8005194:	a3200008 	.word	0xa3200008

08005198 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d107      	bne.n	80051ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e0:	461a      	mov	r2, r3
 80051e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80051e6:	6053      	str	r3, [r2, #4]
 80051e8:	e009      	b.n	80051fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d106      	bne.n	80051fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f6:	461a      	mov	r2, r3
 80051f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80051fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800522c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800523c:	2064      	movs	r0, #100	; 0x64
 800523e:	f7fb fedf 	bl	8001000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800524a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800524e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005250:	200a      	movs	r0, #10
 8005252:	f7fb fed5 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005284:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <USB_DriveVbus+0x44>
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d106      	bne.n	80052a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800529e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d109      	bne.n	80052c4 <USB_DriveVbus+0x64>
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0c5b      	lsrs	r3, r3, #17
 80052f0:	f003 0303 	and.w	r3, r3, #3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	70fb      	strb	r3, [r7, #3]
 8005336:	460b      	mov	r3, r1
 8005338:	70bb      	strb	r3, [r7, #2]
 800533a:	4613      	mov	r3, r2
 800533c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800535a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800535e:	2b03      	cmp	r3, #3
 8005360:	d87e      	bhi.n	8005460 <USB_HC_Init+0x13c>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <USB_HC_Init+0x44>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005379 	.word	0x08005379
 800536c:	08005423 	.word	0x08005423
 8005370:	08005379 	.word	0x08005379
 8005374:	080053e5 	.word	0x080053e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	461a      	mov	r2, r3
 8005386:	f240 439d 	movw	r3, #1181	; 0x49d
 800538a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800538c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005390:	2b00      	cmp	r3, #0
 8005392:	da10      	bge.n	80053b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80053b4:	e057      	b.n	8005466 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d051      	beq.n	8005466 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053e0:	60d3      	str	r3, [r2, #12]
      break;
 80053e2:	e040      	b.n	8005466 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f0:	461a      	mov	r2, r3
 80053f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80053f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da34      	bge.n	800546a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	440a      	add	r2, r1
 8005416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005420:	e023      	b.n	800546a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	461a      	mov	r2, r3
 8005430:	f240 2325 	movw	r3, #549	; 0x225
 8005434:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005436:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800543a:	2b00      	cmp	r3, #0
 800543c:	da17      	bge.n	800546e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	440a      	add	r2, r1
 8005454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005458:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800545c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800545e:	e006      	b.n	800546e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	e004      	b.n	8005470 <USB_HC_Init+0x14c>
      break;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <USB_HC_Init+0x14c>
      break;
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <USB_HC_Init+0x14c>
      break;
 800546e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800548a:	4313      	orrs	r3, r2
 800548c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800549a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da03      	bge.n	80054aa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e001      	b.n	80054ae <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80054ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d103      	bne.n	80054be <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e001      	b.n	80054c2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054c2:	787b      	ldrb	r3, [r7, #1]
 80054c4:	059b      	lsls	r3, r3, #22
 80054c6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054ca:	78bb      	ldrb	r3, [r7, #2]
 80054cc:	02db      	lsls	r3, r3, #11
 80054ce:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054d2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054d8:	049b      	lsls	r3, r3, #18
 80054da:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054fe:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005504:	2b03      	cmp	r3, #3
 8005506:	d10f      	bne.n	8005528 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	440a      	add	r2, r1
 800551e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005526:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop

08005538 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005554:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d028      	beq.n	80055b4 <USB_HC_StartXfer+0x7c>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d124      	bne.n	80055b4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <USB_HC_StartXfer+0x50>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	795b      	ldrb	r3, [r3, #5]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d107      	bne.n	8005588 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	4619      	mov	r1, r3
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fa2e 	bl	80059e0 <USB_DoPing>
      return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e112      	b.n	80057ae <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d112      	bne.n	80055b4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80055ac:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d018      	beq.n	80055ee <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	8912      	ldrh	r2, [r2, #8]
 80055c4:	4413      	add	r3, r2
 80055c6:	3b01      	subs	r3, #1
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	8912      	ldrh	r2, [r2, #8]
 80055cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80055d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055d4:	8b7b      	ldrh	r3, [r7, #26]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d90b      	bls.n	80055f2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80055da:	8b7b      	ldrh	r3, [r7, #26]
 80055dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80055de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	8912      	ldrh	r2, [r2, #8]
 80055e4:	fb02 f203 	mul.w	r2, r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	611a      	str	r2, [r3, #16]
 80055ec:	e001      	b.n	80055f2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80055ee:	2301      	movs	r3, #1
 80055f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	78db      	ldrb	r3, [r3, #3]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d006      	beq.n	8005608 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80055fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	8912      	ldrh	r2, [r2, #8]
 8005600:	fb02 f203 	mul.w	r2, r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005612:	04d9      	lsls	r1, r3, #19
 8005614:	4b68      	ldr	r3, [pc, #416]	; (80057b8 <USB_HC_StartXfer+0x280>)
 8005616:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005618:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	7a9b      	ldrb	r3, [r3, #10]
 800561e:	075b      	lsls	r3, r3, #29
 8005620:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005624:	69f9      	ldr	r1, [r7, #28]
 8005626:	0148      	lsls	r0, r1, #5
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	4401      	add	r1, r0
 800562c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005630:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005632:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	460a      	mov	r2, r1
 800564c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005684:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	7e7b      	ldrb	r3, [r7, #25]
 8005696:	075b      	lsls	r3, r3, #29
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	0148      	lsls	r0, r1, #5
 800569c:	6a39      	ldr	r1, [r7, #32]
 800569e:	4401      	add	r1, r0
 80056a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a41      	ldr	r2, [pc, #260]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056b8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056c2:	4a3e      	ldr	r2, [pc, #248]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056c4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056ce:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	4a39      	ldr	r2, [pc, #228]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e005      	b.n	80056e8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056dc:	4b37      	ldr	r3, [pc, #220]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e4:	4a35      	ldr	r2, [pc, #212]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056e6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056e8:	4b34      	ldr	r3, [pc, #208]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056f0:	4a32      	ldr	r2, [pc, #200]	; (80057bc <USB_HC_StartXfer+0x284>)
 80056f2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005700:	461a      	mov	r2, r3
 8005702:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <USB_HC_StartXfer+0x284>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d14e      	bne.n	80057ac <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	78db      	ldrb	r3, [r3, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d14a      	bne.n	80057ac <USB_HC_StartXfer+0x274>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d046      	beq.n	80057ac <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	79db      	ldrb	r3, [r3, #7]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d830      	bhi.n	8005788 <USB_HC_StartXfer+0x250>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <USB_HC_StartXfer+0x1f4>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	0800573d 	.word	0x0800573d
 8005730:	08005761 	.word	0x08005761
 8005734:	0800573d 	.word	0x0800573d
 8005738:	08005761 	.word	0x08005761
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	3303      	adds	r3, #3
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005746:	8afa      	ldrh	r2, [r7, #22]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	b29b      	uxth	r3, r3
 800574e:	429a      	cmp	r2, r3
 8005750:	d91c      	bls.n	800578c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f043 0220 	orr.w	r2, r3, #32
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]
          }
          break;
 800575e:	e015      	b.n	800578c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	3303      	adds	r3, #3
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800576a:	8afa      	ldrh	r2, [r7, #22]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	b29b      	uxth	r3, r3
 8005776:	429a      	cmp	r2, r3
 8005778:	d90a      	bls.n	8005790 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]
          }
          break;
 8005786:	e003      	b.n	8005790 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <USB_HC_StartXfer+0x25a>
          break;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <USB_HC_StartXfer+0x25a>
          break;
 8005790:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	68d9      	ldr	r1, [r3, #12]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	785a      	ldrb	r2, [r3, #1]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	b298      	uxth	r0, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	4603      	mov	r3, r0
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff fb86 	bl	8004eb8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3728      	adds	r7, #40	; 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	1ff80000 	.word	0x1ff80000
 80057bc:	200000b0 	.word	0x200000b0

080057c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	b29b      	uxth	r3, r3
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	0c9b      	lsrs	r3, r3, #18
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <USB_HC_Halt+0x3a>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d16c      	bne.n	80058f6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	440a      	add	r2, r1
 8005832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d143      	bne.n	80058d0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	440a      	add	r2, r1
 800585e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005866:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	440a      	add	r2, r1
 800587e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005886:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	440a      	add	r2, r1
 800589e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b4:	d81d      	bhi.n	80058f2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058cc:	d0ec      	beq.n	80058a8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058ce:	e080      	b.n	80059d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ee:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058f0:	e06f      	b.n	80059d2 <USB_HC_Halt+0x1f0>
          break;
 80058f2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058f4:	e06d      	b.n	80059d2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005914:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d143      	bne.n	80059ae <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	440a      	add	r2, r1
 800593c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005944:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	440a      	add	r2, r1
 800595c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005964:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	440a      	add	r2, r1
 800597c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005984:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3301      	adds	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005992:	d81d      	bhi.n	80059d0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059aa:	d0ec      	beq.n	8005986 <USB_HC_Halt+0x1a4>
 80059ac:	e011      	b.n	80059d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e000      	b.n	80059d2 <USB_HC_Halt+0x1f0>
          break;
 80059d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	04da      	lsls	r2, r3, #19
 80059fc:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <USB_DoPing+0x74>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	1ff80000 	.word	0x1ff80000

08005a58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff f9a1 	bl	8004db0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a6e:	2110      	movs	r1, #16
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff f9d9 	bl	8004e28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff f9fc 	bl	8004e74 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e01f      	b.n	8005ac2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aa8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b0f      	cmp	r3, #15
 8005ac6:	d9dc      	bls.n	8005a82 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	e034      	b.n	8005b38 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b14:	d80c      	bhi.n	8005b30 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2c:	d0ec      	beq.n	8005b08 <USB_StopHost+0xb0>
 8005b2e:	e000      	b.n	8005b32 <USB_StopHost+0xda>
        break;
 8005b30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3301      	adds	r3, #1
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d9c7      	bls.n	8005ace <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b52:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff f91a 	bl	8004d8e <USB_EnableGlobalInt>

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af04      	add	r7, sp, #16
 8005b6a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005b70:	2301      	movs	r3, #1
 8005b72:	2202      	movs	r2, #2
 8005b74:	2102      	movs	r1, #2
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fc3a 	bl	80063f0 <USBH_FindInterface>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	2bff      	cmp	r3, #255	; 0xff
 8005b84:	f000 812a 	beq.w	8005ddc <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fc13 	bl	80063b8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005b98:	2050      	movs	r0, #80	; 0x50
 8005b9a:	f002 f8df 	bl	8007d5c <malloc>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	211a      	movs	r1, #26
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da15      	bge.n	8005bf0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	211a      	movs	r1, #26
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	211a      	movs	r1, #26
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fd21 	bl	800763e <USBH_AllocPipe>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	7819      	ldrb	r1, [r3, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	7858      	ldrb	r0, [r3, #1]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	8952      	ldrh	r2, [r2, #10]
 8005c1c:	9202      	str	r2, [sp, #8]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	9201      	str	r2, [sp, #4]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4623      	mov	r3, r4
 8005c26:	4602      	mov	r2, r0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 fcd9 	bl	80075e0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 ffe0 	bl	8007bfc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2200      	movs	r2, #0
 8005c40:	210a      	movs	r1, #10
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fbd4 	bl	80063f0 <USBH_FindInterface>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2bff      	cmp	r3, #255	; 0xff
 8005c50:	f000 80c4 	beq.w	8005ddc <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	211a      	movs	r1, #26
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da16      	bge.n	8005c9a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	211a      	movs	r1, #26
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	211a      	movs	r1, #26
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005c92:	881a      	ldrh	r2, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	835a      	strh	r2, [r3, #26]
 8005c98:	e015      	b.n	8005cc6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	211a      	movs	r1, #26
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	211a      	movs	r1, #26
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	211a      	movs	r1, #26
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b25b      	sxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da16      	bge.n	8005d0c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	211a      	movs	r1, #26
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	211a      	movs	r1, #26
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	835a      	strh	r2, [r3, #26]
 8005d0a:	e015      	b.n	8005d38 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	211a      	movs	r1, #26
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	211a      	movs	r1, #26
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	7b9b      	ldrb	r3, [r3, #14]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 fc7d 	bl	800763e <USBH_AllocPipe>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	7bdb      	ldrb	r3, [r3, #15]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fc73 	bl	800763e <USBH_AllocPipe>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	7b59      	ldrb	r1, [r3, #13]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	7b98      	ldrb	r0, [r3, #14]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	8b12      	ldrh	r2, [r2, #24]
 8005d78:	9202      	str	r2, [sp, #8]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4623      	mov	r3, r4
 8005d82:	4602      	mov	r2, r0
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fc2b 	bl	80075e0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	7b19      	ldrb	r1, [r3, #12]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	7bd8      	ldrb	r0, [r3, #15]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	8b52      	ldrh	r2, [r2, #26]
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	2202      	movs	r2, #2
 8005da6:	9201      	str	r2, [sp, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4623      	mov	r3, r4
 8005dac:	4602      	mov	r2, r0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fc16 	bl	80075e0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	7b5b      	ldrb	r3, [r3, #13]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 ff19 	bl	8007bfc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	7b1b      	ldrb	r3, [r3, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 ff12 	bl	8007bfc <USBH_LL_SetToggle>
      status = USBH_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd90      	pop	{r4, r7, pc}

08005de6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc09 	bl	800761e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 fc31 	bl	800767a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	7b1b      	ldrb	r3, [r3, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	7b1b      	ldrb	r3, [r3, #12]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 fbf6 	bl	800761e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	7b1b      	ldrb	r3, [r3, #12]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fc1e 	bl	800767a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	7b5b      	ldrb	r3, [r3, #13]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	7b5b      	ldrb	r3, [r3, #13]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fbe3 	bl	800761e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	7b5b      	ldrb	r3, [r3, #13]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc0b 	bl	800767a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 ff74 	bl	8007d6c <free>
    phost->pActiveClass->pData = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3340      	adds	r3, #64	; 0x40
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8b2 	bl	800601e <GetLineCoding>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005eca:	2102      	movs	r1, #2
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
  }
  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d877      	bhi.n	8005ff0 <USBH_CDC_Process+0x114>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USBH_CDC_Process+0x2c>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f1d 	.word	0x08005f1d
 8005f0c:	08005f23 	.word	0x08005f23
 8005f10:	08005f53 	.word	0x08005f53
 8005f14:	08005fc7 	.word	0x08005fc7
 8005f18:	08005fd5 	.word	0x08005fd5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f20:	e06d      	b.n	8005ffe <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f897 	bl	800605c <SetLineCoding>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005f40:	e058      	b.n	8005ff4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d055      	beq.n	8005ff4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005f50:	e050      	b.n	8005ff4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3340      	adds	r3, #64	; 0x40
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f860 	bl	800601e <GetLineCoding>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d126      	bne.n	8005fb6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7a:	791b      	ldrb	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d13b      	bne.n	8005ff8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d133      	bne.n	8005ff8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d12b      	bne.n	8005ff8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d124      	bne.n	8005ff8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f95a 	bl	8006268 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005fb4:	e020      	b.n	8005ff8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d01d      	beq.n	8005ff8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005fc4:	e018      	b.n	8005ff8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f867 	bl	800609a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8dc 	bl	800618a <CDC_ProcessReception>
    break;
 8005fd2:	e014      	b.n	8005ffe <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fece 	bl	8006d78 <USBH_ClrFeature>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005fee:	e005      	b.n	8005ffc <USBH_CDC_Process+0x120>

  default:
    break;
 8005ff0:	bf00      	nop
 8005ff2:	e004      	b.n	8005ffe <USBH_CDC_Process+0x122>
    break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <USBH_CDC_Process+0x122>
    break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <USBH_CDC_Process+0x122>
    break;
 8005ffc:	bf00      	nop

  }

  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	22a1      	movs	r2, #161	; 0xa1
 800602c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2221      	movs	r2, #33	; 0x21
 8006032:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2207      	movs	r2, #7
 8006044:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2207      	movs	r2, #7
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f873 	bl	8007138 <USBH_CtlReq>
 8006052:	4603      	mov	r3, r0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2221      	movs	r2, #33	; 0x21
 800606a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2207      	movs	r2, #7
 8006082:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2207      	movs	r2, #7
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f854 	bl	8007138 <USBH_CtlReq>
 8006090:	4603      	mov	r3, r0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af02      	add	r7, sp, #8
 80060a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <CDC_ProcessTransmission+0x26>
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d025      	beq.n	800610a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80060be:	e060      	b.n	8006182 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	8b12      	ldrh	r2, [r2, #24]
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d90c      	bls.n	80060e6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	69d9      	ldr	r1, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8b1a      	ldrh	r2, [r3, #24]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	7b58      	ldrb	r0, [r3, #13]
 80060d8:	2301      	movs	r3, #1
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fa3b 	bl	800755a <USBH_BulkSendData>
 80060e4:	e00c      	b.n	8006100 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	7b58      	ldrb	r0, [r3, #13]
 80060f4:	2301      	movs	r3, #1
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	4603      	mov	r3, r0
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fa2d 	bl	800755a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006108:	e03b      	b.n	8006182 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	7b5b      	ldrb	r3, [r3, #13]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fd49 	bl	8007ba8 <USBH_LL_GetURBState>
 8006116:	4603      	mov	r3, r0
 8006118:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d128      	bne.n	8006172 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	8b12      	ldrh	r2, [r2, #24]
 8006128:	4293      	cmp	r3, r2
 800612a:	d90e      	bls.n	800614a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	8b12      	ldrh	r2, [r2, #24]
 8006134:	1a9a      	subs	r2, r3, r2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	8b12      	ldrh	r2, [r2, #24]
 8006142:	441a      	add	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	61da      	str	r2, [r3, #28]
 8006148:	e002      	b.n	8006150 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006160:	e00e      	b.n	8006180 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f868 	bl	8006240 <USBH_CDC_TransmitCallback>
    break;
 8006170:	e006      	b.n	8006180 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d103      	bne.n	8006180 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006180:	bf00      	nop
  }
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800619c:	2300      	movs	r3, #0
 800619e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d002      	beq.n	80061b0 <CDC_ProcessReception+0x26>
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d00e      	beq.n	80061cc <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80061ae:	e043      	b.n	8006238 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6a19      	ldr	r1, [r3, #32]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	8b5a      	ldrh	r2, [r3, #26]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	7b1b      	ldrb	r3, [r3, #12]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 f9f1 	bl	80075a4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2204      	movs	r2, #4
 80061c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80061ca:	e035      	b.n	8006238 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	7b1b      	ldrb	r3, [r3, #12]
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fce8 	bl	8007ba8 <USBH_LL_GetURBState>
 80061d8:	4603      	mov	r3, r0
 80061da:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d129      	bne.n	8006236 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	7b1b      	ldrb	r3, [r3, #12]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fc4b 	bl	8007a84 <USBH_LL_GetLastXferSize>
 80061ee:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d016      	beq.n	8006228 <CDC_ProcessReception+0x9e>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	8b5b      	ldrh	r3, [r3, #26]
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4293      	cmp	r3, r2
 8006204:	d910      	bls.n	8006228 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	441a      	add	r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2203      	movs	r2, #3
 8006222:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006226:	e006      	b.n	8006236 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f80f 	bl	8006254 <USBH_CDC_ReceiveCallback>
    break;
 8006236:	bf00      	nop
  }
}
 8006238:	bf00      	nop
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006290:	2302      	movs	r3, #2
 8006292:	e019      	b.n	80062c8 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	79fa      	ldrb	r2, [r7, #7]
 8006298:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f80f 	bl	80062d0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f001 fb2d 	bl	8007920 <USBH_LL_Init>

  return USBH_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80062dc:	e008      	b.n	80062f0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	32e0      	adds	r2, #224	; 0xe0
 80062e4:	2100      	movs	r1, #0
 80062e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b0e      	cmp	r3, #14
 80062f4:	d9f3      	bls.n	80062de <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e009      	b.n	8006310 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006316:	d3f1      	bcc.n	80062fc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d017      	beq.n	80063a6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006386:	1c59      	adds	r1, r3, #1
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	33dc      	adds	r3, #220	; 0xdc
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
 800639e:	e004      	b.n	80063aa <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80063a0:	2302      	movs	r3, #2
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	e001      	b.n	80063aa <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80063a6:	2302      	movs	r3, #2
 80063a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d204      	bcs.n	80063de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80063dc:	e001      	b.n	80063e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80063de:	2302      	movs	r3, #2
 80063e0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	70fb      	strb	r3, [r7, #3]
 8006402:	460b      	mov	r3, r1
 8006404:	70bb      	strb	r3, [r7, #2]
 8006406:	4613      	mov	r3, r2
 8006408:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006418:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800641a:	e025      	b.n	8006468 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	221a      	movs	r2, #26
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	3308      	adds	r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	3302      	adds	r3, #2
 800642c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	795b      	ldrb	r3, [r3, #5]
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	429a      	cmp	r2, r3
 8006436:	d002      	beq.n	800643e <USBH_FindInterface+0x4e>
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d111      	bne.n	8006462 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006442:	78ba      	ldrb	r2, [r7, #2]
 8006444:	429a      	cmp	r2, r3
 8006446:	d002      	beq.n	800644e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006448:	78bb      	ldrb	r3, [r7, #2]
 800644a:	2bff      	cmp	r3, #255	; 0xff
 800644c:	d109      	bne.n	8006462 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006452:	787a      	ldrb	r2, [r7, #1]
 8006454:	429a      	cmp	r2, r3
 8006456:	d002      	beq.n	800645e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006458:	787b      	ldrb	r3, [r7, #1]
 800645a:	2bff      	cmp	r3, #255	; 0xff
 800645c:	d101      	bne.n	8006462 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	e006      	b.n	8006470 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	3301      	adds	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d9d6      	bls.n	800641c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800646e:	23ff      	movs	r3, #255	; 0xff
}
 8006470:	4618      	mov	r0, r3
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fa87 	bl	8007998 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800648a:	2101      	movs	r1, #1
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fb9e 	bl	8007bce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80064a4:	2302      	movs	r3, #2
 80064a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 faec 	bl	8006a8a <USBH_IsPortEnabled>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10c      	bne.n	80064d2 <USBH_Process+0x36>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d002      	beq.n	80064d2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2203      	movs	r2, #3
 80064d0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b0b      	cmp	r3, #11
 80064da:	f200 814c 	bhi.w	8006776 <USBH_Process+0x2da>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <USBH_Process+0x48>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006537 	.word	0x08006537
 80064ec:	0800654b 	.word	0x0800654b
 80064f0:	08006751 	.word	0x08006751
 80064f4:	08006777 	.word	0x08006777
 80064f8:	080065d9 	.word	0x080065d9
 80064fc:	08006707 	.word	0x08006707
 8006500:	08006609 	.word	0x08006609
 8006504:	08006629 	.word	0x08006629
 8006508:	08006649 	.word	0x08006649
 800650c:	08006677 	.word	0x08006677
 8006510:	08006739 	.word	0x08006739
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 812c 	beq.w	800677a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006528:	20c8      	movs	r0, #200	; 0xc8
 800652a:	f001 fb9a 	bl	8007c62 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fa8d 	bl	8007a4e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006534:	e121      	b.n	800677a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800653c:	2b01      	cmp	r3, #1
 800653e:	f040 811e 	bne.w	800677e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006548:	e119      	b.n	800677e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800654a:	2064      	movs	r0, #100	; 0x64
 800654c:	f001 fb89 	bl	8007c62 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fa57 	bl	8007a04 <USBH_LL_GetSpeed>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2205      	movs	r2, #5
 8006564:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006566:	2100      	movs	r1, #0
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 f868 	bl	800763e <USBH_AllocPipe>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f860 	bl	800763e <USBH_AllocPipe>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7919      	ldrb	r1, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800659a:	b292      	uxth	r2, r2
 800659c:	9202      	str	r2, [sp, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	9201      	str	r2, [sp, #4]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	4603      	mov	r3, r0
 80065a6:	2280      	movs	r2, #128	; 0x80
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f819 	bl	80075e0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7959      	ldrb	r1, [r3, #5]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80065c2:	b292      	uxth	r2, r2
 80065c4:	9202      	str	r2, [sp, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	4603      	mov	r3, r0
 80065ce:	2200      	movs	r2, #0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f805 	bl	80075e0 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80065d6:	e0e3      	b.n	80067a0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8e7 	bl	80067ac <USBH_HandleEnum>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 80ce 	bne.w	8006782 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d103      	bne.n	8006600 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2208      	movs	r2, #8
 80065fc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80065fe:	e0c0      	b.n	8006782 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2207      	movs	r2, #7
 8006604:	701a      	strb	r2, [r3, #0]
    break;
 8006606:	e0bc      	b.n	8006782 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80b9 	beq.w	8006786 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800661a:	2101      	movs	r1, #1
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2208      	movs	r2, #8
 8006624:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006626:	e0ae      	b.n	8006786 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800662e:	b29b      	uxth	r3, r3
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fb59 	bl	8006cea <USBH_SetCfg>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 80a5 	bne.w	800678a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2209      	movs	r2, #9
 8006644:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006646:	e0a0      	b.n	800678a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006656:	2101      	movs	r1, #1
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fb69 	bl	8006d30 <USBH_SetFeature>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8094 	bne.w	800678e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	220a      	movs	r2, #10
 800666a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800666c:	e08f      	b.n	800678e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	220a      	movs	r2, #10
 8006672:	701a      	strb	r2, [r3, #0]
    break;
 8006674:	e08b      	b.n	800678e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8088 	beq.w	8006792 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
 800668e:	e017      	b.n	80066c0 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	33dc      	adds	r3, #220	; 0xdc
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	791a      	ldrb	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d108      	bne.n	80066ba <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	33dc      	adds	r3, #220	; 0xdc
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	3301      	adds	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0e4      	beq.n	8006690 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2206      	movs	r2, #6
 80066e6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066ee:	2103      	movs	r1, #3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80066f4:	e04d      	b.n	8006792 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	220d      	movs	r2, #13
 80066fa:	701a      	strb	r2, [r3, #0]
    break;
 80066fc:	e049      	b.n	8006792 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	220d      	movs	r2, #13
 8006702:	701a      	strb	r2, [r3, #0]
    break;
 8006704:	e045      	b.n	8006792 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00f      	beq.n	8006730 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	4603      	mov	r3, r0
 800671e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d136      	bne.n	8006796 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	220b      	movs	r2, #11
 800672c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800672e:	e032      	b.n	8006796 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	220d      	movs	r2, #13
 8006734:	701a      	strb	r2, [r3, #0]
    break;
 8006736:	e02e      	b.n	8006796 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800673e:	2b00      	cmp	r3, #0
 8006740:	d02b      	beq.n	800679a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
    }
    break;
 800674e:	e024      	b.n	800679a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fdbd 	bl	80062d0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01e      	beq.n	800679e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006774:	e013      	b.n	800679e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006776:	bf00      	nop
 8006778:	e012      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800677a:	bf00      	nop
 800677c:	e010      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800677e:	bf00      	nop
 8006780:	e00e      	b.n	80067a0 <USBH_Process+0x304>
    break;
 8006782:	bf00      	nop
 8006784:	e00c      	b.n	80067a0 <USBH_Process+0x304>
    break;
 8006786:	bf00      	nop
 8006788:	e00a      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800678a:	bf00      	nop
 800678c:	e008      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800678e:	bf00      	nop
 8006790:	e006      	b.n	80067a0 <USBH_Process+0x304>
    break;
 8006792:	bf00      	nop
 8006794:	e004      	b.n	80067a0 <USBH_Process+0x304>
    break;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <USBH_Process+0x304>
    break;
 800679e:	bf00      	nop
  }
 return USBH_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af04      	add	r7, sp, #16
 80067b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b07      	cmp	r3, #7
 80067be:	f200 80f8 	bhi.w	80069b2 <USBH_HandleEnum+0x206>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <USBH_HandleEnum+0x1c>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e9 	.word	0x080067e9
 80067cc:	0800685b 	.word	0x0800685b
 80067d0:	08006873 	.word	0x08006873
 80067d4:	080068e9 	.word	0x080068e9
 80067d8:	080068ff 	.word	0x080068ff
 80067dc:	0800691b 	.word	0x0800691b
 80067e0:	0800694f 	.word	0x0800694f
 80067e4:	08006983 	.word	0x08006983
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80067e8:	2108      	movs	r1, #8
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9ad 	bl	8006b4a <USBH_Get_DevDesc>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 80df 	bne.w	80069b6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7919      	ldrb	r1, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800681c:	b292      	uxth	r2, r2
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	9201      	str	r2, [sp, #4]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	4603      	mov	r3, r0
 8006828:	2280      	movs	r2, #128	; 0x80
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fed8 	bl	80075e0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7959      	ldrb	r1, [r3, #5]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006844:	b292      	uxth	r2, r2
 8006846:	9202      	str	r2, [sp, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	9201      	str	r2, [sp, #4]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	4603      	mov	r3, r0
 8006850:	2200      	movs	r2, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fec4 	bl	80075e0 <USBH_OpenPipe>

    }
    break;
 8006858:	e0ad      	b.n	80069b6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800685a:	2112      	movs	r1, #18
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f974 	bl	8006b4a <USBH_Get_DevDesc>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 80a8 	bne.w	80069ba <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006870:	e0a3      	b.n	80069ba <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006872:	2101      	movs	r1, #1
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa14 	bl	8006ca2 <USBH_SetAddress>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 809e 	bne.w	80069be <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006882:	2002      	movs	r0, #2
 8006884:	f001 f9ed 	bl	8007c62 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2203      	movs	r2, #3
 8006894:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7919      	ldrb	r1, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80068aa:	b292      	uxth	r2, r2
 80068ac:	9202      	str	r2, [sp, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	9201      	str	r2, [sp, #4]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4603      	mov	r3, r0
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fe91 	bl	80075e0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7959      	ldrb	r1, [r3, #5]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80068d2:	b292      	uxth	r2, r2
 80068d4:	9202      	str	r2, [sp, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	9201      	str	r2, [sp, #4]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	4603      	mov	r3, r0
 80068de:	2200      	movs	r2, #0
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fe7d 	bl	80075e0 <USBH_OpenPipe>
    }
    break;
 80068e6:	e06a      	b.n	80069be <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80068e8:	2109      	movs	r1, #9
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f955 	bl	8006b9a <USBH_Get_CfgDesc>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d165      	bne.n	80069c2 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2204      	movs	r2, #4
 80068fa:	705a      	strb	r2, [r3, #1]
    }
    break;
 80068fc:	e061      	b.n	80069c2 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f947 	bl	8006b9a <USBH_Get_CfgDesc>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d159      	bne.n	80069c6 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2205      	movs	r2, #5
 8006916:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006918:	e055      	b.n	80069c6 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006930:	23ff      	movs	r3, #255	; 0xff
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f955 	bl	8006be2 <USBH_Get_StringDesc>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d145      	bne.n	80069ca <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2206      	movs	r2, #6
 8006942:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006944:	e041      	b.n	80069ca <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2206      	movs	r2, #6
 800694a:	705a      	strb	r2, [r3, #1]
    break;
 800694c:	e03d      	b.n	80069ca <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006964:	23ff      	movs	r3, #255	; 0xff
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f93b 	bl	8006be2 <USBH_Get_StringDesc>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d12d      	bne.n	80069ce <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2207      	movs	r2, #7
 8006976:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006978:	e029      	b.n	80069ce <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2207      	movs	r2, #7
 800697e:	705a      	strb	r2, [r3, #1]
    break;
 8006980:	e025      	b.n	80069ce <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00f      	beq.n	80069ac <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006998:	23ff      	movs	r3, #255	; 0xff
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f921 	bl	8006be2 <USBH_Get_StringDesc>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d115      	bne.n	80069d2 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80069aa:	e012      	b.n	80069d2 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]
    break;
 80069b0:	e00f      	b.n	80069d2 <USBH_HandleEnum+0x226>

  default:
    break;
 80069b2:	bf00      	nop
 80069b4:	e00e      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069b6:	bf00      	nop
 80069b8:	e00c      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069ba:	bf00      	nop
 80069bc:	e00a      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069be:	bf00      	nop
 80069c0:	e008      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069c2:	bf00      	nop
 80069c4:	e006      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069c6:	bf00      	nop
 80069c8:	e004      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069ca:	bf00      	nop
 80069cc:	e002      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069ce:	bf00      	nop
 80069d0:	e000      	b.n	80069d4 <USBH_HandleEnum+0x228>
    break;
 80069d2:	bf00      	nop
  }
  return Status;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop

080069e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f804 	bl	8006a22 <USBH_HandleSof>
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b0b      	cmp	r3, #11
 8006a32:	d10a      	bne.n	8006a4a <USBH_HandleSof+0x28>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
  }
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006a62:	bf00      	nop
}
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006a7e:	bf00      	nop
}
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00e      	beq.n	8006ae6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ace:	2104      	movs	r1, #4
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
 8006ad4:	e007      	b.n	8006ae6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d102      	bne.n	8006ae6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 ff68 	bl	80079ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fdb8 	bl	800767a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	795b      	ldrb	r3, [r3, #5]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fdb2 	bl	800767a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b2e:	2105      	movs	r1, #5
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 ff2f 	bl	8007998 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af02      	add	r7, sp, #8
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	4613      	mov	r3, r2
 8006b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f864 	bl	8006c38 <USBH_GetDescriptor>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f000 f918 	bl	8006dc0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af02      	add	r7, sp, #8
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	331c      	adds	r3, #28
 8006baa:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006bac:	887b      	ldrh	r3, [r7, #2]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f83d 	bl	8006c38 <USBH_GetDescriptor>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	72fb      	strb	r3, [r7, #11]
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	68f9      	ldr	r1, [r7, #12]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f964 	bl	8006ea0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b088      	sub	sp, #32
 8006be6:	af02      	add	r7, sp, #8
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	461a      	mov	r2, r3
 8006bee:	460b      	mov	r3, r1
 8006bf0:	72fb      	strb	r3, [r7, #11]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bfe:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f812 	bl	8006c38 <USBH_GetDescriptor>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d107      	bne.n	8006c2e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c24:	893a      	ldrh	r2, [r7, #8]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fa37 	bl	800709c <USBH_ParseStringDesc>
  }
  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	72fb      	strb	r3, [r7, #11]
 8006c46:	4613      	mov	r3, r2
 8006c48:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	789b      	ldrb	r3, [r3, #2]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d11c      	bne.n	8006c8c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2206      	movs	r2, #6
 8006c62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	893a      	ldrh	r2, [r7, #8]
 8006c68:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c74:	d104      	bne.n	8006c80 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f240 4209 	movw	r2, #1033	; 0x409
 8006c7c:	829a      	strh	r2, [r3, #20]
 8006c7e:	e002      	b.n	8006c86 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8b3a      	ldrh	r2, [r7, #24]
 8006c8a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006c8c:	8b3b      	ldrh	r3, [r7, #24]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa50 	bl	8007138 <USBH_CtlReq>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10f      	bne.n	8006cd6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa2c 	bl	8007138 <USBH_CtlReq>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	789b      	ldrb	r3, [r3, #2]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d10e      	bne.n	8006d1c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2209      	movs	r2, #9
 8006d08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	887a      	ldrh	r2, [r7, #2]
 8006d0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa09 	bl	8007138 <USBH_CtlReq>
 8006d26:	4603      	mov	r3, r0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	789b      	ldrb	r3, [r3, #2]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d10f      	bne.n	8006d64 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9e5 	bl	8007138 <USBH_CtlReq>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	789b      	ldrb	r3, [r3, #2]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d10f      	bne.n	8006dac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006dac:	2200      	movs	r2, #0
 8006dae:	2100      	movs	r1, #0
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9c1 	bl	8007138 <USBH_CtlReq>
 8006db6:	4603      	mov	r3, r0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	785a      	ldrb	r2, [r3, #1]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3302      	adds	r3, #2
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	3303      	adds	r3, #3
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	791a      	ldrb	r2, [r3, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	795a      	ldrb	r2, [r3, #5]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	799a      	ldrb	r2, [r3, #6]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	79da      	ldrb	r2, [r3, #7]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d939      	bls.n	8006e94 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	3308      	adds	r3, #8
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	3309      	adds	r3, #9
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4313      	orrs	r3, r2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	330a      	adds	r3, #10
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	330b      	adds	r3, #11
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	330d      	adds	r3, #13
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	7b9a      	ldrb	r2, [r3, #14]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	7bda      	ldrb	r2, [r3, #15]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	7c1a      	ldrb	r2, [r3, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	7c5a      	ldrb	r2, [r3, #17]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	745a      	strb	r2, [r3, #17]
  }
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	785a      	ldrb	r2, [r3, #1]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3303      	adds	r3, #3
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	791a      	ldrb	r2, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	795a      	ldrb	r2, [r3, #5]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	799a      	ldrb	r2, [r3, #6]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	79da      	ldrb	r2, [r3, #7]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7a1a      	ldrb	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b09      	cmp	r3, #9
 8006f1a:	d95f      	bls.n	8006fdc <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f1c:	2309      	movs	r3, #9
 8006f1e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f24:	e051      	b.n	8006fca <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f26:	f107 0316 	add.w	r3, r7, #22
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f2e:	f000 f8e8 	bl	8007102 <USBH_GetNextDesc>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d146      	bne.n	8006fca <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f40:	221a      	movs	r2, #26
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	3308      	adds	r3, #8
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f52:	69f8      	ldr	r0, [r7, #28]
 8006f54:	f000 f846 	bl	8006fe4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f62:	e022      	b.n	8006faa <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006f64:	f107 0316 	add.w	r3, r7, #22
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f6c:	f000 f8c9 	bl	8007102 <USBH_GetNextDesc>
 8006f70:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d117      	bne.n	8006faa <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f7e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006f82:	3201      	adds	r2, #1
 8006f84:	00d2      	lsls	r2, r2, #3
 8006f86:	211a      	movs	r1, #26
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3308      	adds	r3, #8
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	3304      	adds	r3, #4
 8006f96:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f000 f851 	bl	8007042 <USBH_ParseEPDesc>
            ep_ix++;
 8006fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d204      	bcs.n	8006fc0 <USBH_ParseCfgDesc+0x120>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	885a      	ldrh	r2, [r3, #2]
 8006fba:	8afb      	ldrh	r3, [r7, #22]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d8d1      	bhi.n	8006f64 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d804      	bhi.n	8006fdc <USBH_ParseCfgDesc+0x13c>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	885a      	ldrh	r2, [r3, #2]
 8006fd6:	8afb      	ldrh	r3, [r7, #22]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d8a4      	bhi.n	8006f26 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006fdc:	bf00      	nop
 8006fde:	3728      	adds	r7, #40	; 0x28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	785a      	ldrb	r2, [r3, #1]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	789a      	ldrb	r2, [r3, #2]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	78da      	ldrb	r2, [r3, #3]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	791a      	ldrb	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	795a      	ldrb	r2, [r3, #5]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	799a      	ldrb	r2, [r3, #6]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	79da      	ldrb	r2, [r3, #7]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	7a1a      	ldrb	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	721a      	strb	r2, [r3, #8]
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	785a      	ldrb	r2, [r3, #1]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	789a      	ldrb	r2, [r3, #2]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	78da      	ldrb	r2, [r3, #3]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b29a      	uxth	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	3305      	adds	r3, #5
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	b29b      	uxth	r3, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	799a      	ldrb	r2, [r3, #6]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	719a      	strb	r2, [r3, #6]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d120      	bne.n	80070f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	1e9a      	subs	r2, r3, #2
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	4293      	cmp	r3, r2
 80070be:	bf28      	it	cs
 80070c0:	4613      	movcs	r3, r2
 80070c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3302      	adds	r3, #2
 80070c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80070ca:	2300      	movs	r3, #0
 80070cc:	82fb      	strh	r3, [r7, #22]
 80070ce:	e00b      	b.n	80070e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80070d0:	8afb      	ldrh	r3, [r7, #22]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	701a      	strb	r2, [r3, #0]
      pdest++;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3301      	adds	r3, #1
 80070e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80070e2:	8afb      	ldrh	r3, [r7, #22]
 80070e4:	3302      	adds	r3, #2
 80070e6:	82fb      	strh	r3, [r7, #22]
 80070e8:	8afa      	ldrh	r2, [r7, #22]
 80070ea:	8abb      	ldrh	r3, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3ef      	bcc.n	80070d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
  }
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	4413      	add	r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800712a:	68fb      	ldr	r3, [r7, #12]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007146:	2301      	movs	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	789b      	ldrb	r3, [r3, #2]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d002      	beq.n	8007158 <USBH_CtlReq+0x20>
 8007152:	2b02      	cmp	r3, #2
 8007154:	d00f      	beq.n	8007176 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007156:	e034      	b.n	80071c2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2202      	movs	r2, #2
 800716e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
    break;
 8007174:	e025      	b.n	80071c2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f828 	bl	80071cc <USBH_HandleControl>
 800717c:	4603      	mov	r3, r0
 800717e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d108      	bne.n	8007198 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]
    break;
 8007196:	e013      	b.n	80071c0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d108      	bne.n	80071b0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80071aa:	2303      	movs	r3, #3
 80071ac:	75fb      	strb	r3, [r7, #23]
    break;
 80071ae:	e007      	b.n	80071c0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d104      	bne.n	80071c0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	75fb      	strb	r3, [r7, #23]
    break;
 80071c0:	bf00      	nop
  }
  return status;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071d8:	2300      	movs	r3, #0
 80071da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7e1b      	ldrb	r3, [r3, #24]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b0a      	cmp	r3, #10
 80071e4:	f200 814c 	bhi.w	8007480 <USBH_HandleControl+0x2b4>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBH_HandleControl+0x24>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	08007237 	.word	0x08007237
 80071f8:	080072a1 	.word	0x080072a1
 80071fc:	080072c7 	.word	0x080072c7
 8007200:	080072ff 	.word	0x080072ff
 8007204:	0800732b 	.word	0x0800732b
 8007208:	0800737d 	.word	0x0800737d
 800720c:	0800739f 	.word	0x0800739f
 8007210:	080073db 	.word	0x080073db
 8007214:	08007403 	.word	0x08007403
 8007218:	08007441 	.word	0x08007441
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f103 0110 	add.w	r1, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	795b      	ldrb	r3, [r3, #5]
 8007226:	461a      	mov	r2, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f939 	bl	80074a0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	761a      	strb	r2, [r3, #24]
    break;
 8007234:	e12f      	b.n	8007496 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	795b      	ldrb	r3, [r3, #5]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fcb3 	bl	8007ba8 <USBH_LL_GetURBState>
 8007242:	4603      	mov	r3, r0
 8007244:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d11e      	bne.n	800728a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7c1b      	ldrb	r3, [r3, #16]
 8007250:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007254:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	8adb      	ldrh	r3, [r3, #22]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800725e:	7b7b      	ldrb	r3, [r7, #13]
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d103      	bne.n	800726c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2203      	movs	r2, #3
 8007268:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800726a:	e10b      	b.n	8007484 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2205      	movs	r2, #5
 8007270:	761a      	strb	r2, [r3, #24]
    break;
 8007272:	e107      	b.n	8007484 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007274:	7b7b      	ldrb	r3, [r7, #13]
 8007276:	2b80      	cmp	r3, #128	; 0x80
 8007278:	d103      	bne.n	8007282 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2209      	movs	r2, #9
 800727e:	761a      	strb	r2, [r3, #24]
    break;
 8007280:	e100      	b.n	8007484 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2207      	movs	r2, #7
 8007286:	761a      	strb	r2, [r3, #24]
    break;
 8007288:	e0fc      	b.n	8007484 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b04      	cmp	r3, #4
 800728e:	d003      	beq.n	8007298 <USBH_HandleControl+0xcc>
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b02      	cmp	r3, #2
 8007294:	f040 80f6 	bne.w	8007484 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	220b      	movs	r2, #11
 800729c:	761a      	strb	r2, [r3, #24]
    break;
 800729e:	e0f1      	b.n	8007484 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6899      	ldr	r1, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	899a      	ldrh	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	791b      	ldrb	r3, [r3, #4]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f930 	bl	800751e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2204      	movs	r2, #4
 80072c2:	761a      	strb	r2, [r3, #24]
    break;
 80072c4:	e0e7      	b.n	8007496 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	791b      	ldrb	r3, [r3, #4]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc6b 	bl	8007ba8 <USBH_LL_GetURBState>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d102      	bne.n	80072e2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2209      	movs	r2, #9
 80072e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b05      	cmp	r3, #5
 80072e6:	d102      	bne.n	80072ee <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80072e8:	2303      	movs	r3, #3
 80072ea:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80072ec:	e0cc      	b.n	8007488 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	f040 80c9 	bne.w	8007488 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	220b      	movs	r2, #11
 80072fa:	761a      	strb	r2, [r3, #24]
    break;
 80072fc:	e0c4      	b.n	8007488 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	899a      	ldrh	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7958      	ldrb	r0, [r3, #5]
 800730a:	2301      	movs	r3, #1
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4603      	mov	r3, r0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8df 	bl	80074d4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800731c:	b29a      	uxth	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2206      	movs	r2, #6
 8007326:	761a      	strb	r2, [r3, #24]
    break;
 8007328:	e0b5      	b.n	8007496 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	795b      	ldrb	r3, [r3, #5]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc39 	bl	8007ba8 <USBH_LL_GetURBState>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d103      	bne.n	8007348 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2207      	movs	r2, #7
 8007344:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007346:	e0a1      	b.n	800748c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b05      	cmp	r3, #5
 800734c:	d105      	bne.n	800735a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	220c      	movs	r2, #12
 8007352:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
    break;
 8007358:	e098      	b.n	800748c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d103      	bne.n	8007368 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2205      	movs	r2, #5
 8007364:	761a      	strb	r2, [r3, #24]
    break;
 8007366:	e091      	b.n	800748c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b04      	cmp	r3, #4
 800736c:	f040 808e 	bne.w	800748c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220b      	movs	r2, #11
 8007374:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	73fb      	strb	r3, [r7, #15]
    break;
 800737a:	e087      	b.n	800748c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	791b      	ldrb	r3, [r3, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	2100      	movs	r1, #0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8ca 	bl	800751e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2208      	movs	r2, #8
 800739a:	761a      	strb	r2, [r3, #24]

    break;
 800739c:	e07b      	b.n	8007496 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fbff 	bl	8007ba8 <USBH_LL_GetURBState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d105      	bne.n	80073c0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	220d      	movs	r2, #13
 80073b8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073be:	e067      	b.n	8007490 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d103      	bne.n	80073ce <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220b      	movs	r2, #11
 80073ca:	761a      	strb	r2, [r3, #24]
    break;
 80073cc:	e060      	b.n	8007490 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d15d      	bne.n	8007490 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73fb      	strb	r3, [r7, #15]
    break;
 80073d8:	e05a      	b.n	8007490 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	795a      	ldrb	r2, [r3, #5]
 80073de:	2301      	movs	r3, #1
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	2200      	movs	r2, #0
 80073e6:	2100      	movs	r1, #0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f873 	bl	80074d4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	220a      	movs	r2, #10
 80073fe:	761a      	strb	r2, [r3, #24]
    break;
 8007400:	e049      	b.n	8007496 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	795b      	ldrb	r3, [r3, #5]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fbcd 	bl	8007ba8 <USBH_LL_GetURBState>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d105      	bne.n	8007424 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	220d      	movs	r2, #13
 8007420:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007422:	e037      	b.n	8007494 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d103      	bne.n	8007432 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2209      	movs	r2, #9
 800742e:	761a      	strb	r2, [r3, #24]
    break;
 8007430:	e030      	b.n	8007494 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b04      	cmp	r3, #4
 8007436:	d12d      	bne.n	8007494 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	220b      	movs	r2, #11
 800743c:	761a      	strb	r2, [r3, #24]
    break;
 800743e:	e029      	b.n	8007494 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7e5b      	ldrb	r3, [r3, #25]
 8007444:	3301      	adds	r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	765a      	strb	r2, [r3, #25]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	7e5b      	ldrb	r3, [r3, #25]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d809      	bhi.n	8007468 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 faba 	bl	80079ce <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007466:	e016      	b.n	8007496 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800746e:	2106      	movs	r1, #6
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800747a:	2302      	movs	r3, #2
 800747c:	73fb      	strb	r3, [r7, #15]
    break;
 800747e:	e00a      	b.n	8007496 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007480:	bf00      	nop
 8007482:	e008      	b.n	8007496 <USBH_HandleControl+0x2ca>
    break;
 8007484:	bf00      	nop
 8007486:	e006      	b.n	8007496 <USBH_HandleControl+0x2ca>
    break;
 8007488:	bf00      	nop
 800748a:	e004      	b.n	8007496 <USBH_HandleControl+0x2ca>
    break;
 800748c:	bf00      	nop
 800748e:	e002      	b.n	8007496 <USBH_HandleControl+0x2ca>
    break;
 8007490:	bf00      	nop
 8007492:	e000      	b.n	8007496 <USBH_HandleControl+0x2ca>
    break;
 8007494:	bf00      	nop
  }
  return status;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af04      	add	r7, sp, #16
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80074ae:	79f9      	ldrb	r1, [r7, #7]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	2308      	movs	r3, #8
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	2300      	movs	r3, #0
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	2200      	movs	r2, #0
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fb3e 	bl	8007b46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af04      	add	r7, sp, #16
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	460b      	mov	r3, r1
 80074e4:	80fb      	strh	r3, [r7, #6]
 80074e6:	4613      	mov	r3, r2
 80074e8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80074f8:	7979      	ldrb	r1, [r7, #5]
 80074fa:	7e3b      	ldrb	r3, [r7, #24]
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	9302      	str	r3, [sp, #8]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	2301      	movs	r3, #1
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	2200      	movs	r2, #0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fb19 	bl	8007b46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b088      	sub	sp, #32
 8007522:	af04      	add	r7, sp, #16
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	4611      	mov	r1, r2
 800752a:	461a      	mov	r2, r3
 800752c:	460b      	mov	r3, r1
 800752e:	80fb      	strh	r3, [r7, #6]
 8007530:	4613      	mov	r3, r2
 8007532:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007534:	7979      	ldrb	r1, [r7, #5]
 8007536:	2300      	movs	r3, #0
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	9302      	str	r3, [sp, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	2301      	movs	r3, #1
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	2300      	movs	r3, #0
 8007548:	2201      	movs	r2, #1
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fafb 	bl	8007b46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007550:	2300      	movs	r3, #0

}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b088      	sub	sp, #32
 800755e:	af04      	add	r7, sp, #16
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4611      	mov	r1, r2
 8007566:	461a      	mov	r2, r3
 8007568:	460b      	mov	r3, r1
 800756a:	80fb      	strh	r3, [r7, #6]
 800756c:	4613      	mov	r3, r2
 800756e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800757e:	7979      	ldrb	r1, [r7, #5]
 8007580:	7e3b      	ldrb	r3, [r7, #24]
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	9302      	str	r3, [sp, #8]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	2301      	movs	r3, #1
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2302      	movs	r3, #2
 8007592:	2200      	movs	r2, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fad6 	bl	8007b46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4611      	mov	r1, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	460b      	mov	r3, r1
 80075b4:	80fb      	strh	r3, [r7, #6]
 80075b6:	4613      	mov	r3, r2
 80075b8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80075ba:	7979      	ldrb	r1, [r7, #5]
 80075bc:	2300      	movs	r3, #0
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	2301      	movs	r3, #1
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2302      	movs	r3, #2
 80075ce:	2201      	movs	r2, #1
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 fab8 	bl	8007b46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	4608      	mov	r0, r1
 80075ea:	4611      	mov	r1, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	70fb      	strb	r3, [r7, #3]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70bb      	strb	r3, [r7, #2]
 80075f6:	4613      	mov	r3, r2
 80075f8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80075fa:	7878      	ldrb	r0, [r7, #1]
 80075fc:	78ba      	ldrb	r2, [r7, #2]
 80075fe:	78f9      	ldrb	r1, [r7, #3]
 8007600:	8b3b      	ldrh	r3, [r7, #24]
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	7d3b      	ldrb	r3, [r7, #20]
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	7c3b      	ldrb	r3, [r7, #16]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4603      	mov	r3, r0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa4b 	bl	8007aaa <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007614:	2300      	movs	r3, #0

}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa6a 	bl	8007b08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007634:	2300      	movs	r3, #0

}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f831 	bl	80076b2 <USBH_GetFreePipe>
 8007650:	4603      	mov	r3, r0
 8007652:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007654:	89fb      	ldrh	r3, [r7, #14]
 8007656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800765a:	4293      	cmp	r3, r2
 800765c:	d007      	beq.n	800766e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	89fa      	ldrh	r2, [r7, #14]
 8007662:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	32e0      	adds	r2, #224	; 0xe0
 800766a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800766e:	89fb      	ldrh	r3, [r7, #14]
 8007670:	b2db      	uxtb	r3, r3
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	2b0a      	cmp	r3, #10
 800768a:	d80b      	bhi.n	80076a4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32e0      	adds	r2, #224	; 0xe0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	32e0      	adds	r2, #224	; 0xe0
 80076a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
 80076c2:	e00e      	b.n	80076e2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80076c4:	7bfa      	ldrb	r2, [r7, #15]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32e0      	adds	r2, #224	; 0xe0
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	e007      	b.n	80076ec <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3301      	adds	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b0a      	cmp	r3, #10
 80076e6:	d9ed      	bls.n	80076c4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80076e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80076fc:	2201      	movs	r2, #1
 80076fe:	490e      	ldr	r1, [pc, #56]	; (8007738 <MX_USB_HOST_Init+0x40>)
 8007700:	480e      	ldr	r0, [pc, #56]	; (800773c <MX_USB_HOST_Init+0x44>)
 8007702:	f7fe fdbb 	bl	800627c <USBH_Init>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800770c:	f7f9 f990 	bl	8000a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007710:	490b      	ldr	r1, [pc, #44]	; (8007740 <MX_USB_HOST_Init+0x48>)
 8007712:	480a      	ldr	r0, [pc, #40]	; (800773c <MX_USB_HOST_Init+0x44>)
 8007714:	f7fe fe25 	bl	8006362 <USBH_RegisterClass>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800771e:	f7f9 f987 	bl	8000a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007722:	4806      	ldr	r0, [pc, #24]	; (800773c <MX_USB_HOST_Init+0x44>)
 8007724:	f7fe feaa 	bl	800647c <USBH_Start>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800772e:	f7f9 f97f 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007732:	bf00      	nop
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	08007759 	.word	0x08007759
 800773c:	20000248 	.word	0x20000248
 8007740:	2000000c 	.word	0x2000000c

08007744 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007748:	4802      	ldr	r0, [pc, #8]	; (8007754 <MX_USB_HOST_Process+0x10>)
 800774a:	f7fe fea7 	bl	800649c <USBH_Process>
}
 800774e:	bf00      	nop
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000248 	.word	0x20000248

08007758 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	3b01      	subs	r3, #1
 8007768:	2b04      	cmp	r3, #4
 800776a:	d819      	bhi.n	80077a0 <USBH_UserProcess+0x48>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <USBH_UserProcess+0x1c>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	080077a1 	.word	0x080077a1
 8007778:	08007791 	.word	0x08007791
 800777c:	080077a1 	.word	0x080077a1
 8007780:	08007799 	.word	0x08007799
 8007784:	08007789 	.word	0x08007789
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <USBH_UserProcess+0x58>)
 800778a:	2203      	movs	r2, #3
 800778c:	701a      	strb	r2, [r3, #0]
  break;
 800778e:	e008      	b.n	80077a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <USBH_UserProcess+0x58>)
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
  break;
 8007796:	e004      	b.n	80077a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <USBH_UserProcess+0x58>)
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]
  break;
 800779e:	e000      	b.n	80077a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80077a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	200000b4 	.word	0x200000b4

080077b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077bc:	f107 0314 	add.w	r3, r7, #20
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	609a      	str	r2, [r3, #8]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d4:	d147      	bne.n	8007866 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	4b25      	ldr	r3, [pc, #148]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	4a24      	ldr	r2, [pc, #144]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6313      	str	r3, [r2, #48]	; 0x30
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80077f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007800:	f107 0314 	add.w	r3, r7, #20
 8007804:	4619      	mov	r1, r3
 8007806:	481b      	ldr	r0, [pc, #108]	; (8007874 <HAL_HCD_MspInit+0xc0>)
 8007808:	f7fa f886 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800780c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007812:	2302      	movs	r3, #2
 8007814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800781a:	2303      	movs	r3, #3
 800781c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800781e:	230a      	movs	r3, #10
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007822:	f107 0314 	add.w	r3, r7, #20
 8007826:	4619      	mov	r1, r3
 8007828:	4812      	ldr	r0, [pc, #72]	; (8007874 <HAL_HCD_MspInit+0xc0>)
 800782a:	f7fa f875 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	4a0f      	ldr	r2, [pc, #60]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 8007834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007838:	6353      	str	r3, [r2, #52]	; 0x34
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	4a0b      	ldr	r2, [pc, #44]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 8007844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007848:	6453      	str	r3, [r2, #68]	; 0x44
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <HAL_HCD_MspInit+0xbc>)
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	2043      	movs	r0, #67	; 0x43
 800785c:	f7fa f825 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007860:	2043      	movs	r0, #67	; 0x43
 8007862:	f7fa f83e 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007866:	bf00      	nop
 8007868:	3728      	adds	r7, #40	; 0x28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40023800 	.word	0x40023800
 8007874:	40020000 	.word	0x40020000

08007878 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f8b9 	bl	80069fe <USBH_LL_IncTimer>
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff f8fe 	bl	8006aa4 <USBH_LL_Connect>
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff f916 	bl	8006af0 <USBH_LL_Disconnect>
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
 80078d8:	4613      	mov	r3, r2
 80078da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff f8ab 	bl	8006a52 <USBH_LL_PortEnabled>
} 
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff f8ab 	bl	8006a6e <USBH_LL_PortDisabled>
} 
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800792e:	2b01      	cmp	r3, #1
 8007930:	d12a      	bne.n	8007988 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007932:	4a18      	ldr	r2, [pc, #96]	; (8007994 <USBH_LL_Init+0x74>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <USBH_LL_Init+0x74>)
 800793e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007942:	4b14      	ldr	r3, [pc, #80]	; (8007994 <USBH_LL_Init+0x74>)
 8007944:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007948:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <USBH_LL_Init+0x74>)
 800794c:	2208      	movs	r2, #8
 800794e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <USBH_LL_Init+0x74>)
 8007952:	2201      	movs	r2, #1
 8007954:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <USBH_LL_Init+0x74>)
 8007958:	2200      	movs	r2, #0
 800795a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <USBH_LL_Init+0x74>)
 800795e:	2202      	movs	r2, #2
 8007960:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007962:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <USBH_LL_Init+0x74>)
 8007964:	2200      	movs	r2, #0
 8007966:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007968:	480a      	ldr	r0, [pc, #40]	; (8007994 <USBH_LL_Init+0x74>)
 800796a:	f7fa f970 	bl	8001c4e <HAL_HCD_Init>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007974:	f7f9 f85c 	bl	8000a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007978:	4806      	ldr	r0, [pc, #24]	; (8007994 <USBH_LL_Init+0x74>)
 800797a:	f7fa fd6b 	bl	8002454 <HAL_HCD_GetCurrentFrame>
 800797e:	4603      	mov	r3, r0
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff f82c 	bl	80069e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000614 	.word	0x20000614

08007998 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fa fcd8 	bl	8002364 <HAL_HCD_Start>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f95c 	bl	8007c78 <USBH_Get_USB_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fa fce0 	bl	80023aa <HAL_HCD_Stop>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f941 	bl	8007c78 <USBH_Get_USB_Status>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fa fd2a 	bl	8002470 <HAL_HCD_GetCurrentSpeed>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d007      	beq.n	8007a32 <USBH_LL_GetSpeed+0x2e>
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d302      	bcc.n	8007a2c <USBH_LL_GetSpeed+0x28>
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d006      	beq.n	8007a38 <USBH_LL_GetSpeed+0x34>
 8007a2a:	e008      	b.n	8007a3e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a30:	e008      	b.n	8007a44 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
    break;
 8007a36:	e005      	b.n	8007a44 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3c:	e002      	b.n	8007a44 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
    break;
 8007a42:	bf00      	nop
  }
  return  speed;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fa fcbd 	bl	80023e4 <HAL_HCD_ResetPort>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f901 	bl	8007c78 <USBH_Get_USB_Status>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fcc5 	bl	800242a <HAL_HCD_HC_GetXferCount>
 8007aa0:	4603      	mov	r3, r0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007aaa:	b590      	push	{r4, r7, lr}
 8007aac:	b089      	sub	sp, #36	; 0x24
 8007aae:	af04      	add	r7, sp, #16
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	70fb      	strb	r3, [r7, #3]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70bb      	strb	r3, [r7, #2]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007ad2:	787c      	ldrb	r4, [r7, #1]
 8007ad4:	78ba      	ldrb	r2, [r7, #2]
 8007ad6:	78f9      	ldrb	r1, [r7, #3]
 8007ad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4623      	mov	r3, r4
 8007aea:	f7fa f912 	bl	8001d12 <HAL_HCD_HC_Init>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f8bf 	bl	8007c78 <USBH_Get_USB_Status>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd90      	pop	{r4, r7, pc}

08007b08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fa f98b 	bl	8001e42 <HAL_HCD_HC_Halt>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f8a0 	bl	8007c78 <USBH_Get_USB_Status>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b46:	b590      	push	{r4, r7, lr}
 8007b48:	b089      	sub	sp, #36	; 0x24
 8007b4a:	af04      	add	r7, sp, #16
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4611      	mov	r1, r2
 8007b52:	461a      	mov	r2, r3
 8007b54:	4603      	mov	r3, r0
 8007b56:	70fb      	strb	r3, [r7, #3]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70bb      	strb	r3, [r7, #2]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007b6e:	787c      	ldrb	r4, [r7, #1]
 8007b70:	78ba      	ldrb	r2, [r7, #2]
 8007b72:	78f9      	ldrb	r1, [r7, #3]
 8007b74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4623      	mov	r3, r4
 8007b8a:	f7fa f97d 	bl	8001e88 <HAL_HCD_HC_SubmitRequest>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f86f 	bl	8007c78 <USBH_Get_USB_Status>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fa fc1e 	bl	8002400 <HAL_HCD_HC_GetURBState>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d103      	bne.n	8007bec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f872 	bl	8007cd0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007bec:	20c8      	movs	r0, #200	; 0xc8
 8007bee:	f7f9 fa07 	bl	8001000 <HAL_Delay>
  return USBH_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c14:	78fa      	ldrb	r2, [r7, #3]
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	440b      	add	r3, r1
 8007c22:	333b      	adds	r3, #59	; 0x3b
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	440b      	add	r3, r1
 8007c38:	3350      	adds	r3, #80	; 0x50
 8007c3a:	78ba      	ldrb	r2, [r7, #2]
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e009      	b.n	8007c54 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3351      	adds	r3, #81	; 0x51
 8007c50:	78ba      	ldrb	r2, [r7, #2]
 8007c52:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7f9 f9c8 	bl	8001000 <HAL_Delay>
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d817      	bhi.n	8007cbc <USBH_Get_USB_Status+0x44>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBH_Get_USB_Status+0x1c>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cab 	.word	0x08007cab
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cb7 	.word	0x08007cb7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca8:	e00b      	b.n	8007cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e008      	b.n	8007cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb4:	e005      	b.n	8007cc2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cba:	e002      	b.n	8007cc2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007cc0:	bf00      	nop
  }
  return usb_status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e001      	b.n	8007cee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <MX_DriverVbusFS+0x34>)
 8007cf6:	f7f9 ff91 	bl	8001c1c <HAL_GPIO_WritePin>
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	40020800 	.word	0x40020800

08007d08 <__errno>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	; (8007d10 <__errno+0x8>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	2000002c 	.word	0x2000002c

08007d14 <__libc_init_array>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4e0d      	ldr	r6, [pc, #52]	; (8007d4c <__libc_init_array+0x38>)
 8007d18:	4c0d      	ldr	r4, [pc, #52]	; (8007d50 <__libc_init_array+0x3c>)
 8007d1a:	1ba4      	subs	r4, r4, r6
 8007d1c:	10a4      	asrs	r4, r4, #2
 8007d1e:	2500      	movs	r5, #0
 8007d20:	42a5      	cmp	r5, r4
 8007d22:	d109      	bne.n	8007d38 <__libc_init_array+0x24>
 8007d24:	4e0b      	ldr	r6, [pc, #44]	; (8007d54 <__libc_init_array+0x40>)
 8007d26:	4c0c      	ldr	r4, [pc, #48]	; (8007d58 <__libc_init_array+0x44>)
 8007d28:	f000 f8ea 	bl	8007f00 <_init>
 8007d2c:	1ba4      	subs	r4, r4, r6
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	2500      	movs	r5, #0
 8007d32:	42a5      	cmp	r5, r4
 8007d34:	d105      	bne.n	8007d42 <__libc_init_array+0x2e>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d3c:	4798      	blx	r3
 8007d3e:	3501      	adds	r5, #1
 8007d40:	e7ee      	b.n	8007d20 <__libc_init_array+0xc>
 8007d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d46:	4798      	blx	r3
 8007d48:	3501      	adds	r5, #1
 8007d4a:	e7f2      	b.n	8007d32 <__libc_init_array+0x1e>
 8007d4c:	08007f3c 	.word	0x08007f3c
 8007d50:	08007f3c 	.word	0x08007f3c
 8007d54:	08007f3c 	.word	0x08007f3c
 8007d58:	08007f40 	.word	0x08007f40

08007d5c <malloc>:
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <malloc+0xc>)
 8007d5e:	4601      	mov	r1, r0
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f000 b861 	b.w	8007e28 <_malloc_r>
 8007d66:	bf00      	nop
 8007d68:	2000002c 	.word	0x2000002c

08007d6c <free>:
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <free+0xc>)
 8007d6e:	4601      	mov	r1, r0
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f000 b80b 	b.w	8007d8c <_free_r>
 8007d76:	bf00      	nop
 8007d78:	2000002c 	.word	0x2000002c

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <_free_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4605      	mov	r5, r0
 8007d90:	2900      	cmp	r1, #0
 8007d92:	d045      	beq.n	8007e20 <_free_r+0x94>
 8007d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d98:	1f0c      	subs	r4, r1, #4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfb8      	it	lt
 8007d9e:	18e4      	addlt	r4, r4, r3
 8007da0:	f000 f8ac 	bl	8007efc <__malloc_lock>
 8007da4:	4a1f      	ldr	r2, [pc, #124]	; (8007e24 <_free_r+0x98>)
 8007da6:	6813      	ldr	r3, [r2, #0]
 8007da8:	4610      	mov	r0, r2
 8007daa:	b933      	cbnz	r3, 8007dba <_free_r+0x2e>
 8007dac:	6063      	str	r3, [r4, #4]
 8007dae:	6014      	str	r4, [r2, #0]
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db6:	f000 b8a2 	b.w	8007efe <__malloc_unlock>
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	d90c      	bls.n	8007dd8 <_free_r+0x4c>
 8007dbe:	6821      	ldr	r1, [r4, #0]
 8007dc0:	1862      	adds	r2, r4, r1
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bf04      	itt	eq
 8007dc6:	681a      	ldreq	r2, [r3, #0]
 8007dc8:	685b      	ldreq	r3, [r3, #4]
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	bf04      	itt	eq
 8007dce:	1852      	addeq	r2, r2, r1
 8007dd0:	6022      	streq	r2, [r4, #0]
 8007dd2:	6004      	str	r4, [r0, #0]
 8007dd4:	e7ec      	b.n	8007db0 <_free_r+0x24>
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	b10a      	cbz	r2, 8007de0 <_free_r+0x54>
 8007ddc:	42a2      	cmp	r2, r4
 8007dde:	d9fa      	bls.n	8007dd6 <_free_r+0x4a>
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	1858      	adds	r0, r3, r1
 8007de4:	42a0      	cmp	r0, r4
 8007de6:	d10b      	bne.n	8007e00 <_free_r+0x74>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	4401      	add	r1, r0
 8007dec:	1858      	adds	r0, r3, r1
 8007dee:	4282      	cmp	r2, r0
 8007df0:	6019      	str	r1, [r3, #0]
 8007df2:	d1dd      	bne.n	8007db0 <_free_r+0x24>
 8007df4:	6810      	ldr	r0, [r2, #0]
 8007df6:	6852      	ldr	r2, [r2, #4]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	4401      	add	r1, r0
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	e7d7      	b.n	8007db0 <_free_r+0x24>
 8007e00:	d902      	bls.n	8007e08 <_free_r+0x7c>
 8007e02:	230c      	movs	r3, #12
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	e7d3      	b.n	8007db0 <_free_r+0x24>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	1821      	adds	r1, r4, r0
 8007e0c:	428a      	cmp	r2, r1
 8007e0e:	bf04      	itt	eq
 8007e10:	6811      	ldreq	r1, [r2, #0]
 8007e12:	6852      	ldreq	r2, [r2, #4]
 8007e14:	6062      	str	r2, [r4, #4]
 8007e16:	bf04      	itt	eq
 8007e18:	1809      	addeq	r1, r1, r0
 8007e1a:	6021      	streq	r1, [r4, #0]
 8007e1c:	605c      	str	r4, [r3, #4]
 8007e1e:	e7c7      	b.n	8007db0 <_free_r+0x24>
 8007e20:	bd38      	pop	{r3, r4, r5, pc}
 8007e22:	bf00      	nop
 8007e24:	200000b8 	.word	0x200000b8

08007e28 <_malloc_r>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	1ccd      	adds	r5, r1, #3
 8007e2c:	f025 0503 	bic.w	r5, r5, #3
 8007e30:	3508      	adds	r5, #8
 8007e32:	2d0c      	cmp	r5, #12
 8007e34:	bf38      	it	cc
 8007e36:	250c      	movcc	r5, #12
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	db01      	blt.n	8007e42 <_malloc_r+0x1a>
 8007e3e:	42a9      	cmp	r1, r5
 8007e40:	d903      	bls.n	8007e4a <_malloc_r+0x22>
 8007e42:	230c      	movs	r3, #12
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	2000      	movs	r0, #0
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	f000 f857 	bl	8007efc <__malloc_lock>
 8007e4e:	4a21      	ldr	r2, [pc, #132]	; (8007ed4 <_malloc_r+0xac>)
 8007e50:	6814      	ldr	r4, [r2, #0]
 8007e52:	4621      	mov	r1, r4
 8007e54:	b991      	cbnz	r1, 8007e7c <_malloc_r+0x54>
 8007e56:	4c20      	ldr	r4, [pc, #128]	; (8007ed8 <_malloc_r+0xb0>)
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	b91b      	cbnz	r3, 8007e64 <_malloc_r+0x3c>
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f83d 	bl	8007edc <_sbrk_r>
 8007e62:	6020      	str	r0, [r4, #0]
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 f838 	bl	8007edc <_sbrk_r>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d124      	bne.n	8007eba <_malloc_r+0x92>
 8007e70:	230c      	movs	r3, #12
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 f842 	bl	8007efe <__malloc_unlock>
 8007e7a:	e7e4      	b.n	8007e46 <_malloc_r+0x1e>
 8007e7c:	680b      	ldr	r3, [r1, #0]
 8007e7e:	1b5b      	subs	r3, r3, r5
 8007e80:	d418      	bmi.n	8007eb4 <_malloc_r+0x8c>
 8007e82:	2b0b      	cmp	r3, #11
 8007e84:	d90f      	bls.n	8007ea6 <_malloc_r+0x7e>
 8007e86:	600b      	str	r3, [r1, #0]
 8007e88:	50cd      	str	r5, [r1, r3]
 8007e8a:	18cc      	adds	r4, r1, r3
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 f836 	bl	8007efe <__malloc_unlock>
 8007e92:	f104 000b 	add.w	r0, r4, #11
 8007e96:	1d23      	adds	r3, r4, #4
 8007e98:	f020 0007 	bic.w	r0, r0, #7
 8007e9c:	1ac3      	subs	r3, r0, r3
 8007e9e:	d0d3      	beq.n	8007e48 <_malloc_r+0x20>
 8007ea0:	425a      	negs	r2, r3
 8007ea2:	50e2      	str	r2, [r4, r3]
 8007ea4:	e7d0      	b.n	8007e48 <_malloc_r+0x20>
 8007ea6:	428c      	cmp	r4, r1
 8007ea8:	684b      	ldr	r3, [r1, #4]
 8007eaa:	bf16      	itet	ne
 8007eac:	6063      	strne	r3, [r4, #4]
 8007eae:	6013      	streq	r3, [r2, #0]
 8007eb0:	460c      	movne	r4, r1
 8007eb2:	e7eb      	b.n	8007e8c <_malloc_r+0x64>
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	6849      	ldr	r1, [r1, #4]
 8007eb8:	e7cc      	b.n	8007e54 <_malloc_r+0x2c>
 8007eba:	1cc4      	adds	r4, r0, #3
 8007ebc:	f024 0403 	bic.w	r4, r4, #3
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d005      	beq.n	8007ed0 <_malloc_r+0xa8>
 8007ec4:	1a21      	subs	r1, r4, r0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 f808 	bl	8007edc <_sbrk_r>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d0cf      	beq.n	8007e70 <_malloc_r+0x48>
 8007ed0:	6025      	str	r5, [r4, #0]
 8007ed2:	e7db      	b.n	8007e8c <_malloc_r+0x64>
 8007ed4:	200000b8 	.word	0x200000b8
 8007ed8:	200000bc 	.word	0x200000bc

08007edc <_sbrk_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4c06      	ldr	r4, [pc, #24]	; (8007ef8 <_sbrk_r+0x1c>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	f7f8 ffac 	bl	8000e44 <_sbrk>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_sbrk_r+0x1a>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_sbrk_r+0x1a>
 8007ef4:	602b      	str	r3, [r5, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	200008d8 	.word	0x200008d8

08007efc <__malloc_lock>:
 8007efc:	4770      	bx	lr

08007efe <__malloc_unlock>:
 8007efe:	4770      	bx	lr

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr
